package casadmin;

import java.awt.Dimension;
import java.util.*;
import javax.swing.*;
import javax.swing.tree.*;
import oracle.jdbc.OracleTypes;

public class UserDetailPanel extends javax.swing.JPanel {

    public UserDetailPanel() {
        initComponents();
    }

    public UserDetailPanel(String p_sCustId, String p_sIdSap, String p_sTerminal, Date p_dateStart) {
        initComponents();
        terminal = p_sTerminal;
        dateStart = p_dateStart;
        // W danej klasie jest mnóżtwo zapytań SQL do tablic Oracle, w których Id Cust
        // ma typ Integer. Dla tego, żeby nie robić raz za razem konwersji typów,
        // zrobimy to jeden raz.
        iIdCas = Integer.parseInt(p_sCustId);
        sIdSap = p_sIdSap;

        YPFunctions.clearContainer(jSplitPane1);
        
        Vector<String> vFieldNames = GlobalData.oraSession.selectFieldNames("CUSTOMERS");
        depotDrExists = (vFieldNames.indexOf("DEPOT_DR") >= 0); 
        
        
        
        // Wypełniamy górną część ekranu
        fillUpperPanel(iIdCas,sIdSap);
        // zapełniamy zawartość drzewa
        
        
        fillShipmentsTree();
        
        this.jbOthersOk.setEnabled(GlobalData.returnsStarted);
        
        repaintScreen(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        upPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfIdCas = new javax.swing.JTextField();
        tfDataInst = new javax.swing.JTextField();
        tfVersion = new javax.swing.JTextField();
        tfOpiekun = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        tfDataSynchr = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        tfInstName = new javax.swing.JTextField();
        tfInstTel = new javax.swing.JTextField();
        tfInstStreet = new javax.swing.JTextField();
        tfInstCity = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        tfInstWarnings = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tfIdSAP = new javax.swing.JTextField();
        tfFullName = new javax.swing.JTextField();
        tfStreet = new javax.swing.JTextField();
        tfPostCode = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        tfHouse = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        tfCity = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        tfNIP = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tfTelephone = new javax.swing.JTextField();
        downPanel = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        date = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        jPanel5 = new javax.swing.JPanel();
        tabDetails = new javax.swing.JTabbedPane();
        jpData = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableTotals = new javax.swing.JTable();
        jbShowShipments = new javax.swing.JButton();
        jpLogSynchro = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableSynchro = new javax.swing.JTable();
        jpLogComm = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableComm = new javax.swing.JTable();
        jpAppEnv = new javax.swing.JPanel();
        jSplitPane4 = new javax.swing.JSplitPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableEnv = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        taEnv = new javax.swing.JTextArea();
        jpPrices = new javax.swing.JPanel();
        jSplitPane5 = new javax.swing.JSplitPane();
        jPanel12 = new javax.swing.JPanel();
        jpPriceOptions = new javax.swing.JPanel();
        comboProducts = new javax.swing.JComboBox();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        comboPlatnik = new javax.swing.JComboBox();
        jbShow = new javax.swing.JButton();
        cbDictionaries = new javax.swing.JComboBox();
        jpAddOpers = new javax.swing.JPanel();
        jbDeleteRecord = new javax.swing.JButton();
        jbAddRecord = new javax.swing.JButton();
        jbDeleteColumn = new javax.swing.JButton();
        jbAddColumn = new javax.swing.JButton();
        jbSave = new javax.swing.JButton();
        jpOpcje = new javax.swing.JPanel();
        jbDrOptions = new javax.swing.JButton();
        jbDiscount = new javax.swing.JButton();
        jpDictionaryData = new javax.swing.JPanel();
        scrollPanelDictionaryTable = new javax.swing.JScrollPane();
        dictionaryTable = new javax.swing.JTable();
        panelProduktyPlatnicy = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tableProducts = new javax.swing.JTable();
        jbDeleteRecord1 = new javax.swing.JButton();
        jbEditRecord = new javax.swing.JButton();
        jbAddRecord1 = new javax.swing.JButton();
        jpImport = new javax.swing.JPanel();
        panelImport = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        tfSourceIdCust = new javax.swing.JTextField();
        jbImport = new javax.swing.JButton();
        jbStartImport = new javax.swing.JButton();
        cbImportProducts = new javax.swing.JCheckBox();
        cbImportActivation = new javax.swing.JCheckBox();
        cbZleceniodawca = new javax.swing.JCheckBox();
        checkImport = new javax.swing.JCheckBox();
        panelDefault = new javax.swing.JPanel();
        checkDefault = new javax.swing.JCheckBox();
        jbDefault = new javax.swing.JButton();
        panelConvert = new javax.swing.JPanel();
        checkConvert = new javax.swing.JCheckBox();
        jbConvert = new javax.swing.JButton();
        jpWindows = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableWindows = new javax.swing.JTable();
        jbSaveWindows = new javax.swing.JButton();
        jpActivation = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        activityTable = new javax.swing.JTable();
        jbSaveActivation = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        comboHttpMode = new javax.swing.JComboBox();
        jpSynchronization = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        synchronizationTable = new javax.swing.JTable();
        jbSaveSynchronization = new javax.swing.JButton();
        butApp = new javax.swing.JButton();
        butApsHubs = new javax.swing.JButton();
        butConf = new javax.swing.JButton();
        butDist = new javax.swing.JButton();
        butCenEX = new javax.swing.JButton();
        butCenDR = new javax.swing.JButton();
        butCenPal = new javax.swing.JButton();
        butPC = new javax.swing.JButton();
        butServices = new javax.swing.JButton();
        butNumbers = new javax.swing.JButton();
        butAll = new javax.swing.JButton();
        jpInstalation = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        comboOpiekun = new javax.swing.JComboBox();
        jbSaveOpiekun = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        comboApp = new javax.swing.JComboBox();
        jLabel44 = new javax.swing.JLabel();
        comboDepotEX = new javax.swing.JComboBox();
        jLabel45 = new javax.swing.JLabel();
        comboRangeLP = new javax.swing.JComboBox();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        tfProgName = new javax.swing.JTextField();
        tfKurier = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        comboDepotDR = new javax.swing.JComboBox();
        jPanel13 = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        tfZlecName = new javax.swing.JTextField();
        tfZlecTel = new javax.swing.JTextField();
        tfZlecHouse = new javax.swing.JTextField();
        tfZlecPostCode = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        tfZlecSap = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        tfZlecCity = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        tfZlecStreet = new javax.swing.JTextField();
        jbCopyFromKlSap = new javax.swing.JButton();
        jLabel42 = new javax.swing.JLabel();
        tfZlecShort = new javax.swing.JTextField();
        jbSaveZlec = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        tfInstName1 = new javax.swing.JTextField();
        tfInstTel1 = new javax.swing.JTextField();
        tfInstHouse1 = new javax.swing.JTextField();
        tfInstPostCode1 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        tfInstWarnings1 = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        tfInstCity1 = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        tfInstStreet1 = new javax.swing.JTextField();
        jbSaveInstall = new javax.swing.JButton();
        panelSAP = new javax.swing.JPanel();
        checkEditSAP = new javax.swing.JCheckBox();
        jLabel54 = new javax.swing.JLabel();
        tfNewIdSAP = new javax.swing.JTextField();
        jLabel55 = new javax.swing.JLabel();
        tfNewShort = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        tfNewName = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        tfNewStreet = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        tfNewHouse = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        tfNewPostCode = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        tfNewCity = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        tfNewTel = new javax.swing.JTextField();
        jLabel62 = new javax.swing.JLabel();
        tfNewNIP = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        tfNewBank = new javax.swing.JTextField();
        jLabel64 = new javax.swing.JLabel();
        tfNewRach = new javax.swing.JTextField();
        jbGetSAPData = new javax.swing.JButton();
        jbSaveSAP = new javax.swing.JButton();
        jpSenderList = new javax.swing.JPanel();
        jpGroupSenders = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tableSenders = new javax.swing.JTable();
        jbAddFromSAP = new javax.swing.JButton();
        jbDel = new javax.swing.JButton();
        jbSaveSenders = new javax.swing.JButton();
        jpSetSpec = new javax.swing.JPanel();
        jpGroupSetSpec = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        tableSetSpec = new javax.swing.JTable();
        jpOthers = new javax.swing.JPanel();
        jpReturnWarnings = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        taReturnWarnings = new javax.swing.JTextArea();
        jbOthersOk = new javax.swing.JButton();
        jpResetPassword = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        tfOperatorName = new javax.swing.JTextField();
        jbSaveReset = new javax.swing.JButton();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setName("Form"); // NOI18N
        setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(casadmin.CasAdminApp.class).getContext().getResourceMap(UserDetailPanel.class);
        upPanel.setBackground(resourceMap.getColor("upPanel.background")); // NOI18N
        upPanel.setName("upPanel"); // NOI18N
        upPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        tfIdCas.setEditable(false);
        tfIdCas.setText(resourceMap.getString("tfIdCas.text")); // NOI18N
        tfIdCas.setName("tfIdCas"); // NOI18N
        jPanel1.add(tfIdCas, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 140, -1));

        tfDataInst.setEditable(false);
        tfDataInst.setText(resourceMap.getString("tfDataInst.text")); // NOI18N
        tfDataInst.setName("tfDataInst"); // NOI18N
        jPanel1.add(tfDataInst, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 140, -1));

        tfVersion.setEditable(false);
        tfVersion.setText(resourceMap.getString("tfVersion.text")); // NOI18N
        tfVersion.setName("tfVersion"); // NOI18N
        jPanel1.add(tfVersion, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 140, -1));

        tfOpiekun.setEditable(false);
        tfOpiekun.setText(resourceMap.getString("tfOpiekun.text")); // NOI18N
        tfOpiekun.setName("tfOpiekun"); // NOI18N
        jPanel1.add(tfOpiekun, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 140, -1));

        jLabel18.setText(resourceMap.getString("jLabel18.text")); // NOI18N
        jLabel18.setName("jLabel18"); // NOI18N
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        tfDataSynchr.setEditable(false);
        tfDataSynchr.setName("tfDataSynchr"); // NOI18N
        jPanel1.add(tfDataSynchr, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 140, -1));

        upPanel.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 240, 130));

        jPanel3.setBackground(resourceMap.getColor("jPanel3.background")); // NOI18N
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel3.border.title"))); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N
        jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N
        jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        jLabel17.setText(resourceMap.getString("jLabel17.text")); // NOI18N
        jLabel17.setName("jLabel17"); // NOI18N
        jPanel3.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        tfInstName.setEditable(false);
        tfInstName.setName("tfInstName"); // NOI18N
        jPanel3.add(tfInstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 180, -1));

        tfInstTel.setEditable(false);
        tfInstTel.setName("tfInstTel"); // NOI18N
        jPanel3.add(tfInstTel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 180, -1));

        tfInstStreet.setEditable(false);
        tfInstStreet.setName("tfInstStreet"); // NOI18N
        jPanel3.add(tfInstStreet, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 180, -1));

        tfInstCity.setEditable(false);
        tfInstCity.setName("tfInstCity"); // NOI18N
        jPanel3.add(tfInstCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 180, -1));

        jLabel21.setText(resourceMap.getString("jLabel21.text")); // NOI18N
        jLabel21.setName("jLabel21"); // NOI18N
        jPanel3.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        tfInstWarnings.setEditable(false);
        tfInstWarnings.setName("tfInstWarnings"); // NOI18N
        jPanel3.add(tfInstWarnings, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 180, -1));

        upPanel.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 10, 280, 130));

        jPanel2.setBackground(resourceMap.getColor("jPanel2.background")); // NOI18N
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        tfIdSAP.setEditable(false);
        tfIdSAP.setName("tfIdSAP"); // NOI18N
        jPanel2.add(tfIdSAP, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 80, -1));

        tfFullName.setEditable(false);
        tfFullName.setName("tfFullName"); // NOI18N
        jPanel2.add(tfFullName, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 310, -1));

        tfStreet.setEditable(false);
        tfStreet.setName("tfStreet"); // NOI18N
        jPanel2.add(tfStreet, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 190, -1));

        tfPostCode.setEditable(false);
        tfPostCode.setName("tfPostCode"); // NOI18N
        jPanel2.add(tfPostCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 80, -1));

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 40, -1));

        tfName.setEditable(false);
        tfName.setName("tfName"); // NOI18N
        jPanel2.add(tfName, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, 180, -1));

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 60, -1, -1));

        tfHouse.setEditable(false);
        tfHouse.setName("tfHouse"); // NOI18N
        jPanel2.add(tfHouse, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, 80, -1));

        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 40, -1));

        tfCity.setEditable(false);
        tfCity.setName("tfCity"); // NOI18N
        jPanel2.add(tfCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 180, -1));

        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        tfNIP.setEditable(false);
        tfNIP.setName("tfNIP"); // NOI18N
        jPanel2.add(tfNIP, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 80, -1));

        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, 40, -1));

        tfTelephone.setEditable(false);
        tfTelephone.setName("tfTelephone"); // NOI18N
        jPanel2.add(tfTelephone, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 100, 180, -1));

        upPanel.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 400, 130));

        jSplitPane1.setTopComponent(upPanel);

        downPanel.setBackground(resourceMap.getColor("downPanel.background")); // NOI18N
        downPanel.setName("downPanel"); // NOI18N
        downPanel.setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane2.setDividerLocation(200);
        jSplitPane2.setName("jSplitPane2"); // NOI18N

        jPanel4.setBackground(resourceMap.getColor("jPanel4.background")); // NOI18N
        jPanel4.setName("jPanel4"); // NOI18N
        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel8.setBackground(resourceMap.getColor("jPanel8.background")); // NOI18N
        jPanel8.setMinimumSize(new java.awt.Dimension(10, 200));
        jPanel8.setName("jPanel8"); // NOI18N

        jLabel19.setText(resourceMap.getString("jLabel19.text")); // NOI18N
        jLabel19.setName("jLabel19"); // NOI18N
        jPanel8.add(jLabel19);

        date.setDateFormatString(resourceMap.getString("date.dateFormatString")); // NOI18N
        date.setName("date"); // NOI18N
        date.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                datePropertyChange(evt);
            }
        });
        jPanel8.add(date);

        jPanel4.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tree.setForeground(resourceMap.getColor("tree.foreground")); // NOI18N
        tree.setName("tree"); // NOI18N
        tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                treeMouseReleased(evt);
            }
        });
        tree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                treeKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tree);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane2.setLeftComponent(jPanel4);

        jPanel5.setBackground(resourceMap.getColor("jPanel5.background")); // NOI18N
        jPanel5.setName("jPanel5"); // NOI18N
        jPanel5.setLayout(new java.awt.GridLayout(1, 0));

        tabDetails.setBackground(resourceMap.getColor("tabDetails.background")); // NOI18N
        tabDetails.setName("tabDetails"); // NOI18N
        tabDetails.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabDetailsStateChanged(evt);
            }
        });

        jpData.setBackground(resourceMap.getColor("jpData.background")); // NOI18N
        jpData.setName("jpData"); // NOI18N
        jpData.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        tableTotals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "null", "Title 2"
            }
        ));
        tableTotals.setName("tableTotals"); // NOI18N
        jScrollPane3.setViewportView(tableTotals);
        tableTotals.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tableTotals.columnModel.title0")); // NOI18N
        tableTotals.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tableTotals.columnModel.title1")); // NOI18N

        jpData.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(122, 5, 270, 40));

        jbShowShipments.setText(resourceMap.getString("jbShowShipments.text")); // NOI18N
        jbShowShipments.setName("jbShowShipments"); // NOI18N
        jbShowShipments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbShowShipmentsActionPerformed(evt);
            }
        });
        jpData.add(jbShowShipments, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, 100, 30));

        tabDetails.addTab(resourceMap.getString("jpData.TabConstraints.tabTitle"), jpData); // NOI18N

        jpLogSynchro.setBackground(resourceMap.getColor("jpLogSynchro.background")); // NOI18N
        jpLogSynchro.setName("jpLogSynchro"); // NOI18N
        jpLogSynchro.setLayout(new java.awt.GridLayout(1, 0));

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        tableSynchro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableSynchro.setName("tableSynchro"); // NOI18N
        jScrollPane4.setViewportView(tableSynchro);

        jpLogSynchro.add(jScrollPane4);

        tabDetails.addTab(resourceMap.getString("jpLogSynchro.TabConstraints.tabTitle"), jpLogSynchro); // NOI18N

        jpLogComm.setBackground(resourceMap.getColor("jpLogComm.background")); // NOI18N
        jpLogComm.setName("jpLogComm"); // NOI18N
        jpLogComm.setLayout(new java.awt.GridLayout(1, 0));

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        tableComm.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableComm.setName("tableComm"); // NOI18N
        tableComm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableCommMouseReleased(evt);
            }
        });
        tableComm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableCommKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(tableComm);

        jpLogComm.add(jScrollPane5);

        tabDetails.addTab(resourceMap.getString("jpLogComm.TabConstraints.tabTitle"), jpLogComm); // NOI18N

        jpAppEnv.setBackground(resourceMap.getColor("jpAppEnv.background")); // NOI18N
        jpAppEnv.setName("jpAppEnv"); // NOI18N
        jpAppEnv.setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane4.setBackground(resourceMap.getColor("jSplitPane4.background")); // NOI18N
        jSplitPane4.setDividerLocation(140);
        jSplitPane4.setName("jSplitPane4"); // NOI18N

        jScrollPane6.setName("jScrollPane6"); // NOI18N
        jScrollPane6.setPreferredSize(new java.awt.Dimension(100, 300));

        tableEnv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableEnv.setMinimumSize(new java.awt.Dimension(60, 1264));
        tableEnv.setName("tableEnv"); // NOI18N
        tableEnv.setOpaque(false);
        tableEnv.setPreferredSize(new java.awt.Dimension(80, 1264));
        tableEnv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableEnvMouseClicked(evt);
            }
        });
        tableEnv.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableEnvKeyReleased(evt);
            }
        });
        jScrollPane6.setViewportView(tableEnv);

        jSplitPane4.setLeftComponent(jScrollPane6);

        jScrollPane7.setName("jScrollPane7"); // NOI18N

        taEnv.setColumns(20);
        taEnv.setFont(resourceMap.getFont("taEnv.font")); // NOI18N
        taEnv.setRows(5);
        taEnv.setMinimumSize(new java.awt.Dimension(400, 14));
        taEnv.setName("taEnv"); // NOI18N
        jScrollPane7.setViewportView(taEnv);

        jSplitPane4.setRightComponent(jScrollPane7);

        jpAppEnv.add(jSplitPane4);

        tabDetails.addTab(resourceMap.getString("jpAppEnv.TabConstraints.tabTitle"), jpAppEnv); // NOI18N

        jpPrices.setBackground(resourceMap.getColor("jpPrices.background")); // NOI18N
        jpPrices.setName("jpPrices"); // NOI18N
        jpPrices.setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane5.setDividerLocation(160);
        jSplitPane5.setName("jSplitPane5"); // NOI18N

        jPanel12.setBackground(resourceMap.getColor("jPanel12.background")); // NOI18N
        jPanel12.setName("jPanel12"); // NOI18N
        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpPriceOptions.setBackground(resourceMap.getColor("jpPriceOptions.background")); // NOI18N
        jpPriceOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jpPriceOptions.border.title"))); // NOI18N
        jpPriceOptions.setName("jpPriceOptions"); // NOI18N
        jpPriceOptions.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        comboProducts.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboProducts.setName("comboProducts"); // NOI18N
        jpPriceOptions.add(comboProducts, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 80, -1));

        jLabel22.setText(resourceMap.getString("jLabel22.text")); // NOI18N
        jLabel22.setName("jLabel22"); // NOI18N
        jpPriceOptions.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, 20));

        jLabel23.setText(resourceMap.getString("jLabel23.text")); // NOI18N
        jLabel23.setName("jLabel23"); // NOI18N
        jpPriceOptions.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, 20));

        comboPlatnik.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboPlatnik.setName("comboPlatnik"); // NOI18N
        jpPriceOptions.add(comboPlatnik, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 80, -1));

        jbShow.setText(resourceMap.getString("jbShow.text")); // NOI18N
        jbShow.setName("jbShow"); // NOI18N
        jbShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbShowActionPerformed(evt);
            }
        });
        jpPriceOptions.add(jbShow, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 140, -1));

        cbDictionaries.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cennik Ekspresowy EX", "Cennik Drobnicowy DR", "Cennik palet", "Konfiguracja", "Pola formularza", "Produkty, płatnicy", " ", " " }));
        cbDictionaries.setName("cbDictionaries"); // NOI18N
        cbDictionaries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDictionariesActionPerformed(evt);
            }
        });
        jpPriceOptions.add(cbDictionaries, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 140, -1));

        jPanel12.add(jpPriceOptions, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 160, 150));

        jpAddOpers.setBackground(resourceMap.getColor("jpAddOpers.background")); // NOI18N
        jpAddOpers.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jpAddOpers.border.title"))); // NOI18N
        jpAddOpers.setName("jpAddOpers"); // NOI18N
        jpAddOpers.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jbDeleteRecord.setText(resourceMap.getString("jbDeleteRecord.text")); // NOI18N
        jbDeleteRecord.setName("jbDeleteRecord"); // NOI18N
        jbDeleteRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteRecordActionPerformed(evt);
            }
        });
        jpAddOpers.add(jbDeleteRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 140, -1));

        jbAddRecord.setText(resourceMap.getString("jbAddRecord.text")); // NOI18N
        jbAddRecord.setName("jbAddRecord"); // NOI18N
        jbAddRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddRecordActionPerformed(evt);
            }
        });
        jpAddOpers.add(jbAddRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 140, -1));

        jbDeleteColumn.setText(resourceMap.getString("jbDeleteColumn.text")); // NOI18N
        jbDeleteColumn.setName("jbDeleteColumn"); // NOI18N
        jbDeleteColumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteColumnActionPerformed(evt);
            }
        });
        jpAddOpers.add(jbDeleteColumn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 140, -1));

        jbAddColumn.setText(resourceMap.getString("jbAddColumn.text")); // NOI18N
        jbAddColumn.setName("jbAddColumn"); // NOI18N
        jbAddColumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddColumnActionPerformed(evt);
            }
        });
        jpAddOpers.add(jbAddColumn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 140, -1));

        jPanel12.add(jpAddOpers, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 160, 140));

        jbSave.setText(resourceMap.getString("jbSave.text")); // NOI18N
        jbSave.setName("jbSave"); // NOI18N
        jbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActionPerformed(evt);
            }
        });
        jPanel12.add(jbSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 140, 30));

        jpOpcje.setBackground(resourceMap.getColor("jpOpcje.background")); // NOI18N
        jpOpcje.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jpOpcje.border.title"))); // NOI18N
        jpOpcje.setName("jpOpcje"); // NOI18N
        jpOpcje.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jbDrOptions.setText(resourceMap.getString("jbDrOptions.text")); // NOI18N
        jbDrOptions.setName("jbDrOptions"); // NOI18N
        jbDrOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDrOptionsActionPerformed(evt);
            }
        });
        jpOpcje.add(jbDrOptions, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 140, -1));

        jbDiscount.setText(resourceMap.getString("jbDiscount.text")); // NOI18N
        jbDiscount.setName("jbDiscount"); // NOI18N
        jbDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDiscountActionPerformed(evt);
            }
        });
        jpOpcje.add(jbDiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 140, -1));

        jPanel12.add(jpOpcje, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 160, 80));

        jSplitPane5.setLeftComponent(jPanel12);

        jpDictionaryData.setBackground(resourceMap.getColor("jpDictionaryData.background")); // NOI18N
        jpDictionaryData.setName("jpDictionaryData"); // NOI18N
        jpDictionaryData.setLayout(new java.awt.CardLayout());

        scrollPanelDictionaryTable.setName("scrollPanelDictionaryTable"); // NOI18N

        dictionaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        dictionaryTable.setCellSelectionEnabled(true);
        dictionaryTable.setName("dictionaryTable"); // NOI18N
        dictionaryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                dictionaryTableMouseReleased(evt);
            }
        });
        scrollPanelDictionaryTable.setViewportView(dictionaryTable);

        jpDictionaryData.add(scrollPanelDictionaryTable, "card2");

        panelProduktyPlatnicy.setBackground(resourceMap.getColor("panelProduktyPlatnicy.background")); // NOI18N
        panelProduktyPlatnicy.setName("panelProduktyPlatnicy"); // NOI18N
        panelProduktyPlatnicy.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel15.setBackground(resourceMap.getColor("jPanel15.background")); // NOI18N
        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel15.border.title"))); // NOI18N
        jPanel15.setName("jPanel15"); // NOI18N
        jPanel15.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane8.setName("jScrollPane8"); // NOI18N

        tableProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableProducts.setName("tableProducts"); // NOI18N
        jScrollPane8.setViewportView(tableProducts);

        jPanel15.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 22, 524, 220));

        jbDeleteRecord1.setText(resourceMap.getString("jbDeleteRecord1.text")); // NOI18N
        jbDeleteRecord1.setName("jbDeleteRecord1"); // NOI18N
        jbDeleteRecord1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteRecord1ActionPerformed(evt);
            }
        });
        jPanel15.add(jbDeleteRecord1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 250, 80, -1));

        jbEditRecord.setText(resourceMap.getString("jbEditRecord.text")); // NOI18N
        jbEditRecord.setName("jbEditRecord"); // NOI18N
        jbEditRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditRecordActionPerformed(evt);
            }
        });
        jPanel15.add(jbEditRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 250, 70, -1));

        jbAddRecord1.setText(resourceMap.getString("jbAddRecord1.text")); // NOI18N
        jbAddRecord1.setName("jbAddRecord1"); // NOI18N
        jbAddRecord1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddRecord1ActionPerformed(evt);
            }
        });
        jPanel15.add(jbAddRecord1, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 250, 70, -1));

        panelProduktyPlatnicy.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 540, 280));

        jpDictionaryData.add(panelProduktyPlatnicy, "card3");

        jSplitPane5.setRightComponent(jpDictionaryData);

        jpPrices.add(jSplitPane5);

        tabDetails.addTab(resourceMap.getString("jpPrices.TabConstraints.tabTitle"), jpPrices); // NOI18N

        jpImport.setBackground(resourceMap.getColor("jpImport.background")); // NOI18N
        jpImport.setName("jpImport"); // NOI18N
        jpImport.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelImport.setBackground(resourceMap.getColor("panelImport.background")); // NOI18N
        panelImport.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelImport.border.title"))); // NOI18N
        panelImport.setName("panelImport"); // NOI18N
        panelImport.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel24.setText(resourceMap.getString("jLabel24.text")); // NOI18N
        jLabel24.setName("jLabel24"); // NOI18N
        panelImport.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, 90, 20));

        tfSourceIdCust.setName("tfSourceIdCust"); // NOI18N
        panelImport.add(tfSourceIdCust, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 40, 60, -1));

        jbImport.setText(resourceMap.getString("jbImport.text")); // NOI18N
        jbImport.setName("jbImport"); // NOI18N
        jbImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImportActionPerformed(evt);
            }
        });
        panelImport.add(jbImport, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 40, 20, 20));

        jbStartImport.setText(resourceMap.getString("jbStartImport.text")); // NOI18N
        jbStartImport.setName("jbStartImport"); // NOI18N
        jbStartImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbStartImportActionPerformed(evt);
            }
        });
        panelImport.add(jbStartImport, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 70, 170, 30));

        cbImportProducts.setBackground(resourceMap.getColor("cbImportProducts.background")); // NOI18N
        cbImportProducts.setText(resourceMap.getString("cbImportProducts.text")); // NOI18N
        cbImportProducts.setName("cbImportProducts"); // NOI18N
        panelImport.add(cbImportProducts, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, -1, -1));

        cbImportActivation.setBackground(resourceMap.getColor("cbImportActivation.background")); // NOI18N
        cbImportActivation.setText(resourceMap.getString("cbImportActivation.text")); // NOI18N
        cbImportActivation.setName("cbImportActivation"); // NOI18N
        panelImport.add(cbImportActivation, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, -1, -1));

        cbZleceniodawca.setBackground(resourceMap.getColor("cbZleceniodawca.background")); // NOI18N
        cbZleceniodawca.setText(resourceMap.getString("cbZleceniodawca.text")); // NOI18N
        cbZleceniodawca.setName("cbZleceniodawca"); // NOI18N
        panelImport.add(cbZleceniodawca, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, -1, -1));

        checkImport.setBackground(resourceMap.getColor("checkImport.background")); // NOI18N
        checkImport.setText(resourceMap.getString("checkImport.text")); // NOI18N
        checkImport.setName("checkImport"); // NOI18N
        checkImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkImportActionPerformed(evt);
            }
        });
        panelImport.add(checkImport, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 330, -1));

        jpImport.add(panelImport, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 540, 110));

        panelDefault.setBackground(resourceMap.getColor("panelDefault.background")); // NOI18N
        panelDefault.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelDefault.border.title"))); // NOI18N
        panelDefault.setName("panelDefault"); // NOI18N
        panelDefault.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        checkDefault.setBackground(resourceMap.getColor("checkDefault.background")); // NOI18N
        checkDefault.setText(resourceMap.getString("checkDefault.text")); // NOI18N
        checkDefault.setName("checkDefault"); // NOI18N
        checkDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDefaultActionPerformed(evt);
            }
        });
        panelDefault.add(checkDefault, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 290, -1));

        jbDefault.setText(resourceMap.getString("jbDefault.text")); // NOI18N
        jbDefault.setName("jbDefault"); // NOI18N
        jbDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDefaultActionPerformed(evt);
            }
        });
        panelDefault.add(jbDefault, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, 170, 30));

        jpImport.add(panelDefault, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 540, 60));

        panelConvert.setBackground(resourceMap.getColor("panelConvert.background")); // NOI18N
        panelConvert.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelConvert.border.title"))); // NOI18N
        panelConvert.setName("panelConvert"); // NOI18N
        panelConvert.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        checkConvert.setBackground(resourceMap.getColor("checkConvert.background")); // NOI18N
        checkConvert.setText(resourceMap.getString("checkConvert.text")); // NOI18N
        checkConvert.setName("checkConvert"); // NOI18N
        checkConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkConvertActionPerformed(evt);
            }
        });
        panelConvert.add(checkConvert, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jbConvert.setText(resourceMap.getString("jbConvert.text")); // NOI18N
        jbConvert.setName("jbConvert"); // NOI18N
        jbConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConvertActionPerformed(evt);
            }
        });
        panelConvert.add(jbConvert, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 23, 170, 30));

        jpImport.add(panelConvert, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 540, 70));

        tabDetails.addTab(resourceMap.getString("jpImport.TabConstraints.tabTitle"), jpImport); // NOI18N

        jpWindows.setBackground(resourceMap.getColor("jpWindows.background")); // NOI18N
        jpWindows.setName("jpWindows"); // NOI18N
        jpWindows.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel14.setBackground(resourceMap.getColor("jPanel14.background")); // NOI18N
        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel14.border.title"))); // NOI18N
        jPanel14.setName("jPanel14"); // NOI18N
        jPanel14.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tableWindows.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableWindows.setName("tableWindows"); // NOI18N
        jScrollPane2.setViewportView(tableWindows);

        jPanel14.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 440, 350));

        jbSaveWindows.setText(resourceMap.getString("jbSaveWindows.text")); // NOI18N
        jbSaveWindows.setName("jbSaveWindows"); // NOI18N
        jbSaveWindows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveWindowsActionPerformed(evt);
            }
        });
        jPanel14.add(jbSaveWindows, new org.netbeans.lib.awtextra.AbsoluteConstraints(363, 380, 100, -1));

        jpWindows.add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 5, 480, 410));

        tabDetails.addTab(resourceMap.getString("jpWindows.TabConstraints.tabTitle"), jpWindows); // NOI18N

        jpActivation.setBackground(resourceMap.getColor("jpActivation.background")); // NOI18N
        jpActivation.setName("jpActivation"); // NOI18N
        jpActivation.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane10.setName("jScrollPane10"); // NOI18N

        activityTable.setBackground(resourceMap.getColor("activityTable.background")); // NOI18N
        activityTable.setForeground(resourceMap.getColor("activityTable.foreground")); // NOI18N
        activityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        activityTable.setGridColor(resourceMap.getColor("activityTable.gridColor")); // NOI18N
        activityTable.setName("activityTable"); // NOI18N
        jScrollPane10.setViewportView(activityTable);

        jpActivation.add(jScrollPane10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 480, 410));

        jbSaveActivation.setText(resourceMap.getString("jbSaveActivation.text")); // NOI18N
        jbSaveActivation.setName("jbSaveActivation"); // NOI18N
        jbSaveActivation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActivationActionPerformed(evt);
            }
        });
        jpActivation.add(jbSaveActivation, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 400, 160, -1));

        jPanel6.setBackground(resourceMap.getColor("jPanel6.background")); // NOI18N
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel6.border.title"))); // NOI18N
        jPanel6.setName("jPanel6"); // NOI18N
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        comboHttpMode.setName("comboHttpMode"); // NOI18N
        jPanel6.add(comboHttpMode, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 27, 340, -1));

        jpActivation.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, 370, 70));

        tabDetails.addTab(resourceMap.getString("jpActivation.TabConstraints.tabTitle"), jpActivation); // NOI18N

        jpSynchronization.setBackground(resourceMap.getColor("jpSynchronization.background")); // NOI18N
        jpSynchronization.setAutoscrolls(true);
        jpSynchronization.setName("jpSynchronization"); // NOI18N
        jpSynchronization.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane11.setName("jScrollPane11"); // NOI18N

        synchronizationTable.setBackground(resourceMap.getColor("synchronizationTable.background")); // NOI18N
        synchronizationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        synchronizationTable.setName("synchronizationTable"); // NOI18N
        jScrollPane11.setViewportView(synchronizationTable);

        jpSynchronization.add(jScrollPane11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 710, 370));

        jbSaveSynchronization.setText(resourceMap.getString("jbSaveSynchronization.text")); // NOI18N
        jbSaveSynchronization.setName("jbSaveSynchronization"); // NOI18N
        jbSaveSynchronization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveSynchronizationActionPerformed(evt);
            }
        });
        jpSynchronization.add(jbSaveSynchronization, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 410, 140, -1));

        butApp.setText(resourceMap.getString("butApp.text")); // NOI18N
        butApp.setName("butApp"); // NOI18N
        butApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAppActionPerformed(evt);
            }
        });
        jpSynchronization.add(butApp, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 110, -1));

        butApsHubs.setText(resourceMap.getString("butApsHubs.text")); // NOI18N
        butApsHubs.setName("butApsHubs"); // NOI18N
        butApsHubs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butApsHubsActionPerformed(evt);
            }
        });
        jpSynchronization.add(butApsHubs, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 0, 120, -1));

        butConf.setText(resourceMap.getString("butConf.text")); // NOI18N
        butConf.setName("butConf"); // NOI18N
        butConf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConfActionPerformed(evt);
            }
        });
        jpSynchronization.add(butConf, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 0, 120, -1));

        butDist.setText(resourceMap.getString("butDist.text")); // NOI18N
        butDist.setName("butDist"); // NOI18N
        butDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDistActionPerformed(evt);
            }
        });
        jpSynchronization.add(butDist, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 0, 120, -1));

        butCenEX.setText(resourceMap.getString("butCenEX.text")); // NOI18N
        butCenEX.setName("butCenEX"); // NOI18N
        butCenEX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCenEXActionPerformed(evt);
            }
        });
        jpSynchronization.add(butCenEX, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 110, -1));

        butCenDR.setText(resourceMap.getString("butCenDR.text")); // NOI18N
        butCenDR.setName("butCenDR"); // NOI18N
        butCenDR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCenDRActionPerformed(evt);
            }
        });
        jpSynchronization.add(butCenDR, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 120, -1));

        butCenPal.setText(resourceMap.getString("butCenPal.text")); // NOI18N
        butCenPal.setName("butCenPal"); // NOI18N
        butCenPal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCenPalActionPerformed(evt);
            }
        });
        jpSynchronization.add(butCenPal, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, 120, -1));

        butPC.setText(resourceMap.getString("butPC.text")); // NOI18N
        butPC.setName("butPC"); // NOI18N
        butPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPCActionPerformed(evt);
            }
        });
        jpSynchronization.add(butPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, 120, -1));

        butServices.setText(resourceMap.getString("butServices.text")); // NOI18N
        butServices.setName("butServices"); // NOI18N
        butServices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butServicesActionPerformed(evt);
            }
        });
        jpSynchronization.add(butServices, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 20, 120, -1));

        butNumbers.setText(resourceMap.getString("butNumbers.text")); // NOI18N
        butNumbers.setName("butNumbers"); // NOI18N
        butNumbers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNumbersActionPerformed(evt);
            }
        });
        jpSynchronization.add(butNumbers, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 0, 120, -1));

        butAll.setText(resourceMap.getString("butAll.text")); // NOI18N
        butAll.setName("butAll"); // NOI18N
        butAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAllActionPerformed(evt);
            }
        });
        jpSynchronization.add(butAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 0, 120, 40));

        tabDetails.addTab(resourceMap.getString("jpSynchronization.TabConstraints.tabTitle"), jpSynchronization); // NOI18N

        jpInstalation.setBackground(resourceMap.getColor("jpInstalation.background")); // NOI18N
        jpInstalation.setName("jpInstalation"); // NOI18N
        jpInstalation.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel7.setBackground(resourceMap.getColor("jPanel7.background")); // NOI18N
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel7.border.title"))); // NOI18N
        jPanel7.setAutoscrolls(true);
        jPanel7.setName("jPanel7"); // NOI18N
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel32.setText(resourceMap.getString("jLabel32.text")); // NOI18N
        jLabel32.setName("jLabel32"); // NOI18N
        jPanel7.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, -1, 20));

        comboOpiekun.setName("comboOpiekun"); // NOI18N
        jPanel7.add(comboOpiekun, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 100, -1));

        jbSaveOpiekun.setText(resourceMap.getString("jbSaveOpiekun.text")); // NOI18N
        jbSaveOpiekun.setName("jbSaveOpiekun"); // NOI18N
        jbSaveOpiekun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveOpiekunActionPerformed(evt);
            }
        });
        jPanel7.add(jbSaveOpiekun, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, 120, -1));

        jLabel43.setText(resourceMap.getString("jLabel43.text")); // NOI18N
        jLabel43.setName("jLabel43"); // NOI18N
        jPanel7.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, 20));

        comboApp.setName("comboApp"); // NOI18N
        jPanel7.add(comboApp, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 100, -1));

        jLabel44.setText(resourceMap.getString("jLabel44.text")); // NOI18N
        jLabel44.setName("jLabel44"); // NOI18N
        jPanel7.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 50, 20));

        comboDepotEX.setName("comboDepotEX"); // NOI18N
        jPanel7.add(comboDepotEX, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 60, -1));

        jLabel45.setText(resourceMap.getString("jLabel45.text")); // NOI18N
        jLabel45.setName("jLabel45"); // NOI18N
        jPanel7.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, 20));

        comboRangeLP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2000", "3000", "5000", "10000", "20000", "30000", "50000", "100000", "200000", "500000", "1000000" }));
        comboRangeLP.setName("comboRangeLP"); // NOI18N
        jPanel7.add(comboRangeLP, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 100, -1));

        jLabel46.setText(resourceMap.getString("jLabel46.text")); // NOI18N
        jLabel46.setName("jLabel46"); // NOI18N
        jPanel7.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, 20));

        jLabel47.setText(resourceMap.getString("jLabel47.text")); // NOI18N
        jLabel47.setName("jLabel47"); // NOI18N
        jPanel7.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, 20));

        tfProgName.setText(resourceMap.getString("tfProgName.text")); // NOI18N
        tfProgName.setName("tfProgName"); // NOI18N
        jPanel7.add(tfProgName, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 100, -1));

        tfKurier.setText(resourceMap.getString("tfKurier.text")); // NOI18N
        tfKurier.setName("tfKurier"); // NOI18N
        jPanel7.add(tfKurier, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 60, 60, -1));

        jLabel48.setText(resourceMap.getString("jLabel48.text")); // NOI18N
        jLabel48.setName("jLabel48"); // NOI18N
        jPanel7.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, 50, 20));

        comboDepotDR.setName("comboDepotDR"); // NOI18N
        jPanel7.add(comboDepotDR, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 40, 60, -1));

        jpInstalation.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 310, 330, 110));

        jPanel13.setBackground(resourceMap.getColor("jPanel13.background")); // NOI18N
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel13.border.title"))); // NOI18N
        jPanel13.setName("jPanel13"); // NOI18N
        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel35.setText(resourceMap.getString("jLabel35.text")); // NOI18N
        jLabel35.setName("jLabel35"); // NOI18N
        jPanel13.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        jLabel36.setText(resourceMap.getString("jLabel36.text")); // NOI18N
        jLabel36.setName("jLabel36"); // NOI18N
        jPanel13.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));

        jLabel37.setText(resourceMap.getString("jLabel37.text")); // NOI18N
        jLabel37.setName("jLabel37"); // NOI18N
        jPanel13.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        jLabel38.setText(resourceMap.getString("jLabel38.text")); // NOI18N
        jLabel38.setName("jLabel38"); // NOI18N
        jPanel13.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        tfZlecName.setName("tfZlecName"); // NOI18N
        jPanel13.add(tfZlecName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 240, -1));

        tfZlecTel.setName("tfZlecTel"); // NOI18N
        jPanel13.add(tfZlecTel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, 240, -1));

        tfZlecHouse.setName("tfZlecHouse"); // NOI18N
        jPanel13.add(tfZlecHouse, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 140, 240, -1));

        tfZlecPostCode.setName("tfZlecPostCode"); // NOI18N
        jPanel13.add(tfZlecPostCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 240, -1));

        jLabel39.setText(resourceMap.getString("jLabel39.text")); // NOI18N
        jLabel39.setName("jLabel39"); // NOI18N
        jPanel13.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        tfZlecSap.setName("tfZlecSap"); // NOI18N
        jPanel13.add(tfZlecSap, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 100, -1));

        jLabel40.setText(resourceMap.getString("jLabel40.text")); // NOI18N
        jLabel40.setName("jLabel40"); // NOI18N
        jPanel13.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        tfZlecCity.setName("tfZlecCity"); // NOI18N
        jPanel13.add(tfZlecCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 240, -1));

        jLabel41.setText(resourceMap.getString("jLabel41.text")); // NOI18N
        jLabel41.setName("jLabel41"); // NOI18N
        jPanel13.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        tfZlecStreet.setName("tfZlecStreet"); // NOI18N
        jPanel13.add(tfZlecStreet, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 120, 240, -1));

        jbCopyFromKlSap.setText(resourceMap.getString("jbCopyFromKlSap.text")); // NOI18N
        jbCopyFromKlSap.setName("jbCopyFromKlSap"); // NOI18N
        jbCopyFromKlSap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCopyFromKlSapActionPerformed(evt);
            }
        });
        jPanel13.add(jbCopyFromKlSap, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, 140, 20));

        jLabel42.setText(resourceMap.getString("jLabel42.text")); // NOI18N
        jLabel42.setName("jLabel42"); // NOI18N
        jPanel13.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        tfZlecShort.setName("tfZlecShort"); // NOI18N
        jPanel13.add(tfZlecShort, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 240, -1));

        jbSaveZlec.setText(resourceMap.getString("jbSaveZlec.text")); // NOI18N
        jbSaveZlec.setName("jbSaveZlec"); // NOI18N
        jbSaveZlec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveZlecActionPerformed(evt);
            }
        });
        jPanel13.add(jbSaveZlec, new org.netbeans.lib.awtextra.AbsoluteConstraints(223, 180, 120, -1));

        jpInstalation.add(jPanel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 350, 210));

        jPanel9.setBackground(resourceMap.getColor("jPanel9.background")); // NOI18N
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel9.border.title"))); // NOI18N
        jPanel9.setName("jPanel9"); // NOI18N
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel20.setText(resourceMap.getString("jLabel20.text")); // NOI18N
        jLabel20.setName("jLabel20"); // NOI18N
        jPanel9.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel28.setText(resourceMap.getString("jLabel28.text")); // NOI18N
        jLabel28.setName("jLabel28"); // NOI18N
        jPanel9.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        jLabel29.setText(resourceMap.getString("jLabel29.text")); // NOI18N
        jLabel29.setName("jLabel29"); // NOI18N
        jPanel9.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        jLabel30.setText(resourceMap.getString("jLabel30.text")); // NOI18N
        jLabel30.setName("jLabel30"); // NOI18N
        jPanel9.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        tfInstName1.setName("tfInstName1"); // NOI18N
        jPanel9.add(tfInstName1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 250, -1));

        tfInstTel1.setName("tfInstTel1"); // NOI18N
        jPanel9.add(tfInstTel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 250, -1));

        tfInstHouse1.setName("tfInstHouse1"); // NOI18N
        jPanel9.add(tfInstHouse1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 250, -1));

        tfInstPostCode1.setName("tfInstPostCode1"); // NOI18N
        jPanel9.add(tfInstPostCode1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 250, -1));

        jLabel31.setText(resourceMap.getString("jLabel31.text")); // NOI18N
        jLabel31.setName("jLabel31"); // NOI18N
        jPanel9.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));

        tfInstWarnings1.setName("tfInstWarnings1"); // NOI18N
        jPanel9.add(tfInstWarnings1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 250, -1));

        jLabel33.setText(resourceMap.getString("jLabel33.text")); // NOI18N
        jLabel33.setName("jLabel33"); // NOI18N
        jPanel9.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        tfInstCity1.setName("tfInstCity1"); // NOI18N
        jPanel9.add(tfInstCity1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 250, -1));

        jLabel34.setText(resourceMap.getString("jLabel34.text")); // NOI18N
        jLabel34.setName("jLabel34"); // NOI18N
        jPanel9.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        tfInstStreet1.setName("tfInstStreet1"); // NOI18N
        jPanel9.add(tfInstStreet1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 250, -1));

        jbSaveInstall.setText(resourceMap.getString("jbSaveInstall.text")); // NOI18N
        jbSaveInstall.setName("jbSaveInstall"); // NOI18N
        jbSaveInstall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveInstallActionPerformed(evt);
            }
        });
        jPanel9.add(jbSaveInstall, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 160, 110, -1));

        jpInstalation.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 350, 190));

        panelSAP.setBackground(resourceMap.getColor("panelSAP.background")); // NOI18N
        panelSAP.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelSAP.border.title"))); // NOI18N
        panelSAP.setName("panelSAP"); // NOI18N
        panelSAP.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        checkEditSAP.setBackground(resourceMap.getColor("checkEditSAP.background")); // NOI18N
        checkEditSAP.setText(resourceMap.getString("checkEditSAP.text")); // NOI18N
        checkEditSAP.setName("checkEditSAP"); // NOI18N
        checkEditSAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEditSAPActionPerformed(evt);
            }
        });
        panelSAP.add(checkEditSAP, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 190, 20));

        jLabel54.setText(resourceMap.getString("jLabel54.text")); // NOI18N
        jLabel54.setName("jLabel54"); // NOI18N
        panelSAP.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, 20));

        tfNewIdSAP.setName("tfNewIdSAP"); // NOI18N
        panelSAP.add(tfNewIdSAP, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 90, -1));

        jLabel55.setText(resourceMap.getString("jLabel55.text")); // NOI18N
        jLabel55.setName("jLabel55"); // NOI18N
        panelSAP.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 20));

        tfNewShort.setName("tfNewShort"); // NOI18N
        panelSAP.add(tfNewShort, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 230, -1));

        jLabel56.setText(resourceMap.getString("jLabel56.text")); // NOI18N
        jLabel56.setName("jLabel56"); // NOI18N
        panelSAP.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, 20));

        tfNewName.setName("tfNewName"); // NOI18N
        panelSAP.add(tfNewName, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 230, -1));

        jLabel57.setText(resourceMap.getString("jLabel57.text")); // NOI18N
        jLabel57.setName("jLabel57"); // NOI18N
        panelSAP.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, 20));

        tfNewStreet.setName("tfNewStreet"); // NOI18N
        panelSAP.add(tfNewStreet, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 230, -1));

        jLabel58.setText(resourceMap.getString("jLabel58.text")); // NOI18N
        jLabel58.setName("jLabel58"); // NOI18N
        panelSAP.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, 20));

        tfNewHouse.setName("tfNewHouse"); // NOI18N
        panelSAP.add(tfNewHouse, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 230, -1));

        jLabel59.setText(resourceMap.getString("jLabel59.text")); // NOI18N
        jLabel59.setName("jLabel59"); // NOI18N
        panelSAP.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, 20));

        tfNewPostCode.setName("tfNewPostCode"); // NOI18N
        panelSAP.add(tfNewPostCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 230, -1));

        jLabel60.setText(resourceMap.getString("jLabel60.text")); // NOI18N
        jLabel60.setName("jLabel60"); // NOI18N
        panelSAP.add(jLabel60, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, 20));

        tfNewCity.setName("tfNewCity"); // NOI18N
        panelSAP.add(tfNewCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 160, 230, -1));

        jLabel61.setText(resourceMap.getString("jLabel61.text")); // NOI18N
        jLabel61.setName("jLabel61"); // NOI18N
        panelSAP.add(jLabel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, 20));

        tfNewTel.setName("tfNewTel"); // NOI18N
        panelSAP.add(tfNewTel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 180, 230, -1));

        jLabel62.setText(resourceMap.getString("jLabel62.text")); // NOI18N
        jLabel62.setName("jLabel62"); // NOI18N
        panelSAP.add(jLabel62, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, -1, 20));

        tfNewNIP.setName("tfNewNIP"); // NOI18N
        panelSAP.add(tfNewNIP, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 200, 230, -1));

        jLabel63.setText(resourceMap.getString("jLabel63.text")); // NOI18N
        jLabel63.setName("jLabel63"); // NOI18N
        panelSAP.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, 20));

        tfNewBank.setName("tfNewBank"); // NOI18N
        panelSAP.add(tfNewBank, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 220, 230, -1));

        jLabel64.setText(resourceMap.getString("jLabel64.text")); // NOI18N
        jLabel64.setName("jLabel64"); // NOI18N
        panelSAP.add(jLabel64, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, -1, 20));

        tfNewRach.setName("tfNewRach"); // NOI18N
        panelSAP.add(tfNewRach, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 240, 230, -1));

        jbGetSAPData.setText(resourceMap.getString("jbGetSAPData.text")); // NOI18N
        jbGetSAPData.setName("jbGetSAPData"); // NOI18N
        jbGetSAPData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGetSAPDataActionPerformed(evt);
            }
        });
        panelSAP.add(jbGetSAPData, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, 140, 20));

        jbSaveSAP.setText(resourceMap.getString("jbSaveSAP.text")); // NOI18N
        jbSaveSAP.setName("jbSaveSAP"); // NOI18N
        jbSaveSAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveSAPActionPerformed(evt);
            }
        });
        panelSAP.add(jbSaveSAP, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 260, 130, -1));

        jpInstalation.add(panelSAP, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 330, 290));

        tabDetails.addTab(resourceMap.getString("jpInstalation.TabConstraints.tabTitle"), jpInstalation); // NOI18N

        jpSenderList.setBackground(resourceMap.getColor("jpSenderList.background")); // NOI18N
        jpSenderList.setName("jpSenderList"); // NOI18N
        jpSenderList.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpGroupSenders.setBackground(resourceMap.getColor("jpGroupSenders.background")); // NOI18N
        jpGroupSenders.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jpGroupSenders.border.title"))); // NOI18N
        jpGroupSenders.setName("jpGroupSenders"); // NOI18N
        jpGroupSenders.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane9.setName("jScrollPane9"); // NOI18N

        tableSenders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableSenders.setName("tableSenders"); // NOI18N
        jScrollPane9.setViewportView(tableSenders);

        jpGroupSenders.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 20, 710, 210));

        jbAddFromSAP.setText(resourceMap.getString("jbAddFromSAP.text")); // NOI18N
        jbAddFromSAP.setName("jbAddFromSAP"); // NOI18N
        jbAddFromSAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddFromSAPActionPerformed(evt);
            }
        });
        jpGroupSenders.add(jbAddFromSAP, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 240, 170, -1));

        jbDel.setText(resourceMap.getString("jbDel.text")); // NOI18N
        jbDel.setName("jbDel"); // NOI18N
        jbDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDelActionPerformed(evt);
            }
        });
        jpGroupSenders.add(jbDel, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 240, 170, -1));

        jbSaveSenders.setText(resourceMap.getString("jbSaveSenders.text")); // NOI18N
        jbSaveSenders.setName("jbSaveSenders"); // NOI18N
        jbSaveSenders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveSendersActionPerformed(evt);
            }
        });
        jpGroupSenders.add(jbSaveSenders, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 240, 170, -1));

        jpSenderList.add(jpGroupSenders, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 730, 280));

        tabDetails.addTab(resourceMap.getString("jpSenderList.TabConstraints.tabTitle"), jpSenderList); // NOI18N

        jpSetSpec.setBackground(resourceMap.getColor("jpSetSpec.background")); // NOI18N
        jpSetSpec.setName("jpSetSpec"); // NOI18N
        jpSetSpec.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpGroupSetSpec.setBackground(resourceMap.getColor("jpGroupSetSpec.background")); // NOI18N
        jpGroupSetSpec.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jpGroupSetSpec.border.title"))); // NOI18N
        jpGroupSetSpec.setName("jpGroupSetSpec"); // NOI18N
        jpGroupSetSpec.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane12.setName("jScrollPane12"); // NOI18N

        tableSetSpec.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableSetSpec.setName("tableSetSpec"); // NOI18N
        tableSetSpec.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableSetSpecMouseReleased(evt);
            }
        });
        jScrollPane12.setViewportView(tableSetSpec);
        tableSetSpec.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tableSetSpec.columnModel.title0")); // NOI18N
        tableSetSpec.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tableSetSpec.columnModel.title1")); // NOI18N
        tableSetSpec.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tableSetSpec.columnModel.title2")); // NOI18N
        tableSetSpec.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tableSetSpec.columnModel.title3")); // NOI18N

        jpGroupSetSpec.add(jScrollPane12, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 20, 830, 230));

        jpSetSpec.add(jpGroupSetSpec, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 850, 330));

        tabDetails.addTab(resourceMap.getString("jpSetSpec.TabConstraints.tabTitle"), jpSetSpec); // NOI18N

        jpOthers.setBackground(resourceMap.getColor("jpOthers.background")); // NOI18N
        jpOthers.setName("jpOthers"); // NOI18N
        jpOthers.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpReturnWarnings.setBackground(resourceMap.getColor("jpReturnWarnings.background")); // NOI18N
        jpReturnWarnings.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jpReturnWarnings.border.title"))); // NOI18N
        jpReturnWarnings.setName("jpReturnWarnings"); // NOI18N
        jpReturnWarnings.setLayout(new java.awt.BorderLayout());

        jScrollPane13.setName("jScrollPane13"); // NOI18N

        taReturnWarnings.setColumns(20);
        taReturnWarnings.setFont(resourceMap.getFont("taReturnWarnings.font")); // NOI18N
        taReturnWarnings.setLineWrap(true);
        taReturnWarnings.setRows(5);
        taReturnWarnings.setWrapStyleWord(true);
        taReturnWarnings.setName("taReturnWarnings"); // NOI18N
        jScrollPane13.setViewportView(taReturnWarnings);

        jpReturnWarnings.add(jScrollPane13, java.awt.BorderLayout.CENTER);

        jpOthers.add(jpReturnWarnings, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 12, 860, 180));
        jpReturnWarnings.getAccessibleContext().setAccessibleName(resourceMap.getString("jpReturnWarnings.AccessibleContext.accessibleName")); // NOI18N

        jbOthersOk.setText(resourceMap.getString("jbOthersOk.text")); // NOI18N
        jbOthersOk.setName("jbOthersOk"); // NOI18N
        jbOthersOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOthersOkActionPerformed(evt);
            }
        });
        jpOthers.add(jbOthersOk, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 390, -1, -1));

        tabDetails.addTab(resourceMap.getString("jpOthers.TabConstraints.tabTitle"), jpOthers); // NOI18N

        jpResetPassword.setBackground(resourceMap.getColor("jpResetPassword.background")); // NOI18N
        jpResetPassword.setName("jpResetPassword"); // NOI18N
        jpResetPassword.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel10.setBackground(resourceMap.getColor("jPanel10.background")); // NOI18N
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel10.border.title"))); // NOI18N
        jPanel10.setName("jPanel10"); // NOI18N
        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel52.setText(resourceMap.getString("jLabel52.text")); // NOI18N
        jLabel52.setName("jLabel52"); // NOI18N
        jPanel10.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 120, -1));

        tfOperatorName.setName("tfOperatorName"); // NOI18N
        jPanel10.add(tfOperatorName, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 190, -1));

        jbSaveReset.setText(resourceMap.getString("jbSaveReset.text")); // NOI18N
        jbSaveReset.setName("jbSaveReset"); // NOI18N
        jbSaveReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveResetActionPerformed(evt);
            }
        });
        jPanel10.add(jbSaveReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 160, 110, -1));

        jScrollPane15.setName("jScrollPane15"); // NOI18N

        jTextPane1.setBackground(resourceMap.getColor("jTextPane1.background")); // NOI18N
        jTextPane1.setBorder(null);
        jTextPane1.setText(resourceMap.getString("jTextPane1.text")); // NOI18N
        jTextPane1.setName("jTextPane1"); // NOI18N
        jScrollPane15.setViewportView(jTextPane1);

        jPanel10.add(jScrollPane15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 330, 70));

        jpResetPassword.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, 350, 190));

        tabDetails.addTab(resourceMap.getString("jpResetPassword.TabConstraints.tabTitle"), jpResetPassword); // NOI18N

        jPanel5.add(tabDetails);

        jSplitPane2.setRightComponent(jPanel5);

        downPanel.add(jSplitPane2);

        jSplitPane1.setRightComponent(downPanel);

        add(jSplitPane1);
    }// </editor-fold>//GEN-END:initComponents
    private void fillUpperPanel(int p_iIdCas, String p_sIdSap)
    {
        // Wypełniamy górną część ekranu
        tfIdCas.setText(Integer.toString(p_iIdCas));
        tfIdSAP.setText(p_sIdSap);
        String query =
                "SELECT c.date_synchro," +
                    "c.date_install," +
                    "c.app_version," +
                    "c.user_name," +
                    "i.NAME," +
                    "i.STREET," +
                    "i.STREETNO," +
                    "i.ZIPCODE," +
                    "i.CITY," +
                    "i.PHONE," +
                    "m.memo," +
                    "s.l_n_shortname,s.l_n_name,s.l_n_addr_zipcode,s.l_n_addr_city," +
                    "s.l_n_addr_street,s.l_n_addr_streetno,s.l_n_nip,s.l_n_telephone," +
                    "c.depot,c.range_lp,c.program_name,c.kurier " +
                "FROM v_CUSTOMERS C,customers_install i,customers_memo m," +
                "dict_config s " +
                //"customers_sap s " +
                "where c.id_cust=? and " +
                    "c.ID_CUST=i.ID_CUST(+) and " +
                    "c.ID_CUST=m.ID_CUST(+) and " +
                    "s.id_cust=c.id_cust";
//                    "s.id_sap=?";

        Vector<String> v =
                GlobalData.oraSession.selectFirstRecordToVector(query,
                     new Vector(Arrays.asList(p_iIdCas)));
//                     new Vector(Arrays.asList(p_iIdCas,p_sIdSap)));
        // Instalacja
        tfInstName.setText(v.elementAt(4));
        tfInstTel.setText(v.elementAt(9));
        tfInstStreet.setText(v.elementAt(5) + " " + v.elementAt(6));
        tfInstCity.setText(v.elementAt(7) + " " + v.elementAt(8));
        tfInstWarnings.setText(v.elementAt(10));
        //CAS
        tfDataInst.setText(v.elementAt(1));
        tfDataSynchr.setText(v.elementAt(0));
        tfVersion.setText(v.elementAt(2));
        tfOpiekun.setText(v.elementAt(3));
        //SAP
        tfName.setText(v.elementAt(11));
        tfFullName.setText(v.elementAt(12));
        tfStreet.setText(v.elementAt(15));
        tfHouse.setText(v.elementAt(16));
        tfPostCode.setText(v.elementAt(13));
        tfCity.setText(v.elementAt(14));
        tfNIP.setText(v.elementAt(17));
        tfTelephone.setText(v.elementAt(18));
        
        currentDepotEX = (String)v.elementAt(19);
        currentRangeLP = (String)v.elementAt(20);
        currentProgName = (String)v.elementAt(21);
        currentKurier = (String)v.elementAt(22);
        
        if (depotDrExists)
           currentDepotDR = GlobalData.oraSession.selectString("select depot_dr from customers where id_cust=?",
                  new Vector(Arrays.asList(p_iIdCas)), currentDepotEX);
        else
            currentDepotDR = currentDepotEX;
        
        

    }


    /**
    *  Zapełnianie drzewa aktywności klienta
    */
    private void fillShipmentsTree() {
        // Mapa dla danych w relacji "Data" -> "Przesyłek/Paczek"
        // Tworzymy nowe drzewo
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Przesyłki");
        DefaultMutableTreeNode year = null, month = null, day = null;
        // Odczytujemy ilość przesyłek i paczek za każdą datę i grupę dat
        String formattedStartDate = YPFunctions.DateToString(dateStart);
        Vector<Vector<String> > vAll = GlobalData.oraSession.selectAllRecordsToVector(
          "select * from ( " +
                  "select to_char(time,'YYYY/MM/DD') dd ,shipment,parcel " +
                  "from data_ship_count " +
                  "where id_cust=? and " +
                         "time >= to_date(?,'yyyy/MM/dd') " +
               "union " +
                  "select distinct to_char(time,'YYYY/MM') dd,sum(shipment),sum(parcel) " +
                  "from data_ship_count " +
                  "where id_cust=? and " +
                         "time >= to_date(?,'yyyy/MM/dd') " +
                  "group by to_char(time,'YYYY/MM') " +
               "union " +
                  "select distinct to_char(time,'YYYY') dd,sum(shipment),sum(parcel) " +
                  "from data_ship_count " +
                  "where id_cust=? and " +
                         "time >= to_date(?,'yyyy/MM/dd') " +
                  "group by to_char(time,'YYYY')" +
          ") order by dd",
          new Vector(Arrays.asList(iIdCas,formattedStartDate,iIdCas,formattedStartDate,iIdCas,formattedStartDate)));




        Enumeration en = vAll.elements();

        // Wypełniamy drzewo
        while (en.hasMoreElements()) {
            Vector<String> v = (Vector<String>) en.nextElement();
            String node = v.elementAt(0);
            String nodeText = node + "    [ " + v.elementAt(1) + " / " + v.elementAt(2) + " ]";
            if (node.length() == 4) { // rok YYYY
                 year = new DefaultMutableTreeNode(nodeText);
                 root.add(year);
            }
            else if (node.length() == 7) { // miesiąc YYYY/MM
                 month = new DefaultMutableTreeNode(nodeText);
                 year.add(month);
            }
            else { // dzień
                 day = new DefaultMutableTreeNode(nodeText);
                 month.add(day);
            }
        }
        tree.setModel(new DefaultTreeModel(root));

        // Przerysowujemy drzewo
        tree.repaint();
    }

    private void repaintScreen(Boolean bRepaintDate) {
        // Zapamiętujemy, jaka data jest wybrana w drzewie
        String selectedDate = "";
        String p1 = "0", p2 = "0";
        TreePath path = tree.getSelectionPath();
        if (path != null) {
            DefaultMutableTreeNode selection = (DefaultMutableTreeNode) path.getLastPathComponent();
            String text = selection.toString();
            text = text.replace(" ", "");
            int p = text.indexOf("[");
            if (p >= 0)
            {
                   selectedDate = text.substring(0, p);
                   text = text.substring(p+1);
                   text = text.substring(0, text.length()-1);
                   p1 = YPFunctions.getTokenAt(0, text, "/", "");
                   p2 = YPFunctions.getTokenAt(1, text, "/", "");
            }
        }

        // Jeśli parameter bRepaintDate = true,
        // to wystawiamy wybraną datę w kalendarzu, ale tylko wtędy,
        // kiedy był wybrany listek drzewa, t. zn. dzień
        if (bRepaintDate) {
            if ((selectedDate.length() == 10) &&
                    (selectedDate.charAt(4) == '/') &&
                    (selectedDate.charAt(7) == '/')) {
                Date d = YPFunctions.StringToDate(selectedDate);
                date.setDate(d);
            } else {
                date.setDate(null);
            }
            date.repaint();
        }
        // wybieramy zawsze 1-ą zakładkę tabDetails i wypełniamy ją
        tabDetails.setSelectedIndex(0);
        Vector<Vector> v = new Vector();
        // Wypełniamy małą tabliczkę tableTotals ilością przesyłek / paczek
        // za wybraną datę
        v.add(new Vector(Arrays.asList(p1, p2)));
        tableTotals.setModel(new YPTableModel(v, new Vector(Arrays.asList("Przesyłek", "Paczek")),new Vector()));
        //Wypełniamy także zmienne fromDate i toDate dla podalszych operacji
        //Jeśli wybrana pojedyncza data
        jbShowShipments.setEnabled(true);
        if ((selectedDate.length() == 10) &&
                (selectedDate.charAt(4) == '/') &&
                (selectedDate.charAt(7) == '/')) {
            fromDate = YPFunctions.StringToDate(selectedDate);
            toDate = fromDate;
        } //Jeśli wybrany miesiąć yyyy/mm
        else if ((selectedDate.length() == 7) &&
                (selectedDate.charAt(4) == '/')) {
            fromDate = YPFunctions.StringToDate(selectedDate + "/01");
            toDate = YPFunctions.StringToDate(selectedDate + "/31");
        } //Jeśli wybrany cały rok yyyy
        else if ((selectedDate.length() == 4)) {
            fromDate = YPFunctions.StringToDate(selectedDate + "/01/01");
            toDate = YPFunctions.StringToDate(selectedDate + "/12/31");
        } else {
            fromDate = null;
            toDate = null;
            jbShowShipments.setEnabled(false);
        }

    }

    private void datePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_datePropertyChange
 
    }//GEN-LAST:event_datePropertyChange

    private void treeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMouseReleased
         repaintScreen(true);
    }//GEN-LAST:event_treeMouseReleased

    private void treeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_treeKeyReleased
         repaintScreen(true);
    }//GEN-LAST:event_treeKeyReleased

    
    // Wyświetlamy dane o synchronizacji
    private void  showSynchronizationTable() {
            YPFunctions.FillTableFromOra(
                    "select s.id_dict as \"Slownik\"," +
                    "d.description as \"Opis\"," +
                    "s.date_synchro as \"Synchronizacja\"," +
                    "s.date_active as \"Data aktywacji\"," +
                    "s.check_synchro as \"Ustaw\" " +
                    "from cas_synchro s, cas_dict d " +
                    "where s.id_cust=? and " +
                    "s.id_dict=d.id_dict " +
                    "order by s.id_dict",
                    new Vector(Arrays.asList(iIdCas)),
                    0,
                    99999,
                    synchronizationTable,
                    new Vector(Arrays.asList(80, 100, 90, 50, 20)),
                    new Vector(Arrays.asList(5)),
                    false,
                    false,
                    new Vector(Arrays.asList(3, 4)),
                    new Vector(Arrays.asList(0, 1, 2)),
                    false);
    }

    
    
    
    private void tabDetailsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabDetailsStateChanged
        // Użytkownik wybiera jakąś zakładkę w TabbedPane tabDetails
        // Zapamiętamy zakres dat
        // Jeśli początkowa data jest pusta - t.zn. data nie jest wybrana z drzewa,
        // to ustawiamy datę z kalendarza
        Date from = fromDate;
        Date to = toDate;
        if (from == null) {
            from = to = date.getDate();
        }
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));

        // Wyznaczamy nazwę zakładki
        String panelName = tabDetails.getSelectedComponent().getName();
        // Jeśli to nie jest pierwsza zakładka, to "czyszczimy" informację w zakładce
        if (!panelName.equals("jpData"))
            YPFunctions.clearContainer((JPanel) tabDetails.getSelectedComponent());

        if (panelName.equals(jpResetPassword))
            tfOperatorName.setText("");
        else if (panelName.equals("jpOthers")) {
           fillReturnWarnings();
        }
        else if (panelName.equals("jpLogSynchro")) {
            if (from != null) {
                // wypełniamy tablicę tableSynchro danymi synchronizacji słowników
                // i cenników za czas od "from" do "to"


                YPFunctions.FillTableFromOra("select date_synchro as \"Czas synchronizacji\"," +
                                             "id_dict as \"Slownik\"," +
                                             "date_active as \"Data aktywacji\" " +
                                             "from log_synchro " +
                                             "where id_cust=? and date_synchro between to_date(?,'yyyy/MM/dd hh24:mi:ss') and " +
                                                   "to_date(?,'yyyy/MM/dd hh24:mi:ss') " +
                                             "order by id desc",
                                             new Vector(Arrays.asList(iIdCas,
                                                        YPFunctions.DateToString(from).replace('/', '-') + " 00:00:00",
                                                        YPFunctions.DateToString(to).replace('/', '-') + " 23:59:59")),
                                             0,
                                             99999,
                                             tableSynchro,
                                             new Vector(),
                                             new Vector(),
                                             false,
                                             false,
                                             new Vector(),
                                             null,
                                             true);
            }
        }
        // Jeśli wybrana zakładka "Log komunikacji"
        else if (panelName.equals("jpLogComm")) {
            if (from != null) {
                // Wypełniamy tablicę tableComm danymi o komunikacji użutkownika CAS
                // z serwerem CAS za wyznaczony czas
                YPFunctions.FillTableFromOra("select date_connect as \"Czas polaczenia\"," +
                                             "remote_addr as \"IP Adres\"," +
                                             "proc_name as \"Akcja\"," +
                                             "param1 as \"Parameter\"," +
                                             "param3 as \"Status\" " +
                                             "from log_comm " +
                                             "where id_cust=? and " +

                                             "date_connect between to_date(?,'yyyy/MM/dd hh24:mi:ss') and " +
                                                   "to_date(?,'yyyy/MM/dd hh24:mi:ss') " +
//                                             "trunc(date_connect)>=? and " +
//                                             "trunc(date_connect)<=? " +
                                             "order by id desc",
                                             new Vector(Arrays.asList(iIdCas,
                                                        YPFunctions.DateToString(from).replace('/', '-') + " 00:00:00",
                                                        YPFunctions.DateToString(to).replace('/', '-') + " 23:59:59")),
                                             0,
                                             99999,
                                             tableComm,
                                             new Vector(),
                                             new Vector(),
                                             false,
                                             false,
                                             new Vector(),
                                             null,
                                             true);
            }
        }
        // Wybrana zakładka "Środowisko aplikacji"
        else if (panelName.equals("jpAppEnv")) {
            if (from != null) {
                // wypełniamy tablicę datą i czasem połączeń klienta CAS, kiedy
                // były przesyłane dane o komputerze klienta i środowisku programu
                // klientskiego na klientskim komputerze. Pożniej po kliknięciu
                // na linijkę tej tablicy będą wyświetlane dane o konkretnym
                // połączeniu
                YPFunctions.FillTableFromOra("select date_connect as \"Czas polaczenia\" " + 
                                             "from log_setup_app " +
                                             "where id_cust=? and " +
                                             "date_connect between to_date(?,'yyyy/MM/dd hh24:mi:ss') and " +
                                             "to_date(?,'yyyy/MM/dd hh24:mi:ss') " +
                                             "order by id desc",
                                             new Vector(Arrays.asList(iIdCas,
                                                        YPFunctions.DateToString(from).replace('/', '-')+ " 00:00:00",
                                                        YPFunctions.DateToString(to).replace('/', '-') + " 23:59:59")),
                                             0,
                                             99999,
                                             tableEnv,
                                             new Vector(),
                                             new Vector(),
                                             false,
                                             false,
                                             new Vector(),
                                             null,
                                             false);
            }
            taEnv.setText("");
        }
        // Wybrana zakładka "Słowniki/Cenniki"
        else if (panelName.equals("jpPrices")) {
            // Tutaj możemy przeglądać i zmieniać zawartość słowników i
            // cenników specjalnych.

            // ComboBox cbDictionaries jest wypełniony na etapie projektowania,
            // wybieramy pierwszą pozycje.
            cbDictionaries.setSelectedIndex(0);
            // Wypełniamy ComboBox "Produkt" nazwami produktów
            Vector<Vector<String> > v =
                    GlobalData.oraSession.selectAllRecordsToVector("Select ID_PRODUCT from DICT_PRODUCTS",null);
            comboProducts.removeAllItems();
            Iterator it = v.iterator();
            while (it.hasNext()) {
                Vector<String> vTemp = (Vector<String>) it.next();
                comboProducts.addItem(vTemp.elementAt(0));
            }
            // Wypełniamy ComboBox "Płatnik" nazwami płatników
            v = GlobalData.oraSession.selectAllRecordsToVector("Select ID_PAY from DICT_PAY",null);
            comboPlatnik.removeAllItems();
            it = v.iterator();
            while (it.hasNext()) {
                Vector<String> vTemp = (Vector<String>) it.next();
                comboPlatnik.addItem(vTemp.elementAt(0));
            }

            // Standardowy produkt dla CAS - to "AH"
            comboProducts.setSelectedItem("AH");
            // Standardowy płatnik - "N" - nadawca
            comboPlatnik.setSelectedItem("N");
            // Przygotowyjemy ekran do wyświetlenia danych wybranego słownika
            showDictionaryQueryScreen();
        }
        else if (panelName.equals("jpImport")) {
            bDefaultSelected = false;
            bImpSelected = false;
            bConversionSelected = false;
            jbConvert.setEnabled(false);
            refreshImportDefault();
        }
        // Wybrana zakładka "Aktywacja/synchronizacja"
        else if (panelName.equals("jpActivation")) {
            // Wyświetlamy dane o ustawieniach aktywacji
            Vector pars = new Vector(Arrays.asList(iIdCas));
// XBORDER zmiany            
            String queryActivation = "SELECT" +
                    " active_cust as \"Aktywny\"" +
                    ",type_online as \"Polaczenie typu On-line\"" +
                    ",type_test as \"Klient testowy\"" +
                    ",use_scan as \"Skanowanie HH lub PDT\"" +
                    ",type_block as \"Zablokowany\"" +
                    ",type_blp as \"Listy BLP\"" +
                    ",type_rod as \"Usluga TnT ROD\"" +
                    ",stop_ora as \"Stop migracja ORACLE\"" +
                    ",type_serv_point as \"Nadanie do Service Point\"" +
                    ",type_pdf as \"Wydruk PDF na BLP\"" +
                    ",dr24 as \"DR24\"" +
                    ",multi_sap as \"Kilka nadawców (Multi_SAP)\"" +
                    ",fill_phone as \"Wymuszanie wpisywania telefonu\"" +
                    ",vip as \"Doręczenie monitorowane(VIP)\"" +
                    ",type_neighbour as \"Doręczenie do sąsiada\"" +
                    ",phone_to_preawi as \"Tel.odb. do preawizacji\"" +
                    ",cim_mobile as \"Obsługa CIM/Mobile\"" +
                    ",must_phone as \"Wymuszanie telefonu odbiorcy\"" +
                    ",must_email as \"Wymuszanie Email odbiorcy\"" +

                    " from v_customers where id_cust=?";

            // Odczytujeny pierwszy rekord
            Vector<Vector> v_tableBody =
                    GlobalData.oraSession.selectFirstRecordVertically(queryActivation, pars, true);
            // Wyznaczamy nagłówki kolumn tablicy
            Vector<String> v_tableTitles = new Vector(Arrays.asList("Opcja", "Zawartość"));
            // Pozwalamy na edycję drugiej kolumny
            Vector<Integer> v_tableEditEnable = new Vector(Arrays.asList(1));
            // Wyświetlamy tablicę
            activityTable.setModel(new YPTableModel(v_tableBody, v_tableTitles, v_tableEditEnable));
            // "Przzyciemniamy" pierwszą kolumnę
            activityTable.getColumnModel().getColumn(0).setCellRenderer(
                    new YPTableCellRenderer(0, activityTable.getTableHeader().getBackground()));
            // Ustawiamy szerokości kolumn - pierwszej - 100, drugiej - 30
            activityTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            activityTable.getColumnModel().getColumn(1).setPreferredWidth(30);

            Vector<Vector<String> > v =
                    GlobalData.oraSession.selectAllRecordsToVector(
                      "Select descr || ' ' || addr from cas_dict_web order by id",
                      null);
            comboHttpMode.removeAllItems();
            Iterator it = v.iterator();
            while (it.hasNext()) {
                Vector<String> vTemp = (Vector<String>) it.next();
                comboHttpMode.addItem(vTemp.elementAt(0));
            }

            Vector<String> v1 = GlobalData.oraSession.selectFirstRecordToVector(
                     "SELECT type_comm from v_customers where id_cust=?",
                     pars);

           if (!v.isEmpty()) {
                try {
                    int position = Integer.parseInt(v1.elementAt(0));
                    comboHttpMode.setSelectedIndex(position - 1);
                    //comboHttpMode.setSelectedIndex(Integer.parseInt(v1.elementAt(0))-1);
                } catch (Exception e){
                }
           }

        }
        // Wybrana zakładka "Synchronizacja"
        else if (panelName.equals("jpSynchronization")) {
            // Wyświetlamy dane o synchronizacji
            showSynchronizationTable();
        }
        // Instalacja
        else if (panelName.equals("jpInstalation")) {
            // Wypełniamy ComboBox nazwami opiekunów.
            // Opiekun - osoba ze specjalnego działu DHL, który zajmuje się
            // spółpracą z klientami CAS
            if (GlobalData.v_allUsers.isEmpty())
                 GlobalData.v_allUsers =
                        GlobalData.oraSession.selectOneColumnToVector(
                        "Select user_name from cas_users where active='T' order by user_name",
                        null);

            comboOpiekun.removeAllItems();
            Iterator it = GlobalData.v_allUsers.iterator();
            while (it.hasNext()) 
               comboOpiekun.addItem((String) it.next());
            comboOpiekun.setSelectedItem(tfOpiekun.getText());

            // odłączamy dostęp dla wszystkich oprócz adminów
            if (Integer.parseInt(GlobalData.m_sGrant) > 2) // "USER","REPORT"
                comboOpiekun.setEnabled(false);
            // dla właściciela udostępniamy
            if (tfOpiekun.getText().equals(GlobalData.m_sUserLogin))
                comboOpiekun.setEnabled(true);

        // Wypełniamy ComboBox z kodami Depotów (Terminali).
        // Firma DHL na terenie Polski ma > 50 terminali. Klienta CAS trzeba
        // przypisać do terminalu.
        if (GlobalData.v_allDepots.isEmpty())
        {
            GlobalData.v_allDepots =
                    GlobalData.oraSession.selectOneColumnToVector(
                    "Select symbol_pc from dict_depots order by symbol_pc",
                     null);
        }
        comboDepotEX.removeAllItems();
        comboDepotDR.removeAllItems();
        it = GlobalData.v_allDepots.iterator();
        while (it.hasNext())
        {
           String nextDepot = (String) it.next();
           comboDepotEX.addItem(nextDepot);
           comboDepotDR.addItem(nextDepot);
        }
        comboDepotEX.setSelectedItem(currentDepotEX);
        comboDepotDR.setSelectedItem(currentDepotDR);

        comboRangeLP.setSelectedItem(currentRangeLP);
        tfProgName.setText(currentProgName);
        tfKurier.setText(currentKurier);






                    // Wypełniamy ComboBox z nazwami aplikacji
            Vector <String> v_App =
                    GlobalData.oraSession.selectOneColumnToVector(
                    "Select Description from cas_dict_app order by ID_APP",
                     null);
           comboApp.removeAllItems();
           it = v_App.iterator();
           while (it.hasNext())
               comboApp.addItem((String) it.next());

           String activeApp = GlobalData.oraSession.selectString(
                   "Select app_name from v_customers where id_cust=?",
                   new Vector(Arrays.asList(iIdCas)),
                   "");
           comboApp.setSelectedItem(activeApp);





            String query =
                    "SELECT i.NAME," +
                        "i.STREET," +
                        "i.STREETNO," +
                        "i.ZIPCODE," +
                        "i.CITY," +
                        "i.PHONE," +
                        "m.memo " +
                    "FROM customers_install i,customers_memo m " +
                    "where i.id_cust=? and " +
                        "i.ID_CUST=m.ID_CUST(+)";

            Vector<String> v =
                    GlobalData.oraSession.selectFirstRecordToVector(query,
                         new Vector(Arrays.asList(iIdCas)));
            if ((v == null) || v.isEmpty())
                 v = new Vector(Arrays.asList("","","","","","",""));
            tfInstName1.setText(v.elementAt(0));
            tfInstTel1.setText(v.elementAt(5));
            tfInstStreet1.setText(v.elementAt(1));
            tfInstHouse1.setText(v.elementAt(2));
            tfInstPostCode1.setText(v.elementAt(3));
            tfInstCity1.setText(v.elementAt(4));
            tfInstWarnings1.setText(v.elementAt(6));

            query = "select l_z_name,l_z_addr_zipcode,l_z_addr_city,l_z_addr_street,l_z_addr_streetno,l_z_telephone,l_z_id_sap,l_z_shortname from dict_config where id_cust=?";
            v = GlobalData.oraSession.selectFirstRecordToVector(query,
                         new Vector(Arrays.asList(iIdCas)));
            if ((v == null) || v.isEmpty())
                 v = new Vector(Arrays.asList("","","","","","",""));
            tfZlecName.setText(v.elementAt(0));
            tfZlecPostCode.setText(v.elementAt(1));
            tfZlecCity.setText(v.elementAt(2));
            tfZlecStreet.setText(v.elementAt(3));
            tfZlecHouse.setText(v.elementAt(4));
            tfZlecTel.setText(v.elementAt(5));
            tfZlecSap.setText(v.elementAt(6));
            tfZlecShort.setText(v.elementAt(7));

            showSAPData(tfIdSAP.getText(),true);
        }
        // Okna czasowe
        else if (panelName.equals("jpWindows")) {
            showTableWindows();

        }
        else if (panelName.equals("jpSAP")) {
            showSAPData(tfIdSAP.getText(),true);
        }
        else if (panelName.equals("jpSenderList")) {
            fillSenderList();
// XBORDER
            boolean bEnable = false;
            String result = GlobalData.oraSession.selectString(
                    "SELECT PROGRAM_NAME FROM DICT_CONFIG where id_cust=?",
                    new Vector(Arrays.asList(iIdCas)),
                    "");
            if (result.equals("DP"))  // Dla program_name = 'DP' Deutsche Post
                bEnable = true;
            else
            {
                result = GlobalData.oraSession.selectString(
                    "SELECT multi_sap from v_customers where id_cust=?",
                    new Vector(Arrays.asList(iIdCas)),
                    "N");
                bEnable = result.equals("T");
            }
            YPFunctions.enableContainer(jpSenderList, bEnable);
        }
        else if (panelName.equals("jpSetSpec")) {
            fillSpecSettingsTable();
        }


        this.setCursor(java.awt.Cursor.getDefaultCursor());
}//GEN-LAST:event_tabDetailsStateChanged

    private void fillSpecSettingsTable()
    {
            YPFunctions.FillTableFromOra(
                    "select insertt, user_name, computer_name, settings from data_spec_settings where id_cust=?",
                    new Vector(Arrays.asList(iIdCas)),
                    0,
                    99999,
                    tableSetSpec,
                    new Vector(Arrays.asList(10, 10, 10, 70)),
                    new Vector(),
                    false,
                    true,
                    new Vector(),
                    new Vector(),
                    false);
    }


    private void fillSenderList()
    {
            YPFunctions.FillTableFromOra(
                    "select skrot,sap,nazwa,kod_p,miasto,ulica,dom,Tel from dict_senders where id_cust=?",
                    new Vector(Arrays.asList(iIdCas)),
                    0,
                    99999,
                    tableSenders,
                    new Vector(Arrays.asList(10, 10, 30, 5, 20, 20, 5, 5)),
                    new Vector(),
                    false,
                    false,
                    new Vector(Arrays.asList(0)),
                    new Vector(),
                    false);
    }


    private void showSAPData(String p_sap, boolean p_bReCheck) {
        // Wypełniamy dane SAP
        String query =
                "SELECT L_N_SHORTNAME," +
                       "L_N_NAME," +
                       "L_N_ADDR_ZIPCODE," +
                       "L_N_ADDR_CITY," +
                       "L_N_ADDR_STREET," +
                       "L_N_ADDR_STREETNO," +
                       "L_N_NIP," +
                       "L_N_TELEPHONE," +
                       "L_N_BANK, " +
                       "L_N_RACHUNEK " +
                "FROM DICT_CONFIG " +
                "where ID_CUST=?";

        Vector<String> v = GlobalData.oraSession.selectFirstRecordToVector(
                               query,
                               new Vector(Arrays.asList(iIdCas)));
        tfNewIdSAP.setText(p_sap);
        tfNewShort.setText(v.elementAt(0));
        tfNewName.setText(v.elementAt(1));
        tfNewStreet.setText(v.elementAt(4));
        tfNewHouse.setText(v.elementAt(5));
        tfNewPostCode.setText(v.elementAt(2));
        tfNewCity.setText(v.elementAt(3));
        tfNewNIP.setText(v.elementAt(6));
        tfNewTel.setText(v.elementAt(7));
        tfNewBank.setText(v.elementAt(8));
        tfNewRach.setText(v.elementAt(9));

        if (p_bReCheck) {
           bSapChecked = false;
           checkUncheckSAP();
        }
    }

    private void checkUncheckSAP() {
        YPFunctions.enableContainer(panelSAP, bSapChecked);
        checkEditSAP.setEnabled(true);
    }



    private void showTableWindows() {
            Vector<Vector<String> > vWindows = GlobalData.oraSession.selectAllRecordsToVector(
                    "Select symbol_pc, '' from dict_depots order by symbol_pc",
                    new Vector());
            Vector<Vector<String> > vExistings = GlobalData.oraSession.selectAllRecordsToVector(
                    "Select depot, win from dict_win_time where id_cust=?",
                    new Vector(Arrays.asList(iIdCas)));
            for (int i = 0; i < vExistings.size(); i++ )
            {
                Vector<String> line = (Vector<String>)vExistings.elementAt(i);
                String depot = line.elementAt(0);
                int pos = getDepotPosition(vWindows, depot);
                if (pos != -1)
                   vWindows.set(pos, line);
            }
            Vector<Vector> vBody = new Vector();
            Iterator it = vWindows.iterator();
            while(it.hasNext())
                vBody.add((Vector)it.next());

            YPFunctions.FillTableFromVector(vBody,
                    new Vector(Arrays.asList("Depot","Okno czasowe")),
                    tableWindows,
                    new Vector(Arrays.asList(30,30)),
                    new Vector(),
                    false,
                    false,
                    new Vector(Arrays.asList(1)),
                    new Vector(),
                    false,
                    0);
    }

    private int getDepotPosition(Vector<Vector<String>> p_vBody, String p_depot) {
        int ret = -1;
        for (int i = 0; i < p_vBody.size(); i ++) {
            Vector vLine = p_vBody.elementAt(i);
            String depot = (String)vLine.elementAt(0);
            if (depot.equals(p_depot)) {
                ret = i;
                break;
            }
        }
        return ret;
    }



    private void jbSaveSynchronizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveSynchronizationActionPerformed
        // Nacisnięty przycisk "Zapisz synchronizację™"
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));

        boolean bResult = true;
        // Dla każdego słownika
        for (int i = 0; i < synchronizationTable.getRowCount(); i++) {
            // Tworzymy zapytanie SQL
            String querySynchronization =
                    "update cas_synchro set ";
            String synchroDate = YPFunctions.strGet(synchronizationTable,i, 3);
            if (synchroDate.length() >= 10)
                synchroDate = synchroDate.substring(0, 10);
            // Jeśli data synchronizacji jest "pusta"
            if (synchroDate.isEmpty()) {
                querySynchronization += "date_active=null,";
            }
            // inaczej
            else
                querySynchronization += "date_active=to_date('" + synchroDate + "','yyyy-mm-dd'),";

            // dopisujemy zapytanie SQL
            querySynchronization = querySynchronization + "check_synchro=? where id_cust=? and id_dict=?";

            // Parametry
            Vector pars = new Vector(Arrays.asList(
                    YPFunctions.bool2str((Boolean)synchronizationTable.getValueAt(i, 4)),
                    iIdCas,
                    YPFunctions.strGet(synchronizationTable,i, 0)));
            // Wykonujemy zapytanie SQL
            bResult = bResult && GlobalData.oraSession.executeQuery(querySynchronization,pars);
        }
        GlobalData.oraSession.SaveLog("Ustawienie synchronizacji dla ID_CUST=" + tfIdCas.getText(), "");

        showSynchronizationTable();
        this.setCursor(java.awt.Cursor.getDefaultCursor());
        YPFunctions.showMessage("Dane synchronizacji zostały zapisane i odczytane","");
        // commit, rollback ?
    }//GEN-LAST:event_jbSaveSynchronizationActionPerformed

    private void jbSaveActivationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActivationActionPerformed
        // Nacisnięty przycisk "Zapisz aktywację"
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        String queryActivation = "Update customers set " +
                "active_cust=?,type_online=?,type_test=?,use_scan=?,"+
                "type_block=?,type_blp=?,type_rod=?,stop_ora=?,"+
                "type_serv_point=?,type_pdf=?,dr24=?,multi_sap=?,fill_phone=?,vip=?,type_neighbour=?,phone_to_preawi=?,cim_mobile=?," +
                "must_phone=?,must_email=?," +
                "type_comm=? where id_cust=?";
        Vector pars = new Vector(Arrays.asList(
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(0, 1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(1, 1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(2, 1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(3, 1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(4, 1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(5, 1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(6, 1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(7, 1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(8, 1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(9, 1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(10,1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(11,1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(12,1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(13,1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(14,1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(15,1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(16,1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(17,1)),
                YPFunctions.bool2str((Boolean)activityTable.getValueAt(18,1)),
                
                comboHttpMode.getSelectedIndex() + 1,
                iIdCas));

        GlobalData.oraSession.executeQuery(queryActivation,pars);

        // !!! Przy zaznaczeniu aktywacji PDI_VIP trzeba zaznaczyć do synchronizacji tabele DICT_EX i DICT_EX_STD
        if ((Boolean)activityTable.getValueAt(13, 1))
        {
            String querySynchronization = "update cas_synchro set check_synchro='T' where id_cust=? and ID_DICT in ('DICT_EX', 'DICT_EX_STD')";
            Vector params = new Vector(Arrays.asList(iIdCas));
            GlobalData.oraSession.executeQuery(querySynchronization,params);
        }
        GlobalData.oraSession.SaveLog("Ustawienie aktywacji dla ID_CUST=" + tfIdCas.getText(), "");
        this.setCursor(java.awt.Cursor.getDefaultCursor());
        YPFunctions.showMessage("Dane aktywacji zostały zapisane","");
}//GEN-LAST:event_jbSaveActivationActionPerformed

    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
        // Nacisnięty przycisk "Zapisz zmiany" w zakładce "Słowniki/Cenniki"
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        // Jeśli tablica jest w trybie edytowania danych, to zapisujemy zmiany
        // w tablice.
        if (dictionaryTable.isEditing()) {
            dictionaryTable.getCellEditor().stopCellEditing();
        }
        // w zależności od nazwy tablicy wykonujemy odpowiednią metodę.
        String sqlTable = (String) cbDictionaries.getSelectedItem();
        try {
                if (sqlTable.equals("Cennik Ekspresowy EX")) {
                    SaveCenEx();
                    GlobalData.oraSession.SaveLog("Zmiana cennika EX dla ID_CUST=" + tfIdCas.getText(), "");
                } else if (sqlTable.equals("Konfiguracja")) {
                    SaveDictConfig();
                    GlobalData.oraSession.SaveLog("Zmiana DICT_CONFIG dla ID_CUST=" + tfIdCas.getText(), "");
                } else if (sqlTable.equals("Cennik Drobnicowy DR")) {
                    SaveCenDr();
                    GlobalData.oraSession.SaveLog("Zmiana cennika DR dla ID_CUST=" + tfIdCas.getText(), "");
                }
                else if (sqlTable.equals("Cennik palet")) {
                    SaveDictPal();
                    GlobalData.oraSession.SaveLog("Zmiana cennika Paletowego dla ID_CUST=" + tfIdCas.getText(), "");
                }
                else if (sqlTable.equals("Produkty, płatnicy")) {
                    if (!NewUserPanel.getDefinedProductsAndWriteToDataBase(tableProducts, tfIdCas.getText())) {
                         this.setCursor(java.awt.Cursor.getDefaultCursor());
                         YPFunctions.showErrorMessage("Nie przedwidziany błąd.\nZgłoś błąd do autora aplikacji");
                    }
                    else
                       GlobalData.oraSession.SaveLog("Zmiana Produkty, Płatnicy dla ID_CUST=" + tfIdCas.getText(), "");
                } else if (sqlTable.equals("Pola formularza")) {
                    SaveDictScreens();
                    GlobalData.oraSession.SaveLog("Zmiana DICT_SCREENS dla ID_CUST=" + tfIdCas.getText(), "");
                }
        } catch (Exception e){
               this.setCursor(java.awt.Cursor.getDefaultCursor());
               YPFunctions.showBigErrorMessage("Nie prawidłowo wpisane dane\nDane zapisane do ORACLE nie są poprawne");
        }
        jbShowActionPerformed(null);
        YPFunctions.showMessage("Dane cennika/słownika zostały zapisane i odczytane","");
        this.setCursor(java.awt.Cursor.getDefaultCursor());
    }//GEN-LAST:event_jbSaveActionPerformed

    private void jbAddColumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddColumnActionPerformed
        // Użytkownik chce dodać kolumnę do istniejącej tablicy
        // Prośimy o wpisanie nazwy nowej kolumny
        String ret = YPFunctions.showInputDialog("Wprowadź nazwę nowej kolumny","Nazwa kolumny");
        // nazwa kolumny nie została wprowadzona
        if (ret.equals("")) {
            YPFunctions.showErrorMessage("Nie wprowadzona nazwa kolumny tablicy");
//            JOptionPane.showMessageDialog(null, "Nie wprowadzona nazwa kolumny tablicy", "Błąd", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            // Inaczej dodajemy nową kolumnę z nagłowkiem ret
            // Korzystamy z własnego modelu tablicy i metody insertColumn
            ((YPTableModel)dictionaryTable.getModel()).insertColumn(ret,"");
            // Odnawiamy tablicę
            dictionaryTable.repaint();
        }
}//GEN-LAST:event_jbAddColumnActionPerformed

    private void jbDeleteColumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteColumnActionPerformed
        // Użytkownik chce usunąć kolumnę z istniejącej tablicy
        // Prośimy o wpisanie nazwy kolumny do usunięcia
        String ret = YPFunctions.showInputDialog("Wprowadź nazwę kolumny do usunięcia", "Nazwa kolumny");
        // nazwa kolumny nie została wprowadzona
        if (ret.equals("")) {
            YPFunctions.showErrorMessage("Nie wprowadzona nazwa kolumny tablicy");
//            JOptionPane.showMessageDialog(null, "Nie wprowadzona nazwa kolumny tablicy", "Błąd", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            // Odczytujemy nagłówki kolumn do wektora
            Vector<String> v = ((YPTableModel)dictionaryTable.getModel()).getColumnNames();
            // Szukamy pozycję wprowadzonej nazwy kolumny w wktorze
            int pos = v.indexOf(ret);
            // Jeśli nie znaleziono
            if (pos == -1) {
                YPFunctions.showErrorMessage("Nie prawidłowa nazwa kolumny tablicy");
//                JOptionPane.showMessageDialog(null, "Nie prawidłowa nazwa kolumny tablicy", "Błąd", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Inaczej usuwamy kolumnę z numeren pos
            // Korzystamy z własnego modelu tablicy i metody deleteColumn
            ((YPTableModel)dictionaryTable.getModel()).deleteColumn(pos);
            // Odnawiamy tablicę
            dictionaryTable.repaint();
        }
}//GEN-LAST:event_jbDeleteColumnActionPerformed

    private void jbAddRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddRecordActionPerformed
        // Użytkownik chce dodać linijkę do istniejącej tablicy
        // Prośimy o wpisanie klucza linijki (t.zn. wartości pierwszej komórki linijki)

        String ret = YPFunctions.showInputDialog("Wprowadź Odległość dla linijki tablicy","Klucz linijki tablicy");
        if (ret.equals("")) {
            YPFunctions.showErrorMessage("Nie prawidłowa odległość");
//            JOptionPane.showMessageDialog(null, "Nie prawidłowy klucz linijki tablicy", "Błąd", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Tworzymy wektor
        Vector vNewLine = new Vector();
        // Wypełniamy go "pustymi" wartościami oprócz pierwszego elementa

        

        if (((YPTableModel)dictionaryTable.getModel()).getColumnNames().toString().equals("[]")) {
             Vector<String> vTitle = new Vector();
             if (cbDictionaries.getSelectedItem().equals("Cennik palet"))
                vTitle = new Vector(Arrays.asList("Odległość","Pal_200","Pal_400","Pal_600","Pal_800","Pal_1000"));
             else if (cbDictionaries.getSelectedItem().equals("Cennik Drobnicowy DR")) {
                vTitle.add("Odl./Waga");
                vTitle.addAll(GlobalData.oraSession.selectOneColumnToVector("SELECT distinct weight FROM dict_dr_std order by weight", null));
             }
             Vector<Vector> vBody = new Vector();
             Vector<String> vLine = new Vector();
             Vector<Integer> vTableEditEnable  = new Vector();

             for (int i = 0; i < vTitle.size() ; i++) {
                if (i==0)
                    vLine.add(ret);
                else {
                    vLine.add("");
                    vTableEditEnable.add(i);
                }
             }
             vBody.add(vLine);
             dictionaryTable.setModel(new YPTableModel(vBody, vTitle, vTableEditEnable));
             // "Przyciemniamy" pierwszą kolumnę
             dictionaryTable.getColumnModel().getColumn(0).setCellRenderer(
                   new YPTableCellRenderer(0, dictionaryTable.getTableHeader().getBackground()));

        } else {
                for (int i = 0; i < dictionaryTable.getColumnCount(); i++) {
                    if (i==0)
                        vNewLine.add(ret);
                    else
                        vNewLine.add("");
                }
                // Dodajemy do tablicy przygotowany wektor
                // Korzystamy z własnego modelu tablicy i metody appendRow
                ((YPTableModel)dictionaryTable.getModel()).appendRow(vNewLine);
        }
        // Odnawiamy tablicę
        dictionaryTable.repaint();
}//GEN-LAST:event_jbAddRecordActionPerformed

    private void jbDeleteRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteRecordActionPerformed
        // Użytkownik chce usunąć istniejącą linijkę tablicy
        // Sprawdzamy czy użytkownik zaznaczył jakąś linijkę tablicy
        int row = dictionaryTable.getSelectedRow();
        if (row == -1) {
            YPFunctions.showErrorMessage("Nie zaznaczona linijka tablicy");
//            JOptionPane.showMessageDialog(null, "Nie zaznaczona linijka tablicy","Błąd",JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Korzystamy z własnego modelu tablicy i metody deleteRow
        ((YPTableModel)dictionaryTable.getModel()).deleteRow(row);
        // Odnawiamy tablicę
        dictionaryTable.repaint();
    }//GEN-LAST:event_jbDeleteRecordActionPerformed

    private void cbDictionariesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDictionariesActionPerformed
        // Wybrany nowy słownik
        // Przygotowyjemy ekran do wyświetlenia danych wybranego słownika
        showDictionaryQueryScreen();
}//GEN-LAST:event_cbDictionariesActionPerformed

    private void jbShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbShowActionPerformed
        // Naciśnięty przycisk "Pokaż" w zakładce "Cenniki/Słowniki"
        YPFunctions.clearContainer(jpDictionaryData);
        this.scrollPanelDictionaryTable.setVisible(true);
        this.panelProduktyPlatnicy.setVisible(false);


        //Odczytujemy nazwę słownika
        String sqlTable = (String) cbDictionaries.getSelectedItem();
        // Definiujemy zbiór słowników, gdzie powinna być możliwość
        // dopisywania lub usuwania rekordów
        Set setAdditionalRecordOperations = new HashSet(Arrays.asList(
                "Cennik Drobnicowy DR",
//                "DICT_DR",
//                "Rabaty DR Liniowe",
//                "Rabaty Ekspresowe EX",
//                "DICT_EX_RAB_SERV",
                "Cennik palet"
//                "Rabaty paletowe",
//                "DICT_PAL_RAB_DISTANCE",
//                "DICT_PAL_RAB_LINE",
//                "Produkty, płatnicy"
                ));
        // Jeśli odczytana nazwa tablicy jest elementem zbioru, to udostępniamy
        // operację "Usuń rekord" i "Dodaj rekord"
        jbDeleteRecord.setEnabled(setAdditionalRecordOperations.contains(sqlTable));
        jbAddRecord.setEnabled(setAdditionalRecordOperations.contains(sqlTable));

        // Definiujemy zbiór słowników, gdzie powinna być możliwość
        // dopisywania lub usuwania kolumn
        Set setAdditionalColumnOperations = new HashSet(Arrays.asList(
                "Cennik Drobnicowy DR"
//                "DICT_DR",
//                "Rabaty DR Liniowe"
                ));
        // Jeśli odczytana nazwa tablicy jest elementem zbioru, to udostępniamy
        // operację "Usuń kolumnę" i "Dodaj kolumnę"
        jbDeleteColumn.setEnabled(setAdditionalColumnOperations.contains(sqlTable));
        jbAddColumn.setEnabled(setAdditionalColumnOperations.contains(sqlTable));
        // Pokazujemy słownik w tablice dictionaryTable
        ShowDictionary(tfIdCas.getText(), sqlTable, (String) comboProducts.getSelectedItem(), (String) comboPlatnik.getSelectedItem());
        jpOpcje.setVisible(false);

        if (sqlTable.equals("Cennik Drobnicowy DR")) {
              // Przycisk z ustawieniem formuły robimy widocznym tylko dla cennika DR
               jpOpcje.setVisible(true);
               jbDrOptions.setEnabled(true);
               jbDiscount.setEnabled(true);
        }

        if (sqlTable.equals("Cennik Ekspresowy EX")) {
            jpOpcje.setVisible(true);
            jbDrOptions.setEnabled(false);
            jbDiscount.setEnabled(true);
        }

        if (sqlTable.equals("Cennik palet")) {
            jpOpcje.setVisible(true);
            jbDrOptions.setEnabled(false);
            jbDiscount.setEnabled(true);
        }

        if (sqlTable.equals("Produkty, płatnicy")) {
           this.scrollPanelDictionaryTable.setVisible(false);
           this.panelProduktyPlatnicy.setVisible(true);
           NewUserPanel.fillProductsAndPayersMaps();
           NewUserPanel.fillMapIdToProduct(Integer.parseInt(tfIdCas.getText()));
        }


        // Przycisk "Zapisz zmiany" robimy widocznym, zeby po edycji słowników
        // można było zapisać zmiany
        jbSave.setVisible(true);
}//GEN-LAST:event_jbShowActionPerformed

    private void tableEnvKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableEnvKeyReleased
        // Uzytkownik porusza się po tablice tableEnv za pomocą klawisz Up,Down ...,
        // pokazujemy środowisko aplikacji za odpowiednią datę
        showDetailEnvironment();
}//GEN-LAST:event_tableEnvKeyReleased

    private void tableEnvMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableEnvMouseClicked
        // Zdarzenie kliknięcia na tablice tableEnv, pokazujemy
        // środowisko aplikacji za odpowiednią datę
        showDetailEnvironment();
}//GEN-LAST:event_tableEnvMouseClicked

    private void jbShowShipmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbShowShipmentsActionPerformed
        // Naciśnięty przycisk "Pokaż" na zakładce "Dane"
        // Pokazujemy panel szczegółow przesyłek z wyznaczonymi kryteriami
        YPFunctions.showPanelAsModalDialog(new ShipmentsPanel(fromDate, toDate, tfIdCas.getText(), ""), "Przegląd informacji o przesyłkach",
                                                   new Dimension(1017,700));
}//GEN-LAST:event_jbShowShipmentsActionPerformed

    private void toogleValueInSynchro(Vector<String> v_lines)
    {
        YPTableModel tm = (YPTableModel)synchronizationTable.getModel();
        for (int i = 0; i < tm.getRowCount(); i++)
        {
            if (v_lines.contains((String)(tm.getValueAt(i, 0))))
            {
                    Boolean b = (Boolean)(tm.getValueAt(i, 4)) ;
                    tm.setValueAt(!b, i, 4);
            }
        }
        synchronizationTable.repaint();
    }

    private void butAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAppActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("APPLICATION")));
    }//GEN-LAST:event_butAppActionPerformed

    private void butApsHubsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butApsHubsActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_APSHUBS", "DICT_APSHUBS_EXT")));
    }//GEN-LAST:event_butApsHubsActionPerformed

    private void butConfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConfActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_CONFIG")));
    }//GEN-LAST:event_butConfActionPerformed

    private void butDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDistActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_DISTANCES")));
    }//GEN-LAST:event_butDistActionPerformed

    private void butNumbersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNumbersActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_NUMBERS")));
    }//GEN-LAST:event_butNumbersActionPerformed

    private void butCenEXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCenEXActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_EX","DICT_EX_RAB","DICT_EX_STD","DICT_EX_RAB_STD")));
    }//GEN-LAST:event_butCenEXActionPerformed

    private void butCenDRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCenDRActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_DR","DICT_DR_RAB_LINE","DICT_DR_STD")));
    }//GEN-LAST:event_butCenDRActionPerformed

    private void butCenPalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCenPalActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_PAL","DICT_PAL_RAB","DICT_PAL_RAB_DISTANCE","DICT_PAL_RAB_LINE")));
    }//GEN-LAST:event_butCenPalActionPerformed

    private void butPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPCActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_PC","DICT_PCS")));
    }//GEN-LAST:event_butPCActionPerformed

    private void butServicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butServicesActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_SERVICES")));
    }//GEN-LAST:event_butServicesActionPerformed

    private void jbDrOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDrOptionsActionPerformed
          OptionsDrDialog frame = new OptionsDrDialog(null,
//        UseFormulaDrDialog frame = new UseFormulaDrDialog(null,
                                                              true,
                                                              iIdCas,
                                                              (String)comboProducts.getSelectedItem(),
                                                              (String)comboPlatnik.getSelectedItem());
            frame.setVisible(true);
            // Jeśli użytkownik wycofał sie z procedury edycji
            if (frame.getReturnStatus() == frame.RET_CANCEL) {
                    // Wycofujemy sie z procedury
                    return;
            }
            // pokazujemy jeszcze raz tablicę
            jbShowActionPerformed(evt);
    }//GEN-LAST:event_jbDrOptionsActionPerformed

    private void jbCopyFromKlSapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCopyFromKlSapActionPerformed
        // Proponujemy wprowadzić numer SAP klienta
        String sap = YPFunctions.showInputDialog("Wprowadż numer SAP zleceniodawcy", "Numer SAP zleceniodawcy");
        // Numer SAP powinien być 7-znakowy numeryczny. Sprawdzamy
        if ((sap == null) || (sap.length() != 7) || (!YPFunctions.isInteger(sap))) {
            YPFunctions.showErrorMessage("Nie prawidłowy numer SAP");
//            JOptionPane.showMessageDialog(null, "Nie prawidłowy numer SAP", "Błąd", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String query = "select BORSOFT.DECODEDATA(NAZWA),BORSOFT.DECODEDATA(KOD_P),BORSOFT.DECODEDATA(MIASTO),BORSOFT.DECODEDATA(ULICA),BORSOFT.DECODEDATA(NR_DOMU),BORSOFT.DECODEDATA(TELEPHONE),BORSOFT.DECODEDATA(SKROTNAZ) from SAP.KLSAP@SPS where Id_sap=?";
        Vector<String> v = GlobalData.oraSession.selectFirstRecordToVector(query,
                           new Vector(Arrays.asList(sap)));
        if ((v == null) || v.isEmpty())
                 v = new Vector(Arrays.asList("","","","","","",""));
        tfZlecName.setText(v.elementAt(0));
        tfZlecPostCode.setText(v.elementAt(1));
        tfZlecCity.setText(v.elementAt(2));
        tfZlecStreet.setText(v.elementAt(3));
        tfZlecHouse.setText(v.elementAt(4));
        tfZlecTel.setText(v.elementAt(5));
        tfZlecSap.setText(sap);
        tfZlecShort.setText(v.elementAt(6));
    }//GEN-LAST:event_jbCopyFromKlSapActionPerformed

    private void jbDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDiscountActionPerformed
        String item = (String)cbDictionaries.getSelectedItem();
        if (item.equals("Cennik palet"))
        {
            PaletyRabatyDialog frame = new PaletyRabatyDialog(null,
                                                              true,
                                                              iIdCas,
                                                              (String)comboProducts.getSelectedItem(),
                                                              (String)comboPlatnik.getSelectedItem());
            frame.setVisible(true);
        }
        else if (item.equals("Cennik Ekspresowy EX"))
        {
            ExRabatyDialog frame = new ExRabatyDialog(null,
                                                              true,
                                                              iIdCas,
                                                              (String)comboProducts.getSelectedItem(),
                                                              (String)comboPlatnik.getSelectedItem());
            frame.setVisible(true);
        }
        else if (item.equals("Cennik Drobnicowy DR"))
        {
            DrRabatyDialog frame = new DrRabatyDialog(null,
                                                              true,
                                                              iIdCas,
                                                              (String)comboProducts.getSelectedItem(),
                                                              (String)comboPlatnik.getSelectedItem());
            frame.setVisible(true);
        }
        else;
    }//GEN-LAST:event_jbDiscountActionPerformed

    private void jbSaveWindowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveWindowsActionPerformed
        // Jeśli tablica jest w trybie edytowania danych, to zapisujemy zmiany
        // w tablice.
        if (tableWindows.isEditing()) {
            tableWindows.getCellEditor().stopCellEditing();
        }
        int count = 0;
        String data = "";
        
        try {
            for (int i = 0; i < tableWindows.getRowCount(); i++)
            {
                String s = YPFunctions.strGet(tableWindows,i, 0);
                if (!s.equals(""))
                {
                        data += YPFunctions.strGet(tableWindows,i, 0).replace(';', ' ') + ";" +
                                YPFunctions.strGet(tableWindows,i, 1).replace(';', ' ') + ";";

                        count++;
                }
            }
        } catch (Exception e) {
        }
        
        String s = (String)GlobalData.oraSession.executeFunction(
                   "MGR_DEFINE.F_UPDATE_WIN_TIME(?,?,?)",
                   new Vector(Arrays.asList(iIdCas, count, data)), 
                   OracleTypes.VARCHAR); 
        if (! s.equals("OK")) {
           this.setCursor(java.awt.Cursor.getDefaultCursor());
           YPFunctions.showErrorMessage("Nie udało się wykonać ustawienie słowników [" + s + "]");
           return;
        } else
          GlobalData.oraSession.SaveLog("Ustawienie okien czasowych dla ID_CUST=" + tfIdCas.getText(), "");


        showTableWindows();
        YPFunctions.showMessage("Dane dla okien czasowych zostały zapisane i odczytane","");
    }//GEN-LAST:event_jbSaveWindowsActionPerformed

    private void dictionaryTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dictionaryTableMouseReleased
        // Dla cennika ekspresowego
        // Odczytujemy stan checkbox'ów w tablice
        String sqlTable = (String) cbDictionaries.getSelectedItem();
        if (sqlTable.equals("Cennik Ekspresowy EX")) {
            for (int i = 0; i < dictionaryTable.getRowCount(); i++ ) {
                Boolean newValue = (Boolean)dictionaryTable.getValueAt(i, 1);
                Boolean oldValue = (Boolean)v_bChecked.elementAt(i);
                if (newValue != oldValue)
                {
                   if (newValue.equals(false))
                   {
                       String query =
                         "SELECT algol FROM DICT_EX_STD where id_pay=? and id_product=? AND "+
                             "id_label = (select id_label from dict_labels where name_label=?)";
                       Vector params = new Vector(Arrays.asList(
                               (String)comboPlatnik.getSelectedItem(),
                               (String)comboProducts.getSelectedItem(),
                               YPFunctions.strGet(dictionaryTable,i, 0)));
                       String newAlgo = GlobalData.oraSession.selectString(query, params, "");
                       dictionaryTable.setValueAt(newAlgo, i, 2);
                   }
                    v_bChecked.set(i, newValue);
                }
            }
            //        JOptionPane.showMessageDialog(null, " " + dictionaryTable.getValueAt(0,1));
        }
    }//GEN-LAST:event_dictionaryTableMouseReleased

    private void jbDeleteRecord1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteRecord1ActionPerformed
        // Użytkownik chce usunąć jeden z istniejących produktów
        int row = tableProducts.getSelectedRow();
        if (row == -1) {
            YPFunctions.showErrorMessage("Nie zaznaczona linijka tablicy");
//            JOptionPane.showMessageDialog(null, "Nie zaznaczona linijka tablicy","Błąd",JOptionPane.ERROR_MESSAGE);
            return;
        }

        String key = YPFunctions.strGet(tableProducts,row, 0) + "," +
                     YPFunctions.strGet(tableProducts,row, 1) + "," +
                     YPFunctions.strGet(tableProducts,row, 2);

        // Zapisujemy do wektora usuniętych ID
        NewUserPanel.vDeletedProductId.add(NewUserPanel.mapIdToProduct.get(key));
        // Usuwamy odpowiednia linijkę mapy mapIdToProduct
        NewUserPanel.mapIdToProduct.remove(key);


        // Korzystamy z własnego modelu tablicy i metody deleteRow
        ((YPTableModel)tableProducts.getModel()).deleteRow(row);
        // Odnawiamy tablicę
        tableProducts.repaint();
    }//GEN-LAST:event_jbDeleteRecord1ActionPerformed

    private void jbEditRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditRecordActionPerformed
        // Użytkownik chce modyfikować istniejący produkt
        // Sprawdzamy czy użytkownik zaznaczył jakąś linijkę tablicy
        int row = tableProducts.getSelectedRow();
        if (row == -1) {
            YPFunctions.showErrorMessage("Nie zaznaczona linijka tablicy");
//            JOptionPane.showMessageDialog(null, "Nie zaznaczona linijka tablicy","Błąd",JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Odczytujemy linijkÄ™ tablicy do wektora
        Vector rowVector = new Vector();
        for (int i = 0; i < tableProducts.getColumnCount(); i++)
            rowVector.add(YPFunctions.strGet(tableProducts,row, i));
        // To samo można było by zrobić tak :
        // Vector rowVector = ((DefaultTableModel)tableProducts.getModel()).getDataVector().elementAt(row);

        // WywoĹ‚ujemy dialog edycji produktu
        EditProductDialog frame = new EditProductDialog(null, true, rowVector, false);
        frame.setVisible(true);
        // Jeśli użytkownik wycofał sie z procedury edycji
        if (frame.getReturnStatus() == frame.RET_CANCEL) {
            // Wycofujemy sie z procedury
            return;
        }
        // Inaczej podmieniamy linijkę z numerem row tablicy tableProducts
        // na przygotowany w dialogu EditProductDialog wektor retVector

        // Korzystamy z wĹ‚asnego modelu tablicy i metody updateRow
        ((YPTableModel)tableProducts.getModel()).updateRow(frame.retVector,row);
        // Odnawiamy tablicę
        tableProducts.repaint();
}//GEN-LAST:event_jbEditRecordActionPerformed

    private void jbAddRecord1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddRecord1ActionPerformed
        // UĹĽytkownik chce dodaÄ‡ produkt do istniejÄ…cych produktĂłw
        // WywoĹ‚ujemy dialog edycji produktu
        // W konstruktorze przekazujemy w jakoĹ›ci wektora null, to znaczy ĹĽe my
        // chcemy dodaÄ‡ produkt
        EditProductDialog frame = new EditProductDialog(null, true, null, true);
        frame.setVisible(true);
        // JeĹ›li uĹĽytkownik wycofaĹ‚ sie z procedury edycji
        if (frame.getReturnStatus() == frame.RET_CANCEL) {
            // Wycofujemy sie z procedury
            return;
        }
        // Inaczej dodajemy do tablicy przygotowany w dialogu EditProductDialog
        // wektor retVector

        // Dopisujemy do mapy mapIdToProduct odpowiednia klucz z parametrem "0",
        // dla tego że nie wiemy, jaki ID dostanie ten wpis
        // Jeśli ten klucz już istnieje, on się nie dopisze
        String key = frame.retVector.elementAt(0) + "," +
                     frame.retVector.elementAt(1) + "," +
                     frame.retVector.elementAt(2);
        if (!NewUserPanel.mapIdToProduct.containsKey(key)) {
            NewUserPanel.mapIdToProduct.put(key, "0");
            // Korzystamy z własnego modelu tablicy i metody appendRow
            ((YPTableModel)tableProducts.getModel()).appendRow(frame.retVector);
            // Odnawiamy tablicę
            tableProducts.repaint();
        }
}//GEN-LAST:event_jbAddRecord1ActionPerformed

    private void checkEditSAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkEditSAPActionPerformed
        bSapChecked = ! bSapChecked;
        checkUncheckSAP();
    }//GEN-LAST:event_checkEditSAPActionPerformed

    private void jbGetSAPDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGetSAPDataActionPerformed
                // Proponujemy wprowadzić numer SAP klienta
        String sap = YPFunctions.showInputDialog("Wprowadż numer SAP nadawcy", "Numer SAP nadawcy");
        // Numer SAP powinien być 7-znakowy numeryczny. Sprawdzamy
        if ((sap == null) || (sap.length() != 7) || (!YPFunctions.isInteger(sap))) {
            YPFunctions.showErrorMessage("Nie prawidłowy numer SAP");
//            JOptionPane.showMessageDialog(null, "Nie prawidłowy numer SAP", "Błąd", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Teraz sprawdzamy w bazie danych. Funkcja Search_sap zwraca 0 jeśli istnieje
        // klient z takim numerem SAP lub kod błędu.
        GlobalData.oraSession.executeProcedure(
                "MGR_DEFINE.INSERT_CUST_L_N(?,?)", //nIDCust NUMBER, nIDSAP NUMBER)
                new Vector(Arrays.asList(Integer.parseInt(tfIdCas.getText()),Integer.parseInt(sap))));
        tfNewIdSAP.setText(sap);
        showSAPData(sap, false);
    }//GEN-LAST:event_jbGetSAPDataActionPerformed

    private void jbSaveSAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveSAPActionPerformed
        String sap = tfNewIdSAP.getText().trim();

        GlobalData.oraSession.executeProcedure(
                "MGR_DEFINE.EDIT_CUST_L_N(?,?,?,?,?,?,?,?,?,?,?)",
                new Vector(Arrays.asList(
                iIdCas,
                trim(tfNewShort.getText(),20),
                trim(tfNewName.getText(),80),
                trim(tfNewPostCode.getText(),5),
                trim(tfNewCity.getText(),40),
                trim(tfNewStreet.getText(),40),
                trim(tfNewHouse.getText(),10),
                trim(tfNewTel.getText(),30),
                trim(tfNewNIP.getText(),13),
                trim(tfNewBank.getText(),42),
                trim(tfNewRach.getText(),42))));


        if (! tfIdSAP.getText().equals(sap)) {
            GlobalData.oraSession.executeQuery(
                    "UPDATE CUSTOMERS SET id_sap=? WHERE id_cust=?",
                    new Vector(Arrays.asList(Integer.parseInt(sap),iIdCas)));
        }
        GlobalData.oraSession.SaveLog("Zmiana danych adresowych dla ID_CUST=" + tfIdCas.getText(), "");

        sIdSap = sap;
        fillUpperPanel(iIdCas, sIdSap);
        YPFunctions.showMessage("Zmiany zostały zapisane i odczytane","");
    }//GEN-LAST:event_jbSaveSAPActionPerformed

    private void jbSaveOpiekunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveOpiekunActionPerformed
            int opiekun = Integer.parseInt(GlobalData.oraSession.selectString(
                                     "SELECT id_user " +
                                     "from cas_users " +
                                     "where user_name=?",
                      new Vector(Arrays.asList((String)comboOpiekun.getSelectedItem())),
                      "0"));
            int app = Integer.parseInt(GlobalData.oraSession.selectString(
                                     "SELECT id_app " +
                                     "from cas_Dict_app " +
                                     "where description=?",
                new Vector(Arrays.asList((String)comboApp.getSelectedItem())),
                "0"));

            GlobalData.oraSession.executeProcedure(
                   "MGR_DEFINE.UPDATE_CUST(?,?,?,?,?,?,?,?)",
                   new Vector(Arrays.asList(
                        iIdCas,(String)comboDepotEX.getSelectedItem(),app,tfVersion.getText(),
                        opiekun,YPFunctions.nvlParseInteger(tfKurier.getText()),
                        tfProgName.getText(),
                        YPFunctions.nvlParseInteger((String)comboRangeLP.getSelectedItem()))));
    
            if (depotDrExists)
                GlobalData.oraSession.executeQuery("Update customers set depot_dr=? where id_cust=?",
                       new Vector(Arrays.asList((String)comboDepotDR.getSelectedItem(), iIdCas)));
            
        GlobalData.oraSession.SaveLog("Zmiana opiekuna, aplkacji, zakresu... dla ID_CUST=" + tfIdCas.getText(), "");
            

        fillUpperPanel(iIdCas, sIdSap);
        YPFunctions.showMessage("Zmiany zostały zapisane i odczytane","");
    }//GEN-LAST:event_jbSaveOpiekunActionPerformed

    private void jbSaveZlecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveZlecActionPerformed
            GlobalData.oraSession.executeQuery("Update dict_config set l_z_name=?,l_z_addr_zipcode=?,l_z_addr_city=?,l_z_addr_street=?,l_z_addr_streetno=?,l_z_telephone=?,l_z_id_sap=?,l_z_shortname=? where id_cust=?",
                       new Vector(Arrays.asList(
                                   tfZlecName.getText().toUpperCase(),
                                   tfZlecPostCode.getText().toUpperCase(),
                                   tfZlecCity.getText().toUpperCase(),
                                   tfZlecStreet.getText().toUpperCase(),
                                   tfZlecHouse.getText().toUpperCase(),
                                   tfZlecTel.getText().toUpperCase(),
                                   tfZlecSap.getText().toUpperCase(),
                                   tfZlecShort.getText().toUpperCase(),
                                   iIdCas)));
        GlobalData.oraSession.SaveLog("Zmiana adresu zleceniodawcy dla ID_CUST=" + tfIdCas.getText(), "");
        fillUpperPanel(iIdCas, sIdSap);
        YPFunctions.showMessage("Zmiany zostały zapisane i odczytane","");
    }//GEN-LAST:event_jbSaveZlecActionPerformed

    private void jbSaveInstallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveInstallActionPerformed
        boolean res = GlobalData.oraSession.executeProcedure(
                       "MGR_DEFINE.EDIT_CUST_I_M(?,?,?,?,?,?,?,?)",
                       new Vector(Arrays.asList(iIdCas,
                                         tfInstName1.getText().toUpperCase(),
                                         tfInstStreet1.getText().toUpperCase(),
                                         tfInstHouse1.getText().toUpperCase(),
                                         tfInstPostCode1.getText().toUpperCase(),
                                         tfInstCity1.getText().toUpperCase(),
                                         tfInstTel1.getText().toUpperCase(),
                                         tfInstWarnings1.getText().toUpperCase())));
        GlobalData.oraSession.SaveLog("Zmiana adresu instalacji dla ID_CUST=" + tfIdCas.getText(), "");

        fillUpperPanel(iIdCas, sIdSap);
        YPFunctions.showMessage("Zmiany zostały zapisane i odczytane","");
    }//GEN-LAST:event_jbSaveInstallActionPerformed

    private void tableCommMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCommMouseReleased
        int row = tableComm.getSelectedRow();
        int ndx = YPFunctions.getTableColumnIndex(tableComm,"Akcja");
        if (YPFunctions.strGet(tableComm,row, ndx).startsWith("SAVE_SHIPMENT")) {
            ndx = YPFunctions.getTableColumnIndex(tableComm,"Parameter");
            String sShipmentId = YPFunctions.strGet(tableComm,row, ndx);
            YPFunctions.showPanelAsModalDialog(new ShipmentsPanel(
                                                    tfIdCas.getText(),
                                                    sShipmentId),
                                               "Przegląd danych o przesyłkach",
                                               new Dimension(1017,700));

        } else if (YPFunctions.strGet(tableComm,row, ndx).startsWith("SAVE_RETURN")) {
            ndx = YPFunctions.getTableColumnIndex(tableComm,"Parameter");
            String sShipmentId = YPFunctions.strGet(tableComm,row, ndx);
            if (GlobalData.returnsStarted)
               YPFunctions.showPanelAsModalDialog(new ReturnsPanel(sShipmentId),
                                               "Przegląd danych o zwrotach",
                                               new Dimension(1017,400));

        }

    }//GEN-LAST:event_tableCommMouseReleased

    private void tableCommKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableCommKeyReleased
        this.tableCommMouseReleased(null);
    }//GEN-LAST:event_tableCommKeyReleased

    private void jbImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImportActionPerformed
        // NaciĹ›niÄ™ty przycisk "..."
        // WyĹ›wietlamy dialog dla zaznaczenia pojedynczego ID CUST,
        // ktĂłry bÄ™dzie sĹ‚uĹĽyÄ‡ ĹĽrĂłdĹ‚em importu.
        // Jasne, ĹĽe wĹ›rĂłd wyĹ›wietlonych Id Cust nie powinno byÄ‡
        // docelowego ID CUST
        SelectCustomerDialog frame = new SelectCustomerDialog(null, true, true, "","");
        frame.setTitle("Zaznacz ID_CUST jednego klienta, definicję którego chcesz skopiować");
        frame.setVisible(true);
        if (tfIdCas.getText().equals(((SelectCustomerDialog)frame).selectedID_CUST)){
            YPFunctions.showBigErrorMessage("Nie można wybrać za źródło docelowy ID CAS, wybierz inny");
            //                JOptionPane.showMessageDialog(null, "Nie można wybrać za źródło docelowy ID CAS, wybierz inny","Błąd",JOptionPane.ERROR_MESSAGE);
            return;
        }
        //Wyś›wietlamy wybrany ID CUST
        tfSourceIdCust.setText(((SelectCustomerDialog)frame).selectedID_CUST);
        tfSourceIdCust.repaint();
}//GEN-LAST:event_jbImportActionPerformed

    private void jbStartImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbStartImportActionPerformed

        // Naciśnięty przycisk "Importuj"
        // Sprawdzamy poprawność ID CUST
        String sourceIdCust = tfSourceIdCust.getText();
        if ((sourceIdCust.length() < 4) || (sourceIdCust.length() > 6)) {
            YPFunctions.showErrorMessage("Nie prawidłowy numer źródłowego Id Cust");
            //                   JOptionPane.showMessageDialog(null, "Nie prawidłowy numer źródłowego Id Cust","Błąd",JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Wykonujemy właśnie import
        YPFunctions.enableContainer(panelImport, false);
        YPFunctions.enableContainer(panelDefault, false);
        executeImport();
        GlobalData.oraSession.SaveLog("Import słowników z ID_CUST=" + tfSourceIdCust.getText() + " dla ID_CUST=" + tfIdCas.getText(), "");

}//GEN-LAST:event_jbStartImportActionPerformed

    private void executeImport() {
        // Kursor oczekiwania
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        // Najpierw zapisujemy definicję produktów - zdefiniowanych lub importowanych z innego ID CAS
        if (cbImportProducts.isSelected()) {
                // Wykonujemy proceduru IMPORT_OTHERS
                       GlobalData.oraSession.executeProcedure(
                             "MGR_DEFINE.IMPORT_OTHERS(?,?,?)",
                             new Vector(Arrays.asList(
                                           Integer.parseInt(tfIdCas.getText()),
                                           Integer.parseInt(tfSourceIdCust.getText()),
                                           "S")));
        }
        // Wektor płatników
        Vector<String> vPlatnik =
                 GlobalData.oraSession.selectOneColumnToVector(
                      "select distinct id_pay from dict_services where id_cust=?",
                      new Vector(Arrays.asList(Integer.parseInt(tfIdCas.getText()))));

        // Dla każdego płatnika wykonujemy ciąg procedur
        for (int i=0; i<vPlatnik.size(); i++) {
            // Parametry jednakowe dla wszystkich procedur
            Vector pars = new Vector(Arrays.asList(
                                   Integer.parseInt(tfIdCas.getText()),
                                   Integer.parseInt(tfSourceIdCust.getText()),
                                   vPlatnik.elementAt(i)));
            // Wykonujemy procdury
            GlobalData.oraSession.executeProcedure(
                     "MGR_DEFINE.IMPORT_EX(?,?,?)", pars);
            GlobalData.oraSession.executeProcedure(
                     "MGR_DEFINE.IMPORT_EX_RAB(?,?,?)", pars);
            GlobalData.oraSession.executeProcedure(
                     "MGR_DEFINE.IMPORT_DR(?,?,?)", pars);
            GlobalData.oraSession.executeProcedure(
                     "MGR_DEFINE.IMPORT_PAL(?,?,?)", pars);
            GlobalData.oraSession.executeProcedure(
                     "MGR_DEFINE.IMPORT_PAL_RAB(?,?,?)", pars);
        }

        // Tworzymy ciąg z zaznaczonymi opcjami dodatkowymi, tak jak jest
        // to wymagane dla uruchomienia procedury IMPORT_OTHERS
        String parameter = "";
        if (cbImportActivation.isSelected())
            parameter += "A";
        if (cbZleceniodawca.isSelected())
            parameter += "Z";
        // Wykonujemy proceduru IMPORT_OTHERS
        if (!parameter.isEmpty()) {
               GlobalData.oraSession.executeProcedure(
                     "MGR_DEFINE.IMPORT_OTHERS(?,?,?)",
                     new Vector(Arrays.asList(
                                   Integer.parseInt(tfIdCas.getText()),
                                   Integer.parseInt(tfSourceIdCust.getText()),
                                   parameter)));
        }
        // Przywracamy domyślny kursor
        this.setCursor(java.awt.Cursor.getDefaultCursor());
        // Powiadomienie dla użytkownika
        YPFunctions.showMessage("Import został wykonany","Import wykonany");
    }

    private void refreshImportDefault() {

        YPFunctions.enableContainer(panelImport, bImpSelected);
        YPFunctions.enableContainer(panelDefault, bDefaultSelected);
        checkImport.setEnabled(true);
        checkImport.setSelected(bImpSelected);
        checkDefault.setEnabled(true);
        checkDefault.setSelected(bDefaultSelected);
    }



    private void checkImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkImportActionPerformed
        bImpSelected = ! bImpSelected;
        bDefaultSelected = ! bImpSelected;
        refreshImportDefault();
}//GEN-LAST:event_checkImportActionPerformed

    private void checkDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDefaultActionPerformed
        bDefaultSelected = ! bDefaultSelected;
        bImpSelected = ! bDefaultSelected;
        refreshImportDefault();
}//GEN-LAST:event_checkDefaultActionPerformed

    private void jbDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDefaultActionPerformed
        YPFunctions.enableContainer(panelImport, false);
        YPFunctions.enableContainer(panelDefault, false);
        // Wykonujemy ustawienie cenników domyślnych
        executeDefault();
        GlobalData.oraSession.SaveLog("Ustawienie domyślnych słowników dla ID_CUST=" + tfIdCas.getText(), "");

    }//GEN-LAST:event_jbDefaultActionPerformed

    private void checkConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkConvertActionPerformed
        bConversionSelected = ! bConversionSelected;
        jbConvert.setEnabled(bConversionSelected);
    }//GEN-LAST:event_checkConvertActionPerformed

    private void jbConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConvertActionPerformed
        // Kursor oczekiwania
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));

        GlobalData.oraSession.executeProcedure("MGR_DEFINE.CONVERTAPPTO3(?)",
                new Vector(Arrays.asList(Integer.parseInt(tfIdCas.getText()))));

        // Przywracamy domyślny kursor
        this.setCursor(java.awt.Cursor.getDefaultCursor());

        // Powiadomienie dla użytkownika
        YPFunctions.showMessage("Ustawienie słowników zostało wykonane","");
    }//GEN-LAST:event_jbConvertActionPerformed

    private void butAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAllActionPerformed
           toogleValueInSynchro(new Vector(Arrays.asList(
                   "DICT_APSHUBS",      "DICT_APSHUBS_EXT",
                   "DICT_CONFIG",       "DICT_DISTANCES",
                   "DICT_DR",           "DICT_DR_RAB_LINE", "DICT_DR_STD",
                   "DICT_EX",           "DICT_EX_RAB",      "DICT_EX_STD",  "DICT_EX_RAB_STD",
                   "DICT_NUMBERS",      "DICT_PAL",         "DICT_PAL_RAB", "DICT_PAL_RAB_DISTANCE",
                   "DICT_PAL_RAB_LINE", "DICT_PC",          "DICT_PCS",     "DICT_SERVICES")));
    }//GEN-LAST:event_butAllActionPerformed

    private void jbAddFromSAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddFromSAPActionPerformed
        String sap = YPFunctions.showInputDialog("Wprowadż numer SAP nowego klienta", "Numer SAP klienta");
        // Numer SAP powinien być 7-znakowy numeryczny. Sprawdzamy
        if ((sap == null) || (sap.length() != 7) || (!YPFunctions.isInteger(sap))) {
            YPFunctions.showErrorMessage("Nie prawidłowy numer SAP");
            return;
        }
        Vector<String> vTitle = GlobalData.oraSession.selectFieldNames("DICT_SENDERS");
        // Pierwsze pole w tablice Dict_senders jest id_cust, usuwamy go
        vTitle.remove(0);
        Vector<Vector> vBody = ((YPTableModel)tableSenders.getModel()).getBody();
        Vector vNewLine = GlobalData.oraSession.selectFirstRecordToVector(
                               "SELECT Borsoft.M2W(Borsoft.DECODEDATA(skrotnaz)) skrot," +
                                  "ID_SAP," +
                                  "Borsoft.M2W(Borsoft.DECODEDATA(nazwa)) nazwa," +
                                  "Borsoft.M2W(Borsoft.DECODEDATA(kod_p)) kod_p," +
                                  "Borsoft.M2W(Borsoft.DECODEDATA(miasto)) miasto," +
                                  "Borsoft.M2W(Borsoft.DECODEDATA(ulica)) ulica," +
                                  "Borsoft.M2W(Borsoft.DECODEDATA(nr_domu)) dom," +
                                  "Borsoft.M2W(Borsoft.DECODEDATA(telephone)) tel " +
                              "FROM SAP.KLSAP@SPS where ID_SAP = ?",
                              new Vector(Arrays.asList(YPFunctions.nvlParseInteger(sap))));
        vBody.add(vNewLine);

        YPFunctions.FillTableFromVector(
                             vBody,
                             vTitle,
                             tableSenders,
                             new Vector(Arrays.asList(10, 10, 30, 5, 20, 20, 5, 5)),
                             new Vector(),
                             false,
                             false,
                             new Vector(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7)),
                             new Vector(),
                             false,
                             0);

    }//GEN-LAST:event_jbAddFromSAPActionPerformed

    private void jbDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDelActionPerformed
        int row = tableSenders.getSelectedRow();
        if (row == -1) {
            YPFunctions.showErrorMessage("Nie zaznaczona linijka tablicy");
            return;
        }
        // Korzystamy z własnego modelu tablicy i metody deleteRow
        ((YPTableModel)tableSenders.getModel()).deleteRow(row);
        // Odnawiamy tablicę
        tableSenders.repaint();

    }//GEN-LAST:event_jbDelActionPerformed

    private void jbSaveSendersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveSendersActionPerformed
        // Jeśli tablica jest w trybie edytowania danych, to zapisujemy zmiany
        // w tablice.
        if (tableSenders.isEditing()) {
            tableSenders.getCellEditor().stopCellEditing();
        }
        int count = 0;
        String data = "";
        
        try {
            for (int i = 0; i < tableSenders.getRowCount(); i++)
            {
                String s = YPFunctions.strGet(tableSenders,i, 0);
                if (!s.equals(""))
                {
                        data += YPFunctions.strGet(tableSenders,i, 0).replace(';', ' ') + ";" +
                                Integer.parseInt(YPFunctions.strGet(tableSenders,i, 1)) + ";" +
                                YPFunctions.strGet(tableSenders,i, 2).replace(';', ' ') + ";" +
                                YPFunctions.strGet(tableSenders,i, 3).replace(';', ' ') + ";" +
                                YPFunctions.strGet(tableSenders,i, 4).replace(';', ' ') + ";" +
                                YPFunctions.strGet(tableSenders,i, 5).replace(';', ' ') + ";" +
                                YPFunctions.strGet(tableSenders,i, 6).replace(';', ' ') + ";" +
                                YPFunctions.strGet(tableSenders,i, 7).replace(';', ' ') + ";";

                        count++;
                }
            }
        } catch (Exception e) {
        }
        
        String s = (String)GlobalData.oraSession.executeFunction(
                   "MGR_DEFINE.F_UPDATE_SENDERS(?,?,?)",
                   new Vector(Arrays.asList(iIdCas, count, data)), 
                   OracleTypes.VARCHAR); 
        if (! s.equals("OK")) {
           this.setCursor(java.awt.Cursor.getDefaultCursor());
           YPFunctions.showErrorMessage("Nie udało się wykonać ustawienie słowników [" + s + "]");
           return;
        }
        GlobalData.oraSession.SaveLog("Zmiana listy nadawców dla ID_CUST=" + tfIdCas.getText(), "");
        
        fillSenderList();
        YPFunctions.showMessage("Zmiany do listy nadawców zostały zapisane i ponownie odczytane","");
    }//GEN-LAST:event_jbSaveSendersActionPerformed

    private void tableSetSpecMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSetSpecMouseReleased
            int row = tableSetSpec.getSelectedRow();

            if ((row != -1) && (evt.getClickCount() == 2))
            {
                ShowSpecialSettingsDialog frame = new ShowSpecialSettingsDialog(null,
                                                        true,
                                                        YPFunctions.strGet(tableSetSpec, row, 3),
                                                        iIdCas);
                frame.setVisible(true);
            }
    }//GEN-LAST:event_tableSetSpecMouseReleased

private void fillReturnWarnings()
{
    if (GlobalData.returnsStarted)
    {
        String retWar = GlobalData.oraSession.selectString("Select LABEL_COMMENT_TEXT from DICT_RETURN_COMMENTS where ID_CUST=?",
                    new Vector(Arrays.asList(iIdCas)), "");
        if ("".equals(retWar))
            retWar = GlobalData.oraSession.selectString("Select LABEL_COMMENT_TEXT from DICT_RETURN_COMMENTS where ID_CUST=?",
                    new Vector(Arrays.asList(0)), "");
        taReturnWarnings.setText(retWar);
    }
}
    
    
private void jbOthersOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOthersOkActionPerformed
    if (GlobalData.returnsStarted)
    {
        int recCount = Integer.parseInt(GlobalData.oraSession.selectString("Select count(*) from DICT_RETURN_COMMENTS where ID_CUST=?",
                    new Vector(Arrays.asList(iIdCas)), "0"));
        if (recCount == 0)
            GlobalData.oraSession.executeQuery("Insert into DICT_RETURN_COMMENTS(ID_CUST,LABEL_COMMENT_TEXT) values(?,?)", 
                    new Vector(Arrays.asList(iIdCas, taReturnWarnings.getText())));
        else
            GlobalData.oraSession.executeQuery("Update DICT_RETURN_COMMENTS set LABEL_COMMENT_TEXT=? where ID_CUST=?", 
                    new Vector(Arrays.asList(taReturnWarnings.getText(), iIdCas)));
        fillReturnWarnings();
        YPFunctions.showMessage("Zmiany do uwag na etykiecie zwrotnej ZK zostały zapisane i ponownie odczytane","");
    }
}//GEN-LAST:event_jbOthersOkActionPerformed

private void jbSaveResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveResetActionPerformed
    GlobalData.oraSession.executeQuery("INSERT INTO CAS_OWNER.DATA_RESET_PASSWORD (" +
                                       "CUST_ID, OPERATOR_NAME, INSERTED_BY) " + 
                                       "VALUES (?, ?, ?)",
                                       new Vector(Arrays.asList(iIdCas, tfOperatorName.getText(), GlobalData.m_sDomainUserLogin)));
}//GEN-LAST:event_jbSaveResetActionPerformed

    private void executeDefault() {
        // Kursor oczekiwania
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));

        // Wykomujemy zapisywanie słowników domyślnych
        String s = (String)GlobalData.oraSession.executeFunction(
                   "MGR_DEFINE.f_insertNewCustomer(?)",
                   new Vector(Arrays.asList(Integer.parseInt(tfIdCas.getText()))),
                   OracleTypes.VARCHAR);
        if (! s.equals("OK")) {
           this.setCursor(java.awt.Cursor.getDefaultCursor());
           YPFunctions.showErrorMessage("Nie udało się wykonać ustawienie słowników [" + s + "]");
//           JOptionPane.showMessageDialog(null, "Nie udało się wykonać ustawienie słowników [" + s + "]" ,"Błąd",JOptionPane.ERROR_MESSAGE);
           return;
        }
        // Przywracamy domyślny kursor
        this.setCursor(java.awt.Cursor.getDefaultCursor());

        // Powiadomienie dla użytkownika
        YPFunctions.showMessage("Ustawienie słowników zostało wykonane","");
    }


    private String trim(String s, int len ) {
        if (s.length() < len)
            return s;
        else
            return s.substring(0, len);
    }

    private void SaveDictConfig() {
        // Ekran dla słownika DICT_CONFIG na rozmieszczony pionowo, a wszystko trzeba
        // zapisać do jednego rekordu.
        // Przed tym jak wygenerować zapytanie SQL do zamieszczenia(UPDATE) rekordu
        // najpierw trzeba odczytać typy wszystkich pól rekordu.
        Vector<Integer> v_fieldTypes =
              GlobalData.oraSession.selectTypesToVector(dictConfig_Query, queryParams);
        // Tworzymy zapytanie SQL
        String updateQuery = "Update DICT_CONFIG set ";
        for (int i = 0; i < v_fieldTypes.size(); i++) {
            // dla wszystkich linijek tablicy dopisujemy tekst z pierwszej kolumny i znak "="
            updateQuery += YPFunctions.strGet(dictionaryTable,i, 0) + "=";
            // Póżniej w zależności od typu
            switch (v_fieldTypes.elementAt(i)) {
                // Typ jest numeryczny typu Integer
                case 2:  // NUMBER,INTEGER,DECIMAL...
                    updateQuery += YPFunctions.nvlParseInteger(YPFunctions.strGet(dictionaryTable,i, 1));
                    break;
                // Typ jest numeryczny typu Double
                case 101: // BINARY DOUBLE..
                case 100: // BINARY FLOAT
                    updateQuery += YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 1));
                    break;
                // Typ jest ciągiem znaków typu String - na początku i w końcu trzeba dopisać apostrofy
                case -3: // RAW
                case -1: // LONG
                case 12: // VARCHAR,VARCHAR2...
                case 1: // CHAR,NCHAR,...
                    updateQuery += "'" + YPFunctions.strGet(dictionaryTable,i, 1) + "'";
                    break;
                // Typ jest typu Date - zapisać zgodnie ze standardem Oracle
                case 91: // DATE
                    updateQuery += "to_date('" + YPFunctions.strGet(dictionaryTable,i, 1) + "','YYYY/MM/DD')";
                    break;
                default:
                    updateQuery += YPFunctions.strGet(dictionaryTable,i, 1);
                    break;
            }
            // Jeśli to nie jest ostatnia linijka tablicy, dopisać znak ","
            if (i != v_fieldTypes.size() - 1) {
                updateQuery += ",";
            }
        }
        // Dodajemy warunek
        updateQuery += " where id_cust =" + tfIdCas.getText();
        // Wykonujemy zapytanie
        GlobalData.oraSession.executeQuery(updateQuery,null);
    }

    private void SaveCenDr() {
        // Cennik DICT_DR jest przedstawiony na ekranie nie liniowo, a jako tablica
        if (dictionaryTable.isEditing()) {
            dictionaryTable.getCellEditor().stopCellEditing();
        }
        int count = 0;
        String data = "";
        
        try {
            // Dla każdej linijki
            for (int i = 0; i < dictionaryTable.getRowCount(); i++) {
                // Dla każdej kolumny, oprócz pierwszej ( tam zapisana odległość )
                for (int j = 1; j < dictionaryTable.getColumnCount(); j++) {
                    String s = YPFunctions.strGet(dictionaryTable,i, 0);
                    if (!s.equals(""))
                    {
                            data += // Nagłówek kolumny "j" - tam zapisana waga
                                    Integer.parseInt((String)dictionaryTable.getTableHeader().getColumnModel().getColumn(j).getHeaderValue()) + ";" +
                                    // Tekst z pierwszej komórki tablicy - tam zapisana odległość
                                    Integer.parseInt(YPFunctions.strGet(dictionaryTable,i, 0)) + ";" +
                                    // Zawartość komórki (i,j) - zapisana kwota
                                    YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, j)) + ";";
                            count++;
                    }
                }
            }
        } catch (Exception e) {
        }
        
        String s = (String)GlobalData.oraSession.executeFunction(
                   "MGR_DEFINE.F_UPDATE_DICT_DR(?,?,?,?,?)",
                   new Vector(Arrays.asList(iIdCas,
                                            (String) comboPlatnik.getSelectedItem(), 
                                            (String) comboProducts.getSelectedItem(), 
                                            count, 
                                            data)), 
                   OracleTypes.VARCHAR); 
        if (! s.equals("OK")) {
           this.setCursor(java.awt.Cursor.getDefaultCursor());
           YPFunctions.showErrorMessage("Nie udało się wykonać ustawienie słowników [" + s + "]");
           return;
        }
    }

    
    private void SaveCenEx() {
        // Dla wszystkich linijek tablicy
        for (int i = 0; i < dictionaryTable.getRowCount(); i++) {
             boolean bChecked = (Boolean)dictionaryTable.getValueAt(i, 1);
             GlobalData.oraSession.executeProcedure(
                     "MGR_DEFINE.Set_Ex_Algol(?,?,?,?,?,?)",
                     new Vector(Arrays.asList(
                           iIdCas,
                           (String) comboPlatnik.getSelectedItem(),
                           (String) comboProducts.getSelectedItem(),
                           (Integer)vIdLabel.elementAt(i),
                           YPFunctions.strGet(dictionaryTable,i, 2),
                           bChecked ? "T" : "N" )));

             
             GlobalData.oraSession.executeProcedure(
                     "MGR_DEFINE.UPDATE_EX_RABAT(?,?,?,?,?)",
                     new Vector(Arrays.asList(
                           iIdCas,
                           (String) comboPlatnik.getSelectedItem(),
                           (String) comboProducts.getSelectedItem(),
                           (Integer)vIdLabel.elementAt(i),
                           YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 3)))));
        }
    }

 private void SaveDictPal() {
        if (dictionaryTable.isEditing()) {
            dictionaryTable.getCellEditor().stopCellEditing();
        }
        int count = 0;
        String data = "";
        
        try {
            for (int i = 0; i < dictionaryTable.getRowCount(); i++)
            {
                String s = YPFunctions.strGet(dictionaryTable,i, 0);
                if (!s.equals(""))
                {
                        data += Integer.parseInt(YPFunctions.strGet(dictionaryTable,i, 0)) + ";" +
                                YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 1)) + ";" +
                                YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 2)) + ";" +
                                YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 3)) + ";" +
                                YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 4)) + ";" +
                                YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 5)) + ";";
                        count++;
                }
            }
        } catch (Exception e) {
        }
        
        String s = (String)GlobalData.oraSession.executeFunction(
                   "MGR_DEFINE.F_UPDATE_DICT_PAL(?,?,?,?,?)",
                   new Vector(Arrays.asList(iIdCas,
                                            (String) comboPlatnik.getSelectedItem(), 
                                            (String) comboProducts.getSelectedItem(), 
                                            count, 
                                            data)), 
                   OracleTypes.VARCHAR); 
        if (! s.equals("OK")) {
           this.setCursor(java.awt.Cursor.getDefaultCursor());
           YPFunctions.showErrorMessage("Nie udało się wykonać ustawienie słowników [" + s + "]");
           return;
        }
    }



    private void SaveDictScreens() {
        // Dla wszystkich linijek tablicy
        for (int i = 0; i < dictionaryTable.getRowCount(); i++) {
                String query = "Update dict_screens set visible=? where ID_CUST=? and id_services=? and id_label=?";
                Vector pars = new Vector(Arrays.asList(
                        (Boolean)dictionaryTable.getValueAt(i, 4)==true ? "T" : "N",
                        iIdCas,
                        YPFunctions.strGet(dictionaryTable,i, 0),
                        YPFunctions.strGet(dictionaryTable,i, 1)));
                GlobalData.oraSession.executeQuery(query,pars);
        }
    }

    private int getLabelPosition(Vector<Vector> p_vBody, String p_label) {
        int ret = -1;
        for (int i = 0; i < p_vBody.size(); i ++) {
            Vector vLine = p_vBody.elementAt(i);
            String label = (String)vLine.elementAt(0);
            if (label.equals(p_label)) {
                ret = i;
                break;
            }
        }
        return ret;
    }

    private void PrepareAndShowCenEx(String id_cust, String product, String platnik) {
        String s = (String)GlobalData.oraSession.executeFunction(
                   "MGR_DEFINE.F_PREPARE_EX(?,?,?)",
                   new Vector(Arrays.asList(Integer.parseInt(id_cust),platnik,product)),
                   OracleTypes.VARCHAR);
        if ((s == null) || s.isEmpty())
            return;
        Vector<String> vLines = YPFunctions.getTokensAsVector(s, "\n");
        if (!vLines.isEmpty())
            vLines.removeElementAt(vLines.size()-1);

        Vector<Vector> vBody = new Vector();

        vIdLabel = new Vector();
        Iterator it = vLines.iterator();
        while(it.hasNext())
        {
            String line = (String)it.next();
            Vector vItems = YPFunctions.getTokensAsVector(line, ";");
            if(vItems.elementAt(0).equals("N"))
            {
                Vector vNew = new Vector(Arrays.asList(
                        vItems.elementAt(4),   // Label
                        Boolean.valueOf(false),    // checkbox
                        vItems.elementAt(3),   // formula
                        vItems.elementAt(2).equals("")?"0":vItems.elementAt(2))); // rabat
                vBody.add(vNew);
                vIdLabel.add(Integer.parseInt((String)vItems.elementAt(1)));
            }
        }
        Iterator it1 = vLines.iterator();
        while(it1.hasNext())
        {
            String line = (String)it1.next();
            Vector vItems = YPFunctions.getTokensAsVector(line, ";");
            if(vItems.elementAt(0).equals("T"))
            {
                int pos = getLabelPosition(vBody, (String)vItems.elementAt(4));
                if (pos != -1) {
                   Vector vNew = new Vector(Arrays.asList(
                               vItems.elementAt(4),
                               Boolean.valueOf(true),
                               vItems.elementAt(3),
                               vItems.elementAt(2).equals("")?"0":vItems.elementAt(2)));
                    vBody.set(pos, vNew);
                }
            }
        }

        YPFunctions.FillTableFromVector(vBody,
                new Vector(Arrays.asList("Nazwa pola","Cennik Specjalny","Formuła","Rabat")),
                dictionaryTable,
                new Vector(Arrays.asList(80,10,120,30)),
                new Vector(Arrays.asList(1)),
                false,
                false,
                new Vector(Arrays.asList(1,2,3)),
                new Vector(Arrays.asList(0)),
                false,
                0);

        // Odczytujemy stan checkbox'ów w tablice
        // Odczytujemy stan fizyczny ( nie przez iterator)
        v_bChecked = new Vector();
        for (int i = 0; i < dictionaryTable.getRowCount(); i++ )
            v_bChecked.add((Boolean)dictionaryTable.getValueAt(i, 1));
    }

    private void PrepareAndShowDictPal(String id_cust, String product, String platnik) {
        // Wyświetlamy cennik dla przesyłek z paletami EUR
        String dictPal_Query =
                "select Distance as \"Odległość\"," +
                       "Pal_A as \"Pal_200\"," +
                       "Pal_B as \"Pal_400\"," +
                       "Pal_B1 as \"Pal_600\"," +
                       "Pal_B2 as \"Pal_800\"," +
                       "Pal_C as \"Pal_1000\" " +
                "from dict_pal " +
                "where id_cust=? and " +
                      "id_product=? and " +
                      "id_pay=? " +
                "order by distance";

        queryParams = new Vector(Arrays.asList(Integer.parseInt(id_cust), product, platnik));
        YPFunctions.FillTableFromOra(dictPal_Query,
                                     queryParams,
                                     0,
                                     99999,
                                     dictionaryTable,
                                     null,
                                     null,
                                     false,
                                     false,
                                     new Vector(Arrays.asList(1,2,3,4,5)),
                                     new Vector(Arrays.asList(0)),
                                     false);
    }


    private void PrepareAndShowCenDr(String id_cust, String product, String platnik) {
        // Cennik DICT_DR jest zapisany w tablice jako "odleglość - waga - kwota"
        // Takich rekordów (kombinacji "odległość - waga") jest dużo, dla tego warto ją
        // rozmieścić w formie tablicznej, t.zn. nagłówki kolumn będą osnaczali wagę,
        // a nagłówki linijek - odległość. Na skrzyżowaniach były by odpowiednie kwoty.
        // Takie rozmieczszenie pomogło by wyeliminować możliwe błędy, przy których na 
        // skrzyżowaniach mogły by pojawić się "dziury", t.zn. brak jakiś rekordów
        // "waga-odleglość", które jest ciężko skontrolować.

        // Tworzymy puste wektory dla modelu tablicy
        Vector<Vector> v_tableBody  = new Vector();
        Vector<String> v_tableTitles  = new Vector();
        v_tableTitles.add("Odl./Waga");
        // Zawartość wektora komórek do edycji utworzy się dynamicznie
        Vector<Integer> v_tableEditEnable  = new Vector();

        // Parametry
        queryParams = new Vector(Arrays.asList(Integer.parseInt(id_cust),product,platnik));

        // Ściągamy wszystkie wagi
        Vector<Vector<String> > v = GlobalData.oraSession.selectAllRecordsToVector(
                "SELECT distinct weight " +
                "FROM dict_dr " +
                "where id_cust=? and " +
                      "id_product=? " +
                      "and id_pay=? " +
                "order by weight",
                queryParams);
        // Tworzymy mapę odpowiedników wagi i numeru kolumny
        Map<String, Integer> mapWeight = new HashMap<String, Integer>();
        // Zaczynamy od 1 kolumny, a nie od 0, zostawiamy miejsce dla nagłówków linijek
        int i = 1;
        Iterator it = v.iterator();
        while (it.hasNext()) {
            // Odczytujemy wagę
            String sWeight = ((Vector<String>) it.next()).elementAt(0);
            // zapisujemy do mapy waga->numer kolumny
            mapWeight.put(sWeight, i);
            // Dodajemy do wektora z numerami kolumn do edytowania numer kolumny
            v_tableEditEnable.add(i);
            // wagę zapisujemy do nagłówka bieżącej kolumny
            v_tableTitles.add(sWeight);
            // żwiększamy licznik kolumny
            i++;
        }

        // Ściągamy wszystkie odległości
        v = GlobalData.oraSession.selectAllRecordsToVector(
                "SELECT distinct distance " +
                "FROM dict_dr " +
                "where id_cust=? and " +
                      "id_product=? and " +
                      "id_pay=? " +
                "order by distance",
                queryParams);

        // Tworzymy mapę odpowiedników odległości i numeru linijki
        Map<String, Integer> mapDistance = new HashMap<String, Integer>();
        // Zaczynamy od linijki z numerem 0
        i = 0;
        it = v.iterator();
        while (it.hasNext()) {
            // odczytujemy odległość
            String sDistance = ((Vector<String>) it.next()).elementAt(0);
            // zapisujemy do mapy odległość->numer linijki
            mapDistance.put(sDistance, i);
            // Odrazu tworzymy wektor, który będzie linijką tablicy
            Vector<String> vLine = new Vector();
            // pierwszy element wektora - odległość
            vLine.add(sDistance);
            // Dłógość wektora - ilość wag + 1
            // wszystkie pola wektora oprócz pierwszego wypełniamy "pustym" ciągiem
            for (int j = 1; j < mapWeight.size() + 1; j++) {
                vLine.add("");
            }
            // Dodajemy wektor do wektora modelu tablicy
            v_tableBody.add(vLine);
            // zwiększamy licznik i tak do końca iteratora
            i++;
        }
        // Teraz mamy tablicę, która ma nagłówki kolumn,
        // a w pierwszej kolumnie po wszystkich linijkach zapisane odległości.
        // Wszystkie inne komórki wypełnione ""

        // Przystąpimy do wypełniania pozostałych komórek
        // Odczytujemy wszystkie kombinację "odległość-waga-kwota"
        v = GlobalData.oraSession.selectAllRecordsToVector(
                "SELECT distance," +
                       "weight," +
                       "price " +
                "FROM dict_dr " +
                "where id_cust=? and " +
                      "id_product=? and " +
                      "id_pay=?",
                queryParams);
        it = v.iterator();
        while (it.hasNext()) {
            // Odczytujemy każdą kolejną linijkę do wektora vFromDb
            Vector<String> vFromDb = (Vector<String>) it.next();
            // Odległość - pierwszy element wektora
            String keyDist = vFromDb.elementAt(0);
            // po mapie mapDistance szukamy numer linijki dla tej odległości
            int indexDist = mapDistance.get(keyDist);
            // Waga - drugi element wektora
            String keyWeight = vFromDb.elementAt(1);
            // po mapie mapWeight szukamy numer kolumny dla tej wagi
            int indexWeight = mapWeight.get(keyWeight);
            // Kwota - trzeci element wektora
            String price = vFromDb.elementAt(2);

            // Odczytujemy z ciała tablicy wektor z indeksem indexDist
            Vector<String> vLine = v_tableBody.elementAt(indexDist);
            // Podmieniamy element z indeksem indexWeight na odczytana kwotę
            vLine.set(indexWeight, price);
            // zapisujemy z powrotem wyciagnięty i zmodyfikowany wektor
            v_tableBody.set(indexDist, vLine);
        }
        // Wyświetlamy tablicę
        dictionaryTable.setModel(new YPTableModel(v_tableBody, v_tableTitles, v_tableEditEnable));
        if (dictionaryTable.getRowCount() > 0)
        {
           // "Przyciemniamy" pierwszą kolumnę
           dictionaryTable.getColumnModel().getColumn(0).setCellRenderer(
                   new YPTableCellRenderer(0, dictionaryTable.getTableHeader().getBackground()));
        }
    }

    private void PrepareAndShowDictConfig(String id_cust, String product, String platnik) {
        // Wyświetlamy konfigurację klienta. Konfiguracja zapisana w bazie danych w jednym
        // rekordzie, ale na ekranie powinniśmy wyświetlić dane pionowo
        
        // dictConfig_Query jest opisane w nagłówku klasy dla tego że to zapytanie 
        // wykorzystuje się w innych metodach. 
        
        //Parameter tylko jeden - Id CAS
        queryParams = new Vector(Arrays.asList(Integer.parseInt(id_cust)));
        //Odczytujemy rekord
        Vector<Vector> v_tableBody =
              GlobalData.oraSession.selectFirstRecordVertically(dictConfig_Query, queryParams, false);

        // Nazwy kolumn
        Vector<String> v_tableTitles = new Vector(Arrays.asList("Nazwa pola", "Zawartość"));
        // Dla edycji - 2 kolumna
        Vector<Integer> v_tableEditEnable = new Vector(Arrays.asList(1));
        //Pokazujemy tablicę
        dictionaryTable.setModel(new YPTableModel(v_tableBody, v_tableTitles, v_tableEditEnable));
        // "Przyciemniamy pierwszą kolumnę
        dictionaryTable.getColumnModel().getColumn(0).setCellRenderer(
                new YPTableCellRenderer(0, dictionaryTable.getTableHeader().getBackground()));
    }

    private void PrepareAndShowDictScreens(String id_cust, String product, String platnik) {
        // Wyświetlamy dane do zaznaczenia widocznych lub nie widocznych pól edycji
        // przesyłki, którzy powinni być dostepne w aplikacji klientskiej Cas
        String dictScreens_Query =
                "select d.id_services as \"ID\"," +
                       "d.id_label as \"Pole\"," +
                        "l.description as \"Opis\"," +
                        "l.name_label as \"Nazwa\"," +
                        "d.visible as \"Widocznosc\" " +
                "from dict_screens d,dict_labels l " +
                "where d.id_cust=? and " +
                      "d.id_label=l.ID_LABEL and " +
                      "id_services=(select id_services " +
                                   "from v_dict_services " +
                                   "where id_cust=? and " +
                                         "id_product=? and " +
                                         "id_pay=?)" +
                "order by d.id_label";
        queryParams = new Vector(Arrays.asList(Integer.parseInt(id_cust),Integer.parseInt(id_cust),product,platnik));

        YPFunctions.FillTableFromOra(dictScreens_Query,
                                     queryParams,
                                     0,
                                     99999,
                                     dictionaryTable,
                                     null,
                                     new Vector(Arrays.asList(5)),
                                     false,
                                     false,
                                     new Vector(Arrays.asList(4)),
                                     new Vector(Arrays.asList(0,1,2,3)),
                                     false);
    }

    private void ShowProductsAndPayers() {
        // Wypełniamy tablicę zdefiniowanych produktów i serwisów
        String query = "select ID_PRODUCT as \"Produkt\"," +
                       "des_pay as \"Platnik\"," +
                       "des_payable as \"Platnosc\"," +
                       "descr_ex as \"Ekspres\"," +
                       "descr_dr as \"Drobnica\"," +
                       "descr_pal as \"Palety\" "+
                "from v_dict_services " +
                "where id_cust=?";
        Vector pars = new Vector(Arrays.asList(Integer.parseInt(tfIdCas.getText())));

        YPFunctions.FillTableFromOra(query,
                                     pars,
                                     0,
                                     99999,
                                     tableProducts,
                                     new Vector(),
                                     new Vector(),
                                     false,
                                     false,
                                     new Vector(),
                                     null,
                                     false);
    }





    private void ShowDictionary(String idCust, String sqlTable, String product, String platnik) {
        // Dla każdej tablicy wywołujemy osobną metodę
        if (sqlTable.equals("Cennik Ekspresowy EX")) {
            PrepareAndShowCenEx(idCust,product,platnik);
        } else if (sqlTable.equals("Cennik Drobnicowy DR")) {
            PrepareAndShowCenDr(idCust,product,platnik);
        } else if (sqlTable.equals("Konfiguracja")) {
            PrepareAndShowDictConfig(idCust,product,platnik);
        }
//        else if (sqlTable.equals("DICT_DR")) {
//            PrepareAndShowDictDr(idCust,product,platnik);
//        }
//        else if (sqlTable.equals("DICT_EX")) {
//            PrepareAndShowDictEx(idCust,product,platnik);
//        }
//        else if (sqlTable.equals("Rabaty DR Liniowe")) {
//            PrepareAndShowDictDrRabLine(idCust,product,platnik);
//        } else if (sqlTable.equals("Rabaty Ekspresowe EX")) {
//            PrepareAndShowDictExRab(idCust,product,platnik);
//        }
//        else if (sqlTable.equals("DICT_EX_RAB_SERV")) {
//            PrepareAndShowDictExRabServ(idCust,product,platnik);
//        }
        else if (sqlTable.equals("Cennik palet")) {
            PrepareAndShowDictPal(idCust,product,platnik);
        }
//        else if (sqlTable.equals("Rabaty paletowe")) {
//            PrepareAndShowDictPalRab(idCust,product,platnik);
//        }
//        else if (sqlTable.equals("DICT_PAL_RAB_DISTANCE")) {
//            PrepareAndShowDictPalRabDistance(idCust,product,platnik);
//        }
//        else if (sqlTable.equals("DICT_PAL_RAB_LINE")) {
//            PrepareAndShowDictPalRabLine(idCust,product,platnik);
//        }
        else if (sqlTable.equals("Produkty, płatnicy")) {
            ShowProductsAndPayers();
//            PrepareAndShowDictServices(idCust,product,platnik);
        } else if (sqlTable.equals("Pola formularza")) {
            PrepareAndShowDictScreens(idCust,product,platnik);
        }
    }

    private void showDictionaryQueryScreen()
    {
        this.scrollPanelDictionaryTable.setVisible(true);
        this.panelProduktyPlatnicy.setVisible(false);
        // Odczytujemy nazwę słownika
        String sqlTable = (String) cbDictionaries.getSelectedItem();
        // Jeśli nazwa jest pusta
        if (sqlTable.trim().equals("")) {
           comboProducts.setEnabled(false);
           comboPlatnik.setEnabled(false);
           jbShow.setEnabled(false);
        } 
        // Inaczej
        else {
              // Tworzymy zbiór słowników, dane w których zależą od
              // produktu i płatnika. Jeśli nie zależą, to nie udostepniamy
              // wyboru
              Set setPriceOptions = new HashSet(Arrays.asList(
//                                                              "DICT_EX",
//                                                              "DICT_DR",
//                                                              "Rabaty DR Liniowe",
//                                                              "Rabaty Ekspresowe EX",
//                                                              "DICT_EX_RAB_SERV",
                                                              "Cennik palet",
//                                                              "Rabaty paletowe",
//                                                              "DICT_PAL_RAB_DISTANCE",
//                                                              "DICT_PAL_RAB_LINE",
                                                              "Pola formularza",
//                                                              "Produkty, płatnicy",
                                                              "Cennik Ekspresowy EX",
                                                              "Cennik Drobnicowy DR"
                                                              ));
              comboProducts.setEnabled(setPriceOptions.contains(sqlTable));
              comboPlatnik.setEnabled(setPriceOptions.contains(sqlTable));
              jbShow.setEnabled(true);
        }
        jpOpcje.setVisible(false);
        // Nie udostępniamy operacji na słownikack dopóki nie będzie kliknięty
        // przycisk "Pokaż"
        jbDeleteRecord.setEnabled(false);
        jbAddRecord.setEnabled(false);
        jbDeleteColumn.setEnabled(false);
        jbAddColumn.setEnabled(false);
        jbSave.setVisible(false);
        // Oczyszczamy tablicę dictionaryTable
        YPFunctions.clearContainer(dictionaryTable);
    }




    private void showDetailEnvironment() {
        // Pokazujemy treść przesłanego środowiska aplikacji klienta CAS
        // za odpowiedni dzień i czas
        int row = tableEnv.getSelectedRow();
        if (row != -1) {
            taEnv.setText(
                    GlobalData.oraSession.selectString(
                              "Select description " +
                              "from log_setup_app " +
                              "where id_cust=? and " +
                                    "date_connect = TO_DATE(?, 'YYYY-MM-DD HH24:MI:SS')",
                    new Vector(Arrays.asList(
                                iIdCas,
                                YPFunctions.strGet(tableEnv,row, 0))),
                    ""));
            taEnv.setCaretPosition(0);
        } else {
            taEnv.setText("");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable activityTable;
    private javax.swing.JButton butAll;
    private javax.swing.JButton butApp;
    private javax.swing.JButton butApsHubs;
    private javax.swing.JButton butCenDR;
    private javax.swing.JButton butCenEX;
    private javax.swing.JButton butCenPal;
    private javax.swing.JButton butConf;
    private javax.swing.JButton butDist;
    private javax.swing.JButton butNumbers;
    private javax.swing.JButton butPC;
    private javax.swing.JButton butServices;
    private javax.swing.JComboBox cbDictionaries;
    private javax.swing.JCheckBox cbImportActivation;
    private javax.swing.JCheckBox cbImportProducts;
    private javax.swing.JCheckBox cbZleceniodawca;
    private javax.swing.JCheckBox checkConvert;
    private javax.swing.JCheckBox checkDefault;
    private javax.swing.JCheckBox checkEditSAP;
    private javax.swing.JCheckBox checkImport;
    private javax.swing.JComboBox comboApp;
    private javax.swing.JComboBox comboDepotDR;
    private javax.swing.JComboBox comboDepotEX;
    private javax.swing.JComboBox comboHttpMode;
    private javax.swing.JComboBox comboOpiekun;
    private javax.swing.JComboBox comboPlatnik;
    private javax.swing.JComboBox comboProducts;
    private javax.swing.JComboBox comboRangeLP;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JTable dictionaryTable;
    private javax.swing.JPanel downPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JButton jbAddColumn;
    private javax.swing.JButton jbAddFromSAP;
    private javax.swing.JButton jbAddRecord;
    private javax.swing.JButton jbAddRecord1;
    private javax.swing.JButton jbConvert;
    private javax.swing.JButton jbCopyFromKlSap;
    private javax.swing.JButton jbDefault;
    private javax.swing.JButton jbDel;
    private javax.swing.JButton jbDeleteColumn;
    private javax.swing.JButton jbDeleteRecord;
    private javax.swing.JButton jbDeleteRecord1;
    private javax.swing.JButton jbDiscount;
    private javax.swing.JButton jbDrOptions;
    private javax.swing.JButton jbEditRecord;
    private javax.swing.JButton jbGetSAPData;
    private javax.swing.JButton jbImport;
    private javax.swing.JButton jbOthersOk;
    private javax.swing.JButton jbSave;
    private javax.swing.JButton jbSaveActivation;
    private javax.swing.JButton jbSaveInstall;
    private javax.swing.JButton jbSaveOpiekun;
    private javax.swing.JButton jbSaveReset;
    private javax.swing.JButton jbSaveSAP;
    private javax.swing.JButton jbSaveSenders;
    private javax.swing.JButton jbSaveSynchronization;
    private javax.swing.JButton jbSaveWindows;
    private javax.swing.JButton jbSaveZlec;
    private javax.swing.JButton jbShow;
    private javax.swing.JButton jbShowShipments;
    private javax.swing.JButton jbStartImport;
    private javax.swing.JPanel jpActivation;
    private javax.swing.JPanel jpAddOpers;
    private javax.swing.JPanel jpAppEnv;
    private javax.swing.JPanel jpData;
    private javax.swing.JPanel jpDictionaryData;
    private javax.swing.JPanel jpGroupSenders;
    private javax.swing.JPanel jpGroupSetSpec;
    private javax.swing.JPanel jpImport;
    private javax.swing.JPanel jpInstalation;
    private javax.swing.JPanel jpLogComm;
    private javax.swing.JPanel jpLogSynchro;
    private javax.swing.JPanel jpOpcje;
    private javax.swing.JPanel jpOthers;
    private javax.swing.JPanel jpPriceOptions;
    private javax.swing.JPanel jpPrices;
    private javax.swing.JPanel jpResetPassword;
    private javax.swing.JPanel jpReturnWarnings;
    private javax.swing.JPanel jpSenderList;
    private javax.swing.JPanel jpSetSpec;
    private javax.swing.JPanel jpSynchronization;
    private javax.swing.JPanel jpWindows;
    private javax.swing.JPanel panelConvert;
    private javax.swing.JPanel panelDefault;
    private javax.swing.JPanel panelImport;
    private javax.swing.JPanel panelProduktyPlatnicy;
    private javax.swing.JPanel panelSAP;
    private javax.swing.JScrollPane scrollPanelDictionaryTable;
    private javax.swing.JTable synchronizationTable;
    private javax.swing.JTextArea taEnv;
    private javax.swing.JTextArea taReturnWarnings;
    private javax.swing.JTabbedPane tabDetails;
    private javax.swing.JTable tableComm;
    private javax.swing.JTable tableEnv;
    private javax.swing.JTable tableProducts;
    private javax.swing.JTable tableSenders;
    private javax.swing.JTable tableSetSpec;
    private javax.swing.JTable tableSynchro;
    private javax.swing.JTable tableTotals;
    private javax.swing.JTable tableWindows;
    private javax.swing.JTextField tfCity;
    private javax.swing.JTextField tfDataInst;
    private javax.swing.JTextField tfDataSynchr;
    private javax.swing.JTextField tfFullName;
    private javax.swing.JTextField tfHouse;
    private javax.swing.JTextField tfIdCas;
    private javax.swing.JTextField tfIdSAP;
    private javax.swing.JTextField tfInstCity;
    private javax.swing.JTextField tfInstCity1;
    private javax.swing.JTextField tfInstHouse1;
    private javax.swing.JTextField tfInstName;
    private javax.swing.JTextField tfInstName1;
    private javax.swing.JTextField tfInstPostCode1;
    private javax.swing.JTextField tfInstStreet;
    private javax.swing.JTextField tfInstStreet1;
    private javax.swing.JTextField tfInstTel;
    private javax.swing.JTextField tfInstTel1;
    private javax.swing.JTextField tfInstWarnings;
    private javax.swing.JTextField tfInstWarnings1;
    private javax.swing.JTextField tfKurier;
    private javax.swing.JTextField tfNIP;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfNewBank;
    private javax.swing.JTextField tfNewCity;
    private javax.swing.JTextField tfNewHouse;
    private javax.swing.JTextField tfNewIdSAP;
    private javax.swing.JTextField tfNewNIP;
    private javax.swing.JTextField tfNewName;
    private javax.swing.JTextField tfNewPostCode;
    private javax.swing.JTextField tfNewRach;
    private javax.swing.JTextField tfNewShort;
    private javax.swing.JTextField tfNewStreet;
    private javax.swing.JTextField tfNewTel;
    private javax.swing.JTextField tfOperatorName;
    private javax.swing.JTextField tfOpiekun;
    private javax.swing.JTextField tfPostCode;
    private javax.swing.JTextField tfProgName;
    private javax.swing.JTextField tfSourceIdCust;
    private javax.swing.JTextField tfStreet;
    private javax.swing.JTextField tfTelephone;
    private javax.swing.JTextField tfVersion;
    private javax.swing.JTextField tfZlecCity;
    private javax.swing.JTextField tfZlecHouse;
    private javax.swing.JTextField tfZlecName;
    private javax.swing.JTextField tfZlecPostCode;
    private javax.swing.JTextField tfZlecSap;
    private javax.swing.JTextField tfZlecShort;
    private javax.swing.JTextField tfZlecStreet;
    private javax.swing.JTextField tfZlecTel;
    private javax.swing.JTree tree;
    private javax.swing.JPanel upPanel;
    // End of variables declaration//GEN-END:variables
    private Integer iIdCas;
    private String sIdSap;
    private String terminal;
    private Date fromDate;
    private Date toDate;
    private Vector queryParams;
    private Date dateStart;
    private Vector vIdLabel;
    private Vector v_bChecked;
    private boolean bSapChecked;
    boolean bImpSelected;
    boolean bDefaultSelected;
    boolean bConversionSelected;
    String currentDepotEX;
    String currentDepotDR;
    String currentRangeLP;
    String currentProgName;
    String currentKurier;
    boolean depotDrExists;


    private String dictConfig_Query =
                "SELECT id_config, " +
                       "program_name, " +
                       "kurier, " +
                       "ready_email, " +
                       "address_helpdesk1," +
                       "address_helpdesk2," +
                       "address_data, " +
                       "read_laser_prn, " +
                       "ready_pdf_prn," +
                       "craddle_port," +
                       "craddle_baud_rate," +
                       "server_pds_path," +
                       "term_port," +
                       "term_printer," +
                       "prn_prices," +
                       "prn_ubezp," +
                       "l_n_shortname," +
                       "l_n_name," +
                       "l_n_addr_zipcode," +
                       "l_n_addr_city," +
                       "l_n_addr_street," +
                       "l_n_addr_streetno," +
                       "l_n_telephone," +
                       "l_n_nip," +
                       "l_n_bank," +
                       "l_n_rachunek," +
                       "l_z_id_sap," +
                       "l_z_shortname," +
                       "l_z_name," +
                       "l_z_addr_zipcode," +
                       "l_z_addr_city," +
                       "l_z_addr_street," +
                       "l_z_addr_streetno," +
                       "l_z_telephone," +
                       "l_z_nip," +
                       "l_z_bank," +
                       "l_z_rachunek," +
                       "matrixah_x," +
                       "matrixah_y," +
                       "matrixpw_x," +
                       "matrixpw_y," +
                       "matrixcode," +
                       "matrixpw_small," +
                       "temppath " +
                "FROM dict_config " +
                "where id_cust = ?";

}
