/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LoadDictDialog.java
 *
 * Created on 2016-12-15, 08:33:37
 */
package casadmin;

import java.util.Arrays;
import java.util.Vector;
import javax.swing.text.BadLocationException;

/**
 *
 * @author lpylypch
 */
public class LoadDictDialog extends javax.swing.JDialog {

    /** Creates new form LoadDictDialog */
    private int widthCount;
    private int heightCount;
    private Vector distances;
    private int dictIndex;
            
    public LoadDictDialog(java.awt.Frame parent, boolean modal, int pDictIndex, int pWidthCount, int pHeightCount, Vector pDistances) {
        super(parent, modal);
        initComponents();
        dictIndex = pDictIndex;
        if (this.dictIndex == 1) // DR
        {
            widthCount = pWidthCount;
            heightCount = pHeightCount;
        }
        else
        {
            widthCount = pHeightCount;
            heightCount = pWidthCount;
        }
        distances = pDistances;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaData = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(casadmin.CasAdminApp.class).getContext().getResourceMap(LoadDictDialog.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setName("Form"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 320, 81, -1));

        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        jPanel1.add(okButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 320, 87, -1));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jtaData.setColumns(20);
        jtaData.setRows(5);
        jtaData.setName("jtaData"); // NOI18N
        jScrollPane1.setViewportView(jtaData);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 460, 230));

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 470, 80));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // Wcisniety "Anuluj"
        setVisible(false);
        dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    if (this.dictIndex == 1) // DR
    {
        int linesCount = 0;
        String text = jtaData.getText();
        String[] tokens = text.split("\n");
        for (String s : tokens)
        {
            if (!s.replace("\t", "").replace(" ", "").replace("\r", "").replace("\n", "").trim().equals(""))
                linesCount++;
       }

        if (linesCount != this.heightCount - 1) // otdzielnie kolumna nazw
        {
            YPFunctions.showErrorMessage("Ilość linijek powinna być " + Integer.toString(this.heightCount));
        }
        boolean bIsError = false;
        try{// Traverse the text in the JTextArea line by line
            for(int i = 0; i < linesCount; i ++){
                int start = jtaData.getLineStartOffset(i);
                int end = jtaData.getLineEndOffset(i);
                String line = jtaData.getText(start, end-start).replace("\t", "").replace(" ", "").replace("\r", "").replace("\n", "").trim();
                String[] items = line.split(",");
                if (items.length != this.widthCount)
                {
                    bIsError = true;
                    YPFunctions.showErrorMessage("linia " + line + 
                                                " zawiera " + Integer.toString(items.length) +
                                                " liczb, powinno być " + Integer.toString(this.widthCount));
                   break;
                }
                for (int j = 0; j < items.length; j++)
                {
                    if (!YPFunctions.isInteger(items[j]))
                    {
                        bIsError = true;
                        YPFunctions.showErrorMessage("ciąg " + items[j] + 
                                                    " nie jest liczbą");
                        break;
                    }
                }

            }

            if (bIsError)
            {
                YPFunctions.showErrorMessage("Import nie zostanie wykonany");
            }
            else
            {
                data = new Vector();
                String[][] arrData = new String[widthCount][linesCount + 1];
                for (int i = 0; i < distances.size(); i++)
                    arrData[i][0] = distances.elementAt(i).toString();

                for(int i = 0; i < linesCount; i ++){
                    int start = jtaData.getLineStartOffset(i);
                    int end = jtaData.getLineEndOffset(i);
                    String line = jtaData.getText(start, end-start).replace("\t", "").replace(" ", "").replace("\r", "").replace("\n", "").trim();
                    String[] items = line.split(",");
                    for (int j = 0; j < items.length; j++)
                    {
                        if (this.dictIndex == 1) // DR
                        {
                            arrData[j][i + 1] = items[j];
                        }
                        else
                        {
                            arrData[i][j + 1] = items[j];
                        }
                    }
                }

                for (int i = 0; i < distances.size(); i++)
                {
                    Vector v = new Vector();
                    for (int j = 0; j < linesCount + 1; j++)
                        v.add(arrData[i][j]);
                    data.add(v);
                }
                setVisible(false);
                dispose();
            }
        }catch(BadLocationException e){
            // Handle exception as you see fit
        }
    }
    else // Palety
    {
        int linesCount = 0;
        String text = jtaData.getText();
        String[] tokens = text.split("\n");
        for (String s : tokens)
        {
            if (!s.replace("\t", "").replace(" ", "").replace("\r", "").replace("\n", "").trim().equals(""))
                linesCount++;
       }

        if (linesCount != this.heightCount)
        {
            YPFunctions.showErrorMessage("Ilość linijek powinna być " + Integer.toString(this.heightCount));
        }
        boolean bIsError = false;
        try{// Traverse the text in the JTextArea line by line
            for(int i = 0; i < linesCount; i ++){
                int start = jtaData.getLineStartOffset(i);
                int end = jtaData.getLineEndOffset(i);
                String line = jtaData.getText(start, end-start).replace("\t", "").replace(" ", "").replace("\r", "").replace("\n", "").trim();
                String[] items = line.split(",");
                if (items.length != this.widthCount - 1)
                {
                    bIsError = true;
                    YPFunctions.showErrorMessage("linia " + line + 
                                                " zawiera " + Integer.toString(items.length) +
                                                " liczb, powinno być " + Integer.toString(this.widthCount));
                   break;
                }
                for (int j = 0; j < items.length; j++)
                {
                    if (!YPFunctions.isInteger(items[j]))
                    {
                        bIsError = true;
                        YPFunctions.showErrorMessage("ciąg " + items[j] + 
                                                    " nie jest liczbą");
                        break;
                    }
                }

            }

            if (bIsError)
            {
                YPFunctions.showErrorMessage("Import nie zostanie wykonany");
            }
            else
            {
                data = new Vector();
                String[][] arrData = new String[linesCount][widthCount + 1];
                for (int i = 0; i < distances.size(); i++)
                    arrData[i][0] = distances.elementAt(i).toString();

                for(int i = 0; i < linesCount; i ++){
                    int start = jtaData.getLineStartOffset(i);
                    int end = jtaData.getLineEndOffset(i);
                    String line = jtaData.getText(start, end-start).replace("\t", "").replace(" ", "").replace("\r", "").replace("\n", "").trim();
                    String[] items = line.split(",");
                    for (int j = 0; j < items.length; j++)
                    {
                        arrData[i][j + 1] = items[j];
                    }
                }

                for (int i = 0; i < distances.size(); i++)
                {
                    Vector v = new Vector();
                    for (int j = 0; j < widthCount; j++)
                        v.add(arrData[i][j]);
                    data.add(v);
                }
                setVisible(false);
                dispose();
            }
        }catch(BadLocationException e){
            // Handle exception as you see fit
        }
    }
}//GEN-LAST:event_okButtonActionPerformed

private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        setVisible(false);
        dispose();
}//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoadDictDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoadDictDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoadDictDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoadDictDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                LoadDictDialog dialog = new LoadDictDialog(new javax.swing.JFrame(), true, 1, 0, 0, new Vector());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jtaData;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
    public Vector<Vector> data = null;
}
