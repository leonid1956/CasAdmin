package casadmin;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import oracle.jdbc.OracleTypes;

public class EditStandardPricePanel extends javax.swing.JPanel {

    public EditStandardPricePanel() {
        initComponents();
            // ComboBox cbDictionaries jest wypełniony na etapie projektowania,
            // wybieramy pierwszą pozycje.
            jpLoadDict.setVisible(false);
            cbDictionaries.setSelectedIndex(0);
            // Wypełniamy ComboBox "Produkt" nazwami produktów
            Vector<Vector<String> > v =
                    GlobalData.oraSession.selectAllRecordsToVector("Select ID_PRODUCT from DICT_PRODUCTS",null);
            comboProducts.removeAllItems();
            Iterator it = v.iterator();
            while (it.hasNext()) {
                Vector<String> vTemp = (Vector<String>) it.next();
                comboProducts.addItem(vTemp.elementAt(0));
            }
            // Wypełniamy ComboBox "Płatnik" nazwami płatników
            v = GlobalData.oraSession.selectAllRecordsToVector("Select ID_PAY from DICT_PAY",null);
            comboPlatnik.removeAllItems();
            it = v.iterator();
            while (it.hasNext()) {
                Vector<String> vTemp = (Vector<String>) it.next();
                comboPlatnik.addItem(vTemp.elementAt(0));
            }

            // Standardowy produkt dla CAS - to "AH"
            comboProducts.setSelectedItem("AH");
            // Standardowy płatnik - "N" - nadawca
            comboPlatnik.setSelectedItem("N");
            // Przygotowyjemy ekran do wyświetlenia danych wybranego słownika
            showDictionaryQueryScreen();
    }

    private void showDictionaryQueryScreen()
    {
        // Odczytujemy nazwę słownika
        String sqlTable = (String) cbDictionaries.getSelectedItem();
        // Jeśli nazwa jest pusta
        if (sqlTable.trim().equals("")) {
           comboProducts.setEnabled(false);
           comboPlatnik.setEnabled(false);
           jbShow.setEnabled(false);
        }
        // Inaczej
        else {
              // Tworzymy zbiór słowników, dane w których zależą od
              // produktu i płatnika. Jeśli nie zależą, to nie udostepniamy
              // wyboru
              Set setPriceOptions = new HashSet(Arrays.asList(
                                                              "Cennik palet",
                                                              "Cennik Ekspresowy EX",
                                                              "Cennik Drobnicowy DR"
                                                              ));
              comboProducts.setEnabled(setPriceOptions.contains(sqlTable));
              comboPlatnik.setEnabled(setPriceOptions.contains(sqlTable));
              jbShow.setEnabled(true);
        }
        jpOpcje.setVisible(false);
        // Nie udostępniamy operacji na słownikack dopóki nie będzie kliknięty
        // przycisk "Pokaż"
        jbDeleteRecord.setEnabled(false);
        jbAddRecord.setEnabled(false);
        jbDeleteColumn.setEnabled(false);
        jbAddColumn.setEnabled(false);
        jbSave.setVisible(false);
        // Oczyszczamy tablicę dictionaryTable
        YPFunctions.clearContainer(dictionaryTable);
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        upPanel = new javax.swing.JPanel();
        jpPriceOptions1 = new javax.swing.JPanel();
        comboProducts = new javax.swing.JComboBox();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        comboPlatnik = new javax.swing.JComboBox();
        jbShow = new javax.swing.JButton();
        cbDictionaries = new javax.swing.JComboBox();
        downPanel = new javax.swing.JPanel();
        jpPrices = new javax.swing.JPanel();
        jSplitPane5 = new javax.swing.JSplitPane();
        jPanel12 = new javax.swing.JPanel();
        jpAddOpers = new javax.swing.JPanel();
        jbDeleteRecord = new javax.swing.JButton();
        jbAddRecord = new javax.swing.JButton();
        jbDeleteColumn = new javax.swing.JButton();
        jbAddColumn = new javax.swing.JButton();
        jbSave = new javax.swing.JButton();
        jpOpcje = new javax.swing.JPanel();
        jbDrOptions = new javax.swing.JButton();
        jbDiscount = new javax.swing.JButton();
        jpLoadDict = new javax.swing.JPanel();
        jbLoadDict = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        scrollPanelDictionaryTable = new javax.swing.JScrollPane();
        dictionaryTable = new javax.swing.JTable();

        setName("Form"); // NOI18N
        setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane1.setDividerLocation(100);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(casadmin.CasAdminApp.class).getContext().getResourceMap(EditStandardPricePanel.class);
        upPanel.setBackground(resourceMap.getColor("upPanel.background")); // NOI18N
        upPanel.setName("upPanel"); // NOI18N
        upPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpPriceOptions1.setBackground(resourceMap.getColor("jpPriceOptions1.background")); // NOI18N
        jpPriceOptions1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jpPriceOptions1.border.title"))); // NOI18N
        jpPriceOptions1.setName("jpPriceOptions1"); // NOI18N
        jpPriceOptions1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        comboProducts.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboProducts.setName("comboProducts"); // NOI18N
        jpPriceOptions1.add(comboProducts, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 80, -1));

        jLabel24.setText(resourceMap.getString("jLabel24.text")); // NOI18N
        jLabel24.setName("jLabel24"); // NOI18N
        jpPriceOptions1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, -1, 20));

        jLabel25.setText(resourceMap.getString("jLabel25.text")); // NOI18N
        jLabel25.setName("jLabel25"); // NOI18N
        jpPriceOptions1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, -1, 20));

        comboPlatnik.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboPlatnik.setName("comboPlatnik"); // NOI18N
        jpPriceOptions1.add(comboPlatnik, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 50, 80, -1));

        jbShow.setText(resourceMap.getString("jbShow.text")); // NOI18N
        jbShow.setName("jbShow"); // NOI18N
        jbShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbShowActionPerformed(evt);
            }
        });
        jpPriceOptions1.add(jbShow, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 50, 140, -1));

        cbDictionaries.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cennik Ekspresowy EX", "Cennik Drobnicowy DR", "Cennik palet" }));
        cbDictionaries.setName("cbDictionaries"); // NOI18N
        cbDictionaries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDictionariesActionPerformed(evt);
            }
        });
        jpPriceOptions1.add(cbDictionaries, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 140, -1));

        upPanel.add(jpPriceOptions1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 780, 80));

        jSplitPane1.setTopComponent(upPanel);

        downPanel.setBackground(resourceMap.getColor("downPanel.background")); // NOI18N
        downPanel.setName("downPanel"); // NOI18N
        downPanel.setLayout(new java.awt.GridLayout(1, 0));

        jpPrices.setBackground(resourceMap.getColor("jpPrices.background")); // NOI18N
        jpPrices.setName("jpPrices"); // NOI18N
        jpPrices.setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane5.setDividerLocation(160);
        jSplitPane5.setName("jSplitPane5"); // NOI18N

        jPanel12.setBackground(resourceMap.getColor("jPanel12.background")); // NOI18N
        jPanel12.setName("jPanel12"); // NOI18N
        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpAddOpers.setBackground(resourceMap.getColor("jpAddOpers.background")); // NOI18N
        jpAddOpers.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jpAddOpers.border.title"))); // NOI18N
        jpAddOpers.setName("jpAddOpers"); // NOI18N
        jpAddOpers.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jbDeleteRecord.setText(resourceMap.getString("jbDeleteRecord.text")); // NOI18N
        jbDeleteRecord.setName("jbDeleteRecord"); // NOI18N
        jbDeleteRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteRecordActionPerformed(evt);
            }
        });
        jpAddOpers.add(jbDeleteRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 140, -1));

        jbAddRecord.setText(resourceMap.getString("jbAddRecord.text")); // NOI18N
        jbAddRecord.setName("jbAddRecord"); // NOI18N
        jbAddRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddRecordActionPerformed(evt);
            }
        });
        jpAddOpers.add(jbAddRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 140, -1));

        jbDeleteColumn.setText(resourceMap.getString("jbDeleteColumn.text")); // NOI18N
        jbDeleteColumn.setName("jbDeleteColumn"); // NOI18N
        jbDeleteColumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteColumnActionPerformed(evt);
            }
        });
        jpAddOpers.add(jbDeleteColumn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 140, -1));

        jbAddColumn.setText(resourceMap.getString("jbAddColumn.text")); // NOI18N
        jbAddColumn.setName("jbAddColumn"); // NOI18N
        jbAddColumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddColumnActionPerformed(evt);
            }
        });
        jpAddOpers.add(jbAddColumn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 140, -1));

        jPanel12.add(jpAddOpers, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 140));

        jbSave.setText(resourceMap.getString("jbSave.text")); // NOI18N
        jbSave.setName("jbSave"); // NOI18N
        jbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActionPerformed(evt);
            }
        });
        jPanel12.add(jbSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 140, 30));

        jpOpcje.setBackground(resourceMap.getColor("jpOpcje.background")); // NOI18N
        jpOpcje.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jpOpcje.border.title"))); // NOI18N
        jpOpcje.setName("jpOpcje"); // NOI18N
        jpOpcje.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jbDrOptions.setText(resourceMap.getString("jbDrOptions.text")); // NOI18N
        jbDrOptions.setName("jbDrOptions"); // NOI18N
        jpOpcje.add(jbDrOptions, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 140, -1));

        jbDiscount.setText(resourceMap.getString("jbDiscount.text")); // NOI18N
        jbDiscount.setName("jbDiscount"); // NOI18N
        jbDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDiscountActionPerformed(evt);
            }
        });
        jpOpcje.add(jbDiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 140, -1));

        jPanel12.add(jpOpcje, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 160, 80));

        jpLoadDict.setBackground(resourceMap.getColor("jpLoadDict.background")); // NOI18N
        jpLoadDict.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jpLoadDict.border.title"))); // NOI18N
        jpLoadDict.setName("jpLoadDict"); // NOI18N
        jpLoadDict.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jbLoadDict.setText(resourceMap.getString("jbLoadDict.text")); // NOI18N
        jbLoadDict.setName("jbLoadDict"); // NOI18N
        jbLoadDict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLoadDictActionPerformed(evt);
            }
        });
        jpLoadDict.add(jbLoadDict, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 140, -1));

        jPanel12.add(jpLoadDict, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 160, 60));

        jSplitPane5.setLeftComponent(jPanel12);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        scrollPanelDictionaryTable.setName("scrollPanelDictionaryTable"); // NOI18N

        dictionaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        dictionaryTable.setCellSelectionEnabled(true);
        dictionaryTable.setName("dictionaryTable"); // NOI18N
        scrollPanelDictionaryTable.setViewportView(dictionaryTable);

        jPanel1.add(scrollPanelDictionaryTable);

        jSplitPane5.setRightComponent(jPanel1);

        jpPrices.add(jSplitPane5);

        downPanel.add(jpPrices);

        jSplitPane1.setRightComponent(downPanel);

        add(jSplitPane1);
    }// </editor-fold>//GEN-END:initComponents

    private void jbDeleteRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteRecordActionPerformed
        // Użytkownik chce usunąć istniejącą linijkę tablicy
        // Sprawdzamy czy użytkownik zaznaczył jakąś linijkę tablicy
        int row = dictionaryTable.getSelectedRow();
        if (row == -1) {
            YPFunctions.showErrorMessage("Nie zaznaczona linijka tablicy");
            //            JOptionPane.showMessageDialog(null, "Nie zaznaczona linijka tablicy","Błąd",JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Korzystamy z własnego modelu tablicy i metody deleteRow
        ((YPTableModel)dictionaryTable.getModel()).deleteRow(row);
        // Odnawiamy tablicę
        dictionaryTable.repaint();
}//GEN-LAST:event_jbDeleteRecordActionPerformed

    private void jbAddRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddRecordActionPerformed
        // Użytkownik chce dodać linijkę do istniejącej tablicy
        // Prośimy o wpisanie klucza linijki (t.zn. wartości pierwszej komórki linijki)
        String ret = YPFunctions.showInputDialog("Wprowadź klucz linijki tablicy","Klucz linijki tablicy");
        if (ret.equals("")) {
            YPFunctions.showErrorMessage("Nie prawidłowy klucz linijki tablicy");
            //            JOptionPane.showMessageDialog(null, "Nie prawidłowy klucz linijki tablicy", "Błąd", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Tworzymy wektor
        Vector vNewLine = new Vector();
        // Wypełniamy go "pustymi" wartościami oprócz pierwszego elementa
        for (int i = 0; i < dictionaryTable.getColumnCount(); i++) {
            if (i==0)
                vNewLine.add(ret);
            else
                vNewLine.add("");
        }
        // Dodajemy do tablicy przygotowany wektor
        // Korzystamy z własnego modelu tablicy i metody appendRow
        ((YPTableModel)dictionaryTable.getModel()).appendRow(vNewLine);
        // Odnawiamy tablicę
        dictionaryTable.repaint();
}//GEN-LAST:event_jbAddRecordActionPerformed

    private void jbDeleteColumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteColumnActionPerformed
        // Użytkownik chce usunąć kolumnę z istniejącej tablicy
        // Prośimy o wpisanie nazwy kolumny do usunięcia
        String ret = YPFunctions.showInputDialog("Wprowadź nazwę kolumny do usunięcia", "Nazwa kolumny");
        // nazwa kolumny nie została wprowadzona
        if (ret.equals("")) {
            YPFunctions.showErrorMessage("Nie wprowadzona nazwa kolumny tablicy");
            //            JOptionPane.showMessageDialog(null, "Nie wprowadzona nazwa kolumny tablicy", "Błąd", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            // Odczytujemy nagłówki kolumn do wektora
            Vector<String> v = ((YPTableModel)dictionaryTable.getModel()).getColumnNames();
            // Szukamy pozycję wprowadzonej nazwy kolumny w wktorze
            int pos = v.indexOf(ret);
            // Jeśli nie znaleziono
            if (pos == -1) {
                YPFunctions.showErrorMessage("Nie prawidłowa nazwa kolumny tablicy");
                //                JOptionPane.showMessageDialog(null, "Nie prawidłowa nazwa kolumny tablicy", "Błąd", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Inaczej usuwamy kolumnę z numeren pos
            // Korzystamy z własnego modelu tablicy i metody deleteColumn
            ((YPTableModel)dictionaryTable.getModel()).deleteColumn(pos);
            // Odnawiamy tablicę
            dictionaryTable.repaint();
        }
}//GEN-LAST:event_jbDeleteColumnActionPerformed

    private void jbAddColumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddColumnActionPerformed
        // Użytkownik chce dodać kolumnę do istniejącej tablicy
        // Prośimy o wpisanie nazwy nowej kolumny
        String ret = YPFunctions.showInputDialog("Wprowadź nazwę nowej kolumny","Nazwa kolumny");
        // nazwa kolumny nie została wprowadzona
        if (ret.equals("")) {
            YPFunctions.showErrorMessage("Nie wprowadzona nazwa kolumny tablicy");
            //            JOptionPane.showMessageDialog(null, "Nie wprowadzona nazwa kolumny tablicy", "Błąd", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            // Inaczej dodajemy nową kolumnę z nagłowkiem ret
            // Korzystamy z własnego modelu tablicy i metody insertColumn
            ((YPTableModel)dictionaryTable.getModel()).insertColumn(ret,"");
            // Odnawiamy tablicę
            dictionaryTable.repaint();
        }
}//GEN-LAST:event_jbAddColumnActionPerformed

    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
        // Nacisnięty przycisk "Zapisz zmiany" w zakładce "Słowniki/Cenniki"
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        // Jeśli tablica jest w trybie edytowania danych, to zapisujemy zmiany
        // w tablice.
        if (dictionaryTable.isEditing()) {
            dictionaryTable.getCellEditor().stopCellEditing();
        }
        // w zależności od nazwy tablicy wykonujemy odpowiednią metodę.
        String sqlTable = (String) cbDictionaries.getSelectedItem();
        if (sqlTable.equals("Cennik Ekspresowy EX")) {
            SaveCenExStd();
            GlobalData.oraSession.SaveLog("Edycja cennika standardowego EX","");
        } else if (sqlTable.equals("Cennik Drobnicowy DR")) {
            SaveCenDrStd();
            GlobalData.oraSession.SaveLog("Edycja cennika standardowego DR","");
        }
        else if (sqlTable.equals("Cennik palet")) {
            SaveDictPalStd();
            GlobalData.oraSession.SaveLog("Edycja cennika standardowego paletowego","");
        }
        this.setCursor(java.awt.Cursor.getDefaultCursor());
}//GEN-LAST:event_jbSaveActionPerformed

 private void SaveDictPalStd() {
        if (dictionaryTable.isEditing()) {
            dictionaryTable.getCellEditor().stopCellEditing();
        }
        int count = 0;
        String data = "";
        
        try {
            for (int i = 0; i < dictionaryTable.getRowCount(); i++)
            {
                String s = YPFunctions.strGet(dictionaryTable,i, 0);
                if (!s.equals(""))
                {
                        data += Integer.parseInt(YPFunctions.strGet(dictionaryTable,i, 0)) + ";" +
                                YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 1)) + ";" +
                                YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 2)) + ";" +
                                YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 3)) + ";" +
                                YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 4)) + ";" +
                                YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 5)) + ";";
                        count++;
                }
            }
        } catch (Exception e) {
        }
        
        String s = (String)GlobalData.oraSession.executeFunction(
                   "MGR_DEFINE.F_UPDATE_DICT_PAL(?,?,?,?,?)",
                   new Vector(Arrays.asList(0, // IdCust = 0
                                            (String) comboPlatnik.getSelectedItem(), 
                                            (String) comboProducts.getSelectedItem(), 
                                            count, 
                                            data)), 
                   OracleTypes.VARCHAR); 
        if (! s.equals("OK")) {
           this.setCursor(java.awt.Cursor.getDefaultCursor());
           YPFunctions.showErrorMessage("Nie udało się wykonać ustawienie słowników [" + s + "]");
           return;
        }

/*     
     // Usuwamy poprzedni cennik
        String query = "Delete from dict_pal_std where id_pay=? and id_product=?";
        GlobalData.oraSession.executeQuery(query,
                new Vector(Arrays.asList((String) comboPlatnik.getSelectedItem(),
                                         (String) comboProducts.getSelectedItem())));
        // Dla wszystkich linijek tablicy
        for (int i = 0; i < dictionaryTable.getRowCount(); i++) {
            query = "Insert into dict_pal_std(distance,pal_a,pal_b,pal_b1,pal_b2,pal_c,id_pay,id_product) values(?,?,?,?,?,?,?,?)";
            Vector pars = new Vector(Arrays.asList(
                        Integer.parseInt(YPFunctions.strGet(dictionaryTable,i, 0)),
                        YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 1)),
                        YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 2)),
                        YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 3)),
                        YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 4)),
                        YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, 5)),
                        (String) comboPlatnik.getSelectedItem(),
                        (String) comboProducts.getSelectedItem()));
           GlobalData.oraSession.executeQuery(query,pars);
        }
 */
    }

    private void SaveCenDrStd() {
        // Cennik DICT_DR jest przedstawiony na ekranie nie liniowo, a jako tablica
        if (dictionaryTable.isEditing()) {
            dictionaryTable.getCellEditor().stopCellEditing();
        }
        int count = 0;
        String data = "";
        
        try {
            // Dla każdej linijki
            for (int i = 0; i < dictionaryTable.getRowCount(); i++) {
                // Dla każdej kolumny, oprócz pierwszej ( tam zapisana odległość )
                for (int j = 1; j < dictionaryTable.getColumnCount(); j++) {
                    String s = YPFunctions.strGet(dictionaryTable,i, 0);
                    if (!s.equals(""))
                    {
                            data += // Nagłówek kolumny "j" - tam zapisana waga
                                    Integer.parseInt((String)dictionaryTable.getTableHeader().getColumnModel().getColumn(j).getHeaderValue()) + ";" +
                                    // Tekst z pierwszej komórki tablicy - tam zapisana odległość
                                    Integer.parseInt(YPFunctions.strGet(dictionaryTable,i, 0)) + ";" +
                                    // Zawartość komórki (i,j) - zapisana kwota
                                    YPFunctions.nvlParseDouble(YPFunctions.strGet(dictionaryTable,i, j)) + ";";
                            count++;
                    }
                }
            }
        } catch (Exception e) {
        }
        
        String s = (String)GlobalData.oraSession.executeFunction(
                   "MGR_DEFINE.F_UPDATE_DICT_DR(?,?,?,?,?)",
                   new Vector(Arrays.asList(0, //Id Cust = 0
                                            (String) comboPlatnik.getSelectedItem(), 
                                            (String) comboProducts.getSelectedItem(), 
                                            count, 
                                            data)), 
                   OracleTypes.VARCHAR); 
        if (! s.equals("OK")) {
           this.setCursor(java.awt.Cursor.getDefaultCursor());
           YPFunctions.showErrorMessage("Nie udało się wykonać ustawienie słowników [" + s + "]");
           return;
        }
/*        
        
        
        
        
        
        
        
        
        // Usuwamy poprzedni cennik
        String query = "Delete from dict_dr_std where id_product=? and id_pay=?";
        GlobalData.oraSession.executeQuery(query,
                new Vector(Arrays.asList((String) comboProducts.getSelectedItem(),
                                         (String) comboPlatnik.getSelectedItem())));
        // Dla każdej linijki
        for (int i = 0; i < dictionaryTable.getRowCount(); i++) {
            // Dla każdej kolumny, oprócz pierwszej ( tam zapisana odległość )
            for (int j = 1; j < dictionaryTable.getColumnCount(); j++) {
                // Zapytanie
                query = "Insert into dict_dr_std values(?,?,?,?,?)";
                // Parametry
                Vector pars = new Vector(Arrays.asList(
                        // Nagłówek kolumny "j" - tam zapisana waga
                        Integer.parseInt((String)dictionaryTable.getTableHeader().getColumnModel().getColumn(j).getHeaderValue()),
                        // Tekst z pierwszej komórki tablicy - tam zapisana odległość
                        Integer.parseInt(YPFunctions.strGet(dictionaryTable,i, 0)),
                        // Zawartość komórki (i,j) - zapisana kwota
                        Integer.parseInt(YPFunctions.strGet(dictionaryTable,i, j)),
                        // Platnik
                        (String) comboPlatnik.getSelectedItem(),
                        // Produkt
                        (String) comboProducts.getSelectedItem()));
                // Wykonujemy zapytanie dla każdej komórki tablicy
                GlobalData.oraSession.executeQuery(query,pars);
            }
        }

 */
    }

   private void SaveCenExStd() {
        if (dictionaryTable.isEditing()) {
            dictionaryTable.getCellEditor().stopCellEditing();
        }
        int count = 0;
        String data = "";
        
        try {
            for (int i = 0; i < dictionaryTable.getRowCount(); i++)
            {
                String s = YPFunctions.strGet(dictionaryTable,i, 0);
                if (!s.equals(""))
                {
                        data += YPFunctions.strGet(dictionaryTable,i, 3).replace(';', ' ') + ";" +
                                YPFunctions.strGet(dictionaryTable,i, 0).replace(';', ' ') + ";";
                        count++;
                }
            }
        } catch (Exception e) {
        }
        
        String s = (String)GlobalData.oraSession.executeFunction(
                   "MGR_DEFINE.F_UPDATE_DICT_EX_STD(?,?,?,?)",
                   new Vector(Arrays.asList((String) comboPlatnik.getSelectedItem(), 
                                            (String) comboProducts.getSelectedItem(), 
                                            count, 
                                            data)), 
                   OracleTypes.VARCHAR); 
        if (! s.equals("OK")) {
           this.setCursor(java.awt.Cursor.getDefaultCursor());
           YPFunctions.showErrorMessage("Nie udało się wykonać ustawienie słowników [" + s + "]");
           return;
        }
       
/*       
       
       
        // Dla wszystkich linijek tablicy
        for (int i = 0; i < dictionaryTable.getRowCount(); i++) {
            GlobalData.oraSession.executeQuery(
                    "Update dict_ex_std set algol=? where id_product=? and id_pay=? and id_label=?",
                    new Vector(Arrays.asList(YPFunctions.strGet(dictionaryTable,i, 3),
                    (String) comboProducts.getSelectedItem(),
                    (String) comboPlatnik.getSelectedItem(),
                    YPFunctions.strGet(dictionaryTable,i, 0))));
        }
*/
   }


    private void jbShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbShowActionPerformed
        // Naciśnięty przycisk "Pokaż" w zakładce "Cenniki/Słowniki"
        YPFunctions.clearContainer(scrollPanelDictionaryTable);

        //Odczytujemy nazwę słownika
        String sqlTable = (String) cbDictionaries.getSelectedItem();
        // Definiujemy zbiór słowników, gdzie powinna być możliwość
        // dopisywania lub usuwania rekordów
        Set setAdditionalRecordOperations = new HashSet(Arrays.asList(
                "Cennik Drobnicowy DR",
                "Cennik palet"
                ));
        // Jeśli odczytana nazwa tablicy jest elementem zbioru, to udostępniamy
        // operację "Usuń rekord" i "Dodaj rekord"
        jbDeleteRecord.setEnabled(setAdditionalRecordOperations.contains(sqlTable));
        jbAddRecord.setEnabled(setAdditionalRecordOperations.contains(sqlTable));

        // Definiujemy zbiór słowników, gdzie powinna być możliwość
        // dopisywania lub usuwania kolumn
        Set setAdditionalColumnOperations = new HashSet(Arrays.asList(
                "Cennik Drobnicowy DR"
                ));
        // Jeśli odczytana nazwa tablicy jest elementem zbioru, to udostępniamy
        // operację "Usuń kolumnę" i "Dodaj kolumnę"
        jbDeleteColumn.setEnabled(setAdditionalColumnOperations.contains(sqlTable));
        jbAddColumn.setEnabled(setAdditionalColumnOperations.contains(sqlTable));
        // Pokazujemy słownik w tablice dictionaryTable
        ShowDictionary(sqlTable, (String) comboProducts.getSelectedItem(), (String) comboPlatnik.getSelectedItem());
        jpOpcje.setVisible(false);

        if (sqlTable.equals("Cennik Drobnicowy DR")) {
              // Przycisk z ustawieniem formuły robimy widocznym tylko dla cennika DR
               jpOpcje.setVisible(true);
               jbDrOptions.setEnabled(false);
               jbDiscount.setEnabled(false);
        }

        if (sqlTable.equals("Cennik Ekspresowy EX")) {
            jpOpcje.setVisible(true);
            jbDrOptions.setEnabled(false);
            jbDiscount.setEnabled(true);
        }

        if (sqlTable.equals("Cennik palet")) {
            jpOpcje.setVisible(true);
            jbDrOptions.setEnabled(false);
            jbDiscount.setEnabled(true);
        }

        jpLoadDict.setVisible(cbDictionaries.getSelectedIndex() > 0); // dla EX nie pokazujemy
        // Przycisk "Zapisz zmiany" robimy widocznym, zeby po edycji słowników
        // można było zapisać zmiany
        jbSave.setVisible(true);
        
    }//GEN-LAST:event_jbShowActionPerformed
    private void ShowDictionary(String sqlTable, String product, String platnik) {
        // Dla każdej tablicy wywołujemy osobną metodę
        if (sqlTable.equals("Cennik Ekspresowy EX")) {
            PrepareAndShowCenExStd(product,platnik);
        } else if (sqlTable.equals("Cennik Drobnicowy DR")) {
            PrepareAndShowCenDrStd(product,platnik);
        } else if (sqlTable.equals("Cennik palet")) {
            PrepareAndShowDictPalStd(product,platnik);
        }
    }

    private void PrepareAndShowDictPalStd(String product, String platnik) {
        // Wyświetlamy cennik dla przesyłek z paletami EUR
        String dictPal_Query =
                "select Distance as \"Odległość\"," +
                       "Pal_A as \"Pal_200\"," +
                       "Pal_B as \"Pal_400\"," +
                       "Pal_B1 as \"Pal_600\"," +
                       "Pal_B2 as \"Pal_800\"," +
                       "Pal_C as \"Pal_1000\" " +
                "from dict_pal_std " +
                "where id_pay=? and " +
                      "id_product=? " +
                "order by distance";

        Vector queryParams = new Vector(Arrays.asList(platnik, product));
        YPFunctions.FillTableFromOra(dictPal_Query,
                                     queryParams,
                                     0,
                                     99999,
                                     dictionaryTable,
                                     null,
                                     null,
                                     false,
                                     false,
                                     new Vector(Arrays.asList(1,2,3,4,5)),
                                     new Vector(Arrays.asList(0)),
                                     false);
    }

    private void PrepareAndShowCenDrStd(String product, String platnik) {
        // Cennik DICT_DR jest zapisany w tablice jako "odleglość - waga - kwota"
        // Takich rekordów (kombinacji "odległość - waga") jest dużo, dla tego warto ją
        // rozmieścić w formie tablicznej, t.zn. nagłówki kolumn będą osnaczali wagę,
        // a nagłówki linijek - odległość. Na skrzyżowaniach były by odpowiednie kwoty.
        // Takie rozmieczszenie pomogło by wyeliminować możliwe błędy, przy których na
        // skrzyżowaniach mogły by pojawić się "dziury", t.zn. brak jakiś rekordów
        // "waga-odleglość", które jest ciężko skontrolować.

        // Tworzymy puste wektory dla modelu tablicy
        Vector<Vector> v_tableBody  = new Vector();
        Vector<String> v_tableTitles  = new Vector();
        v_tableTitles.add("Odl./Waga");
        // Zawartość wektora komórek do edycji utworzy się dynamicznie
        Vector<Integer> v_tableEditEnable  = new Vector();

        // Parametry
        Vector queryParams = new Vector(Arrays.asList(product,platnik));

        // Ściągamy wszystkie wagi
        Vector<Vector<String> > v = GlobalData.oraSession.selectAllRecordsToVector(
                "SELECT distinct weight " +
                "FROM dict_dr_std " +
                "where " +
                      "id_product=? " +
                      "and id_pay=? " +
                "order by weight",
                queryParams);
        // Tworzymy mapę odpowiedników wagi i numeru kolumny
        Map<String, Integer> mapWeight = new HashMap<String, Integer>();
        // Zaczynamy od 1 kolumny, a nie od 0, zostawiamy miejsce dla nagłówków linijek
        int i = 1;
        Iterator it = v.iterator();
        while (it.hasNext()) {
            // Odczytujemy wagę
            String sWeight = ((Vector<String>) it.next()).elementAt(0);
            // zapisujemy do mapy waga->numer kolumny
            mapWeight.put(sWeight, i);
            // Dodajemy do wektora z numerami kolumn do edytowania numer kolumny
            v_tableEditEnable.add(i);
            // wagę zapisujemy do nagłówka bieżącej kolumny
            v_tableTitles.add(sWeight);
            // żwiększamy licznik kolumny
            i++;
        }

        // Ściągamy wszystkie odległości
        v = GlobalData.oraSession.selectAllRecordsToVector(
                "SELECT distinct distance " +
                "FROM dict_dr_std " +
                "where " +
                      "id_product=? and " +
                      "id_pay=? " +
                "order by distance",
                queryParams);

        // Tworzymy mapę odpowiedników odległości i numeru linijki
        Map<String, Integer> mapDistance = new HashMap<String, Integer>();
        // Zaczynamy od linijki z numerem 0
        i = 0;
        it = v.iterator();
        while (it.hasNext()) {
            // odczytujemy odległość
            String sDistance = ((Vector<String>) it.next()).elementAt(0);
            // zapisujemy do mapy odległość->numer linijki
            mapDistance.put(sDistance, i);
            // Odrazu tworzymy wektor, który będzie linijką tablicy
            Vector<String> vLine = new Vector();
            // pierwszy element wektora - odległość
            vLine.add(sDistance);
            // Długość wektora - ilość wag + 1
            // wszystkie pola wektora oprócz pierwszego wypełniamy "pustym" ciągiem
            for (int j = 1; j < mapWeight.size() + 1; j++) {
                vLine.add("");
            }
            // Dodajemy wektor do wektora modelu tablicy
            v_tableBody.add(vLine);
            // zwiększamy licznik i tak do końca iteratora
            i++;
        }
        // Teraz mamy tablicę, która ma nagłówki kolumn,
        // a w pierwszej kolumnie po wszystkich linijkach zapisane odległości.
        // Wszystkie inne komórki wypełnione ""

        // Przystąpimy do wypełniania pozostałych komórek
        // Odczytujemy wszystkie kombinację "odległość-waga-kwota"
        v = GlobalData.oraSession.selectAllRecordsToVector(
                "SELECT distance," +
                       "weight," +
                       "price " +
                "FROM dict_dr_std " +
                "where " +
                      "id_product=? and " +
                      "id_pay=?",
                queryParams);
        it = v.iterator();
        while (it.hasNext()) {
            // Odczytujemy każdą kolejną linijkę do wektora vFromDb
            Vector<String> vFromDb = (Vector<String>) it.next();
            // Odległość - pierwszy element wektora
            String keyDist = vFromDb.elementAt(0);
            // po mapie mapDistance szukamy numer linijki dla tej odległości
            int indexDist = mapDistance.get(keyDist);
            // Waga - drugi element wektora
            String keyWeight = vFromDb.elementAt(1);
            // po mapie mapWeight szukamy numer kolumny dla tej wagi
            int indexWeight = mapWeight.get(keyWeight);
            // Kwota - trzeci element wektora
            String price = vFromDb.elementAt(2);

            // Odczytujemy z ciała tablicy wektor z indeksem indexDist
            Vector<String> vLine = v_tableBody.elementAt(indexDist);
            // Podmieniamy element z indeksem indexWeight na odczytana kwotę
            vLine.set(indexWeight, price);
            // zapisujemy z powrotem wyciagnięty i zmodyfikowany wektor
            v_tableBody.set(indexDist, vLine);
        }
        // Wyświetlamy tablicę
        dictionaryTable.setModel(new YPTableModel(v_tableBody, v_tableTitles, v_tableEditEnable));
        if (dictionaryTable.getRowCount() > 0)
        {
           // "Przyciemniamy" pierwszą kolumnę
           dictionaryTable.getColumnModel().getColumn(0).setCellRenderer(
                   new YPTableCellRenderer(0, dictionaryTable.getTableHeader().getBackground()));
        }
    }


    private void PrepareAndShowCenExStd(String product, String platnik) {
        YPFunctions.FillTableFromOra(
                "select id_label, des_field as \"Opis\",name_label as \"Nazwa pola\", algol as \"Formula\" " +
                "from v_dict_ex_std " +
                "where id_product=? " +
                "and id_pay=? " +
                "and id_label<>45 " +
                "and algol is not null " +
                "order by id_label",
                new Vector(Arrays.asList(product, platnik)),
                0,
                99999,
                dictionaryTable,
                new Vector(Arrays.asList(20,120,120,120)),
                new Vector(),
                false,
                false,
                new Vector(Arrays.asList(3)),
                new Vector(Arrays.asList(0,1,2)),
                false);

    }

    private void cbDictionariesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDictionariesActionPerformed

    }//GEN-LAST:event_cbDictionariesActionPerformed

private void jbDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDiscountActionPerformed
        String item = (String)cbDictionaries.getSelectedItem();
        if (item.equals("Cennik palet")) {
            PaletyRabatyDialog frame = new PaletyRabatyDialog(null,
                    true,
                    0,
                    (String)comboProducts.getSelectedItem(),
                    (String)comboPlatnik.getSelectedItem());
            frame.setVisible(true);
        } else if (item.equals("Cennik Ekspresowy EX")) {
            ExRabatyDialog frame = new ExRabatyDialog(null,
                    true,
                    0,
                    (String)comboProducts.getSelectedItem(),
                    (String)comboPlatnik.getSelectedItem());
            frame.setVisible(true);
        } else;
}//GEN-LAST:event_jbDiscountActionPerformed

private void jbLoadDictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLoadDictActionPerformed
       Vector distances = new Vector(); 
       for (int i = 0; i < dictionaryTable.getRowCount(); i++)
           distances.add(dictionaryTable.getModel().getValueAt(i, 0));
       Vector weights = new Vector();
       for (int i = 0; i < dictionaryTable.getColumnCount(); i++)
           weights.add(dictionaryTable.getColumnModel().getColumn(i).getHeaderValue());
           
       LoadDictDialog frame = new LoadDictDialog(CasAdminApp.getApplication().getMainFrame(), 
                                                 true,
                                                 cbDictionaries.getSelectedIndex(),
                                                 dictionaryTable.getModel().getRowCount(), 
                                                 dictionaryTable.getModel().getColumnCount(), 
                                                 distances);
       frame.setVisible(true);
       // Wyświetlamy listę depotów, które chcemy przeglądać
       if (((LoadDictDialog) frame).data != null)
       {
           YPFunctions.clearContainer(dictionaryTable);
           YPFunctions.FillTableFromVector(((LoadDictDialog) frame).data, 
                                           weights, 
                                           dictionaryTable, 
                                           new Vector(), 
                                           new Vector(), 
                                           false, 
                                           false, 
                                           new Vector(),
                                           new Vector(Arrays.asList(0)),
                                           false,
                                           0);
/*           
           FillTableFromVector(Vector<Vector> p_vBody,
                                               Vector<String> p_vTitles,
                                               JTable p_table,
                                               Vector<Integer> p_vWidths,
                                               Vector<Integer> p_vAsBoolean,
                                               boolean p_withLeadCheckboxes,
                                               boolean p_withColumnsSort,
                                               Vector<Integer> p_vEditableColumns,
                                               Vector<Integer> p_vRowHeaders,
                                               Boolean p_bLastRecNoColumn,
                                               int p_startRecord)
          for (int i = 0; i < dictionaryTable.getModel().getColumnCount(); i++)
              for (int j = 0; j < dictionaryTable.getModel().getRowCount(); j++)
                  dictionaryTable.getModel();

 */
       }
}//GEN-LAST:event_jbLoadDictActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbDictionaries;
    private javax.swing.JComboBox comboPlatnik;
    private javax.swing.JComboBox comboProducts;
    private javax.swing.JTable dictionaryTable;
    private javax.swing.JPanel downPanel;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JButton jbAddColumn;
    private javax.swing.JButton jbAddRecord;
    private javax.swing.JButton jbDeleteColumn;
    private javax.swing.JButton jbDeleteRecord;
    private javax.swing.JButton jbDiscount;
    private javax.swing.JButton jbDrOptions;
    private javax.swing.JButton jbLoadDict;
    private javax.swing.JButton jbSave;
    private javax.swing.JButton jbShow;
    private javax.swing.JPanel jpAddOpers;
    private javax.swing.JPanel jpLoadDict;
    private javax.swing.JPanel jpOpcje;
    private javax.swing.JPanel jpPriceOptions1;
    private javax.swing.JPanel jpPrices;
    private javax.swing.JScrollPane scrollPanelDictionaryTable;
    private javax.swing.JPanel upPanel;
    // End of variables declaration//GEN-END:variables

}
