/*
 * ShipmentActivityPanel.java
 *
 * Created on 31 październik 2008, 09:48
 */
package casadmin;

import java.awt.Dimension;
import java.util.*;
import javax.swing.tree.*;

public class ShowLog extends javax.swing.JPanel {

    /** Creates new form ShipmentActivityPanel */
    public ShowLog(String p_mode) {
        initComponents();
        mode = p_mode;
        Date d = new Date();
        dcData.setDate(d);
        tfIdCas.setText("");
        splitPanel.setVisible(false);

        if (GlobalData.v_allUsers.isEmpty())
                 GlobalData.v_allUsers =
                        GlobalData.oraSession.selectOneColumnToVector(
                        "Select user_name from cas_users where active='T' order by user_name",
                        null);

        comboOpiekun.removeAllItems();
        comboOpiekun.addItem("*.*");
        Iterator it = GlobalData.v_allUsers.iterator();
        while (it.hasNext())
               comboOpiekun.addItem((String) it.next());
        comboOpiekun.setSelectedItem(GlobalData.m_sUserLogin);


        YPFunctions.enableContainer(panelShowShipment, mode.equals("comm"));
        if (mode.equals("comm")) {
            panelQuery.setBorder(javax.swing.BorderFactory.createTitledBorder("Pokaż log komunikacji"));
        } else if (mode.equals("synchro")) {
            panelQuery.setBorder(javax.swing.BorderFactory.createTitledBorder("Pokaż log synchronizacji"));
        } else if (mode.equals("err103")) {
            panelQuery.setBorder(javax.swing.BorderFactory.createTitledBorder("Pokaż logi błędów typu 103"));
        } else if (mode.equals("monitor")) {
            panelQuery.setBorder(javax.swing.BorderFactory.createTitledBorder("Pokaż log monitora kumunikacji"));
        } else if (mode.equals("env")) {
            panelQuery.setBorder(javax.swing.BorderFactory.createTitledBorder("Pokaż logi środowiska aplikacji"));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        upPanel = new javax.swing.JPanel();
        panelQuery = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dcData = new com.toedter.calendar.JDateChooser();
        jLabel66 = new javax.swing.JLabel();
        tfIdCas = new javax.swing.JTextField();
        jbShowCustomers = new javax.swing.JButton();
        jbShow = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        hhOd = new javax.swing.JComboBox();
        mmOd = new javax.swing.JComboBox();
        ssOd = new javax.swing.JComboBox();
        hhDo = new javax.swing.JComboBox();
        mmDo = new javax.swing.JComboBox();
        ssDo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        comboOpiekun = new javax.swing.JComboBox();
        panelShowShipment = new javax.swing.JPanel();
        tfLpSeek = new javax.swing.JTextField();
        jbFilter = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        downPanel = new javax.swing.JScrollPane();
        splitPanel = new javax.swing.JSplitPane();
        treePanel = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        dataPanel = new javax.swing.JPanel();
        scrollTablePanel = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        scrollTextFieldPanel = new javax.swing.JScrollPane();
        textField = new javax.swing.JTextArea();

        setName("Form"); // NOI18N
        setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane1.setDividerLocation(100);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(casadmin.CasAdminApp.class).getContext().getResourceMap(ShowLog.class);
        upPanel.setBackground(resourceMap.getColor("upPanel.background")); // NOI18N
        upPanel.setName("upPanel"); // NOI18N
        upPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelQuery.setBackground(resourceMap.getColor("panelQuery.background")); // NOI18N
        panelQuery.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelQuery.border.title"))); // NOI18N
        panelQuery.setName("panelQuery"); // NOI18N
        panelQuery.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        panelQuery.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, 20));

        dcData.setDateFormatString(resourceMap.getString("dcData.dateFormatString")); // NOI18N
        dcData.setName("dcData"); // NOI18N
        panelQuery.add(dcData, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 120, 20));

        jLabel66.setText(resourceMap.getString("jLabel66.text")); // NOI18N
        jLabel66.setName("jLabel66"); // NOI18N
        panelQuery.add(jLabel66, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, 20));

        tfIdCas.setName("tfIdCas"); // NOI18N
        tfIdCas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfIdCasKeyReleased(evt);
            }
        });
        panelQuery.add(tfIdCas, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, 80, 20));

        jbShowCustomers.setText(resourceMap.getString("jbShowCustomers.text")); // NOI18N
        jbShowCustomers.setName("jbShowCustomers"); // NOI18N
        jbShowCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbShowCustomersActionPerformed(evt);
            }
        });
        panelQuery.add(jbShowCustomers, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, 40, -1));

        jbShow.setText(resourceMap.getString("jbShow.text")); // NOI18N
        jbShow.setName("jbShow"); // NOI18N
        jbShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbShowActionPerformed(evt);
            }
        });
        panelQuery.add(jbShow, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 50, 120, 25));

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        panelQuery.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, 20));

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        panelQuery.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 20, 60, 20));

        hhOd.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        hhOd.setName("hhOd"); // NOI18N
        panelQuery.add(hhOd, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 40, -1));

        mmOd.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        mmOd.setName("mmOd"); // NOI18N
        panelQuery.add(mmOd, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, 40, -1));

        ssOd.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        ssOd.setName("ssOd"); // NOI18N
        panelQuery.add(ssOd, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 20, 40, -1));

        hhDo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        hhDo.setSelectedIndex(23);
        hhDo.setName("hhDo"); // NOI18N
        panelQuery.add(hhDo, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 20, 40, -1));

        mmDo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        mmDo.setSelectedIndex(59);
        mmDo.setName("mmDo"); // NOI18N
        panelQuery.add(mmDo, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, 40, -1));

        ssDo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        ssDo.setSelectedIndex(59);
        ssDo.setName("ssDo"); // NOI18N
        panelQuery.add(ssDo, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 20, 40, -1));

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        panelQuery.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 50, -1, 20));

        comboOpiekun.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboOpiekun.setName("comboOpiekun"); // NOI18N
        panelQuery.add(comboOpiekun, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, 120, -1));

        upPanel.add(panelQuery, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 610, 80));

        panelShowShipment.setBackground(resourceMap.getColor("panelShowShipment.background")); // NOI18N
        panelShowShipment.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelShowShipment.border.title"))); // NOI18N
        panelShowShipment.setName("panelShowShipment"); // NOI18N
        panelShowShipment.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tfLpSeek.setText(resourceMap.getString("tfLpSeek.text")); // NOI18N
        tfLpSeek.setName("tfLpSeek"); // NOI18N
        panelShowShipment.add(tfLpSeek, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 130, -1));

        jbFilter.setText(resourceMap.getString("jbFilter.text")); // NOI18N
        jbFilter.setName("jbFilter"); // NOI18N
        jbFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFilterActionPerformed(evt);
            }
        });
        panelShowShipment.add(jbFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, -1, -1));

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        panelShowShipment.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        upPanel.add(panelShowShipment, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 10, 230, 80));

        jSplitPane1.setTopComponent(upPanel);

        downPanel.setBackground(resourceMap.getColor("downPanel.background")); // NOI18N
        downPanel.setAutoscrolls(true);
        downPanel.setName("downPanel"); // NOI18N

        splitPanel.setDividerLocation(201);
        splitPanel.setName("splitPanel"); // NOI18N

        treePanel.setName("treePanel"); // NOI18N

        tree.setName("tree"); // NOI18N
        tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                treeMouseReleased(evt);
            }
        });
        tree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                treeKeyReleased(evt);
            }
        });
        treePanel.setViewportView(tree);

        splitPanel.setLeftComponent(treePanel);

        dataPanel.setName("dataPanel"); // NOI18N
        dataPanel.setLayout(new java.awt.CardLayout());

        scrollTablePanel.setName("scrollTablePanel"); // NOI18N

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.setName("table"); // NOI18N
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableMouseReleased(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableKeyReleased(evt);
            }
        });
        scrollTablePanel.setViewportView(table);

        dataPanel.add(scrollTablePanel, "card2");

        scrollTextFieldPanel.setName("scrollTextFieldPanel"); // NOI18N

        textField.setColumns(20);
        textField.setFont(resourceMap.getFont("textField.font")); // NOI18N
        textField.setRows(5);
        textField.setName("textField"); // NOI18N
        scrollTextFieldPanel.setViewportView(textField);

        dataPanel.add(scrollTextFieldPanel, "card3");

        splitPanel.setRightComponent(dataPanel);

        downPanel.setViewportView(splitPanel);

        jSplitPane1.setBottomComponent(downPanel);

        add(jSplitPane1);
    }// </editor-fold>//GEN-END:initComponents

    private void prepareAndShowMainQuery() {
        splitPanel.setVisible(true);
        String tableName = "";
        String timeField = "";
        currentDate = YPFunctions.DateToString(dcData.getDate());
        fromDate = currentDate + " " +
                    (String)hhOd.getSelectedItem() + ":" +
                    (String)mmOd.getSelectedItem() + ":" +
                    (String)ssOd.getSelectedItem();
        toDate = currentDate + " " +
                    (String)hhDo.getSelectedItem() + ":" +
                    (String)mmDo.getSelectedItem() + ":" +
                    (String)ssDo.getSelectedItem();

        YPFunctions.clearContainer(dataPanel);
        tfLpSeek.setText("");
        if (mode.equals("comm")) {
            scrollTextFieldPanel.setVisible(false);
            scrollTablePanel.setVisible(true);
            tableName = "log_comm";
            timeField = "date_connect";
        } else if (mode.equals("synchro")) {
            scrollTextFieldPanel.setVisible(false);
            scrollTablePanel.setVisible(true);
            tableName = "log_synchro";
            timeField = "date_synchro";
        } else if (mode.equals("err103")) {
            scrollTextFieldPanel.setVisible(false);
            scrollTablePanel.setVisible(true);
            tableName = "log_comm";
            timeField = "date_connect";
        } else if (mode.equals("monitor")) {
            scrollTextFieldPanel.setVisible(false);
            scrollTablePanel.setVisible(true);
            tableName = "monitor_comm";
            timeField = "date_comm";
        } else if (mode.equals("env")) {
            scrollTextFieldPanel.setVisible(true);
            scrollTablePanel.setVisible(false);
            tableName = "log_setup_app";
            timeField = "date_connect";
        }
        String subQuery = "";

        String sCasSap = tfIdCas.getText();
        // Jeśli wybrane ID CUST lub ID SAP
        if (! sCasSap.equals("")) {
            String firstToken = YPFunctions.getTokenAt(0, sCasSap, ",", "");
            if (firstToken.length()==7)
                subQuery += " and id_cust in (select id_cust from customers where id_sap in (" +
                              tfIdCas.getText() + "))";
            else
                subQuery += " and id_cust in (" + tfIdCas.getText() + ")";
        }

        String opiekun = (String)comboOpiekun.getSelectedItem();
        if ( ! opiekun.equals("*.*"))
            subQuery += " and id_cust in (select id_cust from customers where id_user = (select id_user from cas_users where user_name='"+
                    opiekun + "')) ";

        if (mode.equals("err103"))
                subQuery += " and param3 = '103' ";

        String Query = "";

        if (mode.equals("monitor")) {
             Query =    "select date_comm " +
                        "from " + tableName + " " +
                        "where " + timeField + "=to_date(?,'yyyy/MM/dd')";
        } else
        {
             Query = "select * from ( " +
                        "select distinct lpad(to_char(id_cust),12,' ') dd " +
                        "from " + tableName + " " +
                        "where " + timeField + " between to_date(?,'yyyy/MM/dd hh24:mi:ss') and " +
                                                   "to_date(?,'yyyy/MM/dd hh24:mi:ss') " +
                               subQuery +
                        "group by id_cust";
             if (mode.equals("env"))
                Query +=  " union " +
                        "select lpad(to_char(id_cust),12,' ') || ' ' || TO_CHAR(DATE_CONNECT,'yyyy/MM/dd hh24:mi:ss') dd "+
                        "from " + tableName + " " +
                        "where " + timeField + " between to_date(?,'yyyy/MM/dd hh24:mi:ss') and " +
                                                   "to_date(?,'yyyy/MM/dd hh24:mi:ss') " +
                               subQuery;
             Query += ") order by dd";
        }
        Vector Params = null;

        if (mode.equals("monitor"))
             Params = new Vector(Arrays.asList(currentDate));
        else if (mode.equals("env"))
             Params = new Vector(Arrays.asList(fromDate, toDate, fromDate, toDate));
        else
             Params = new Vector(Arrays.asList(fromDate, toDate));

        Vector<Vector<String> > vAll = 
                GlobalData.oraSession.selectAllRecordsToVector(Query, Params);

        DefaultMutableTreeNode root = new DefaultMutableTreeNode(tableName);
        DefaultMutableTreeNode nodeItem = null;
        DefaultMutableTreeNode nodeDetail = null;

        Enumeration en = vAll.elements();
        while (en.hasMoreElements()) {
            Vector<String> v = (Vector<String>) en.nextElement();
            String node = v.elementAt(0).trim();
            int spacePos = node.indexOf(" ");
            if (spacePos < 0) { // ID_CAS może być 7789978986 - zakodowany przy 103
                nodeItem = new DefaultMutableTreeNode(node);
                root.add(nodeItem);
            } else {
                    String detailNode = node.substring(spacePos + 1, node.length());
                    nodeDetail = new DefaultMutableTreeNode(detailNode);
                    nodeItem.add(nodeDetail);
            }
        }
        tree.setModel(new DefaultTreeModel(root));
        // Przerysowujemy drzewo
        tree.repaint();
    }

    private void jbShowCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbShowCustomersActionPerformed
        // Naciśnięty przycisk "?" w polu "ID CAS"
        // Proponujemy zaznaczyć klientów do przegłądania
        SelectCustomerDialog frame = new SelectCustomerDialog(null, true, false, "","");
        frame.setTitle("Zaznacz ID_CUST klientów, którzycz chcesz obejrzeć");
        frame.setVisible(true);
        // Wyświetlamy Id Cust, które chcemy przeglądać
        tfIdCas.setText(((SelectCustomerDialog) frame).selectedID_CUST);
        tfIdCas.repaint();

}//GEN-LAST:event_jbShowCustomersActionPerformed
    
    private String leadZero(int n) {
            return (n < 10 ? "0" : "") + Integer.toString(n);
    }


    private void showDetailLog(String p_shipmentFilter)  {
//        String selectedDate = "";
//        String p1 = "0", p2 = "0";
        tfLpSeek.setText(p_shipmentFilter);
        String Query = "";
        Vector Params = null;
        TreePath path = tree.getSelectionPath();
        if (path != null) {
            DefaultMutableTreeNode selection = (DefaultMutableTreeNode) path.getLastPathComponent();
            if (selection.getLevel() == 0) {
                if (Integer.parseInt(GlobalData.m_sGrant) != 1)
                {
                    int minutOd = Integer.parseInt((String)hhOd.getSelectedItem()) * 60 +
                                Integer.parseInt((String)mmOd.getSelectedItem());
                    int minutDo = Integer.parseInt((String)hhDo.getSelectedItem()) * 60 +
                                Integer.parseInt((String)mmDo.getSelectedItem());
                    if (minutDo - minutOd > 30 ) { // > 30 minut
                        Calendar cal = Calendar.getInstance();
                        Date tempToDate = cal.getTime();
                        cal.add(Calendar.MINUTE, -20);
                        Date tempFromDate = cal.getTime();
                        hhOd.setSelectedItem(leadZero(tempFromDate.getHours()));
                        mmOd.setSelectedItem(leadZero(tempFromDate.getMinutes()));
                        ssOd.setSelectedItem(leadZero(tempFromDate.getSeconds()));

                        hhDo.setSelectedItem(leadZero(tempToDate.getHours()));
                        mmDo.setSelectedItem(leadZero(tempToDate.getMinutes()));
                        ssDo.setSelectedItem(leadZero(tempToDate.getSeconds()));

    //                    YPFunctions.showErrorMessage("Dla przeglądu całkowitego log'u zakres czasowy nie może być więcej od 15 minut");
    //                    return;
                    }
                }
            }
            else
            {
                    hhOd.setSelectedItem("00");
                    mmOd.setSelectedItem("00");
                    ssOd.setSelectedItem("00");

                    hhDo.setSelectedItem("23");
                    mmDo.setSelectedItem("59");
                    ssDo.setSelectedItem("59");

            }

            currentDate = YPFunctions.DateToString(dcData.getDate());
            fromDate = currentDate + " " +
                    (String)hhOd.getSelectedItem() + ":" +
                    (String)mmOd.getSelectedItem() + ":" +
                    (String)ssOd.getSelectedItem();
            toDate = currentDate + " " +
                    (String)hhDo.getSelectedItem() + ":" +
                    (String)mmDo.getSelectedItem() + ":" +
                    (String)ssDo.getSelectedItem();


            String text = selection.toString();
            if (mode.equals("comm") || mode.equals("err103")) {
/*                       Query = "select id_cust, date_connect, remote_addr, proc_name," +
                                      "param1, param2, param3, size_pdf " +
                               "from log_comm " +
                               "where date_connect between to_date(?,'yyyy/MM/dd hh24:mi:ss') and " +
                                                   "to_date(?,'yyyy/MM/dd hh24:mi:ss') " +
                               ((selection.getLevel() == 0) ? " " : " and id_cust=? ") +
                               (mode.equals("err103") ? " and param3 = '103' " : " ") +
                               "order by date_connect desc";
*/

                       Query = "select id_cust, date_connect, remote_addr, proc_name," +
                                      "param1, param2, param3, size_pdf " +
                               "from log_comm where ";
                       if (selection.getLevel() != 0)
                           Query += "id_cust=? and ";

                       Query += "date_connect between to_date(?,'yyyy/MM/dd hh24:mi:ss') and " +
                                                               "to_date(?,'yyyy/MM/dd hh24:mi:ss') " +
                                          (mode.equals("err103") ? " and param3 = '103' " : " ") +
                                          (p_shipmentFilter.equals("") ? " " : " and param1='"+
                                          p_shipmentFilter + "'") +

                                "order by date_connect desc";
                       if (selection.getLevel() == 0)
                           Params = new Vector(Arrays.asList(fromDate, toDate));
                       else
                           Params = new Vector(Arrays.asList(text, fromDate, toDate));

                        YPFunctions.FillTableFromOra(
                                Query, //zapytanie SQL
                                Params,    // brak parametrów
                                0, // od rekordu
                                99999,   // do rekordu
                                table,   // nazwa tablicy
                                new Vector(Arrays.asList(50, 100, 80, 100, 100, 70, 40, 40, 10)), // Szerokości pól
                                new Vector(), // jako CheckBox
                                false,   // bez dodatkowej kolumny z CheckBox
                                true,    // włączyć sortowanie
                                new Vector(), // brak pól do edycji
                                null,     // brak nagłowków rekordów
                                true);
            } else if (mode.equals("synchro")) {
                       Query = "select id_cust, id_dict, date_active, date_synchro " +
                               "from log_synchro " +
                               "where date_synchro between to_date(?,'yyyy/MM/dd hh24:mi:ss') and " +
                                                          "to_date(?,'yyyy/MM/dd hh24:mi:ss') " +
                               ((selection.getLevel() == 0) ? " " : " and id_cust=? ") +
                               "order by date_synchro desc";
                       if (selection.getLevel() == 0)
                           Params = new Vector(Arrays.asList(fromDate, toDate));
                       else
                           Params = new Vector(Arrays.asList(fromDate, toDate, text));
                        YPFunctions.FillTableFromOra(
                                Query, //zapytanie SQL
                                Params,    // brak parametrów
                                0, // od rekordu
                                99999,   // do rekordu
                                table,   // nazwa tablicy
                                new Vector(Arrays.asList(50, 100, 80, 100,10)), // Szerokości pól
                                new Vector(), // jako CheckBox
                                false,   // bez dodatkowej kolumny z CheckBox
                                true,    // włączyć sortowanie
                                new Vector(), // brak pól do edycji
                                null,     // brak nagłowków rekordów
                                true);

            } else if (mode.equals("monitor")) {
                       Query = "select * " +
                               "from monitor_comm " +
                               "where date_comm =to_date(?,'yyyy/MM/dd')";
                       Params = new Vector(Arrays.asList(currentDate));
                       YPFunctions.FillTableFromOra(
                                Query, //zapytanie SQL
                                Params,    // brak parametrów
                                0, // od rekordu
                                99999,   // do rekordu
                                table,   // nazwa tablicy
                                new Vector(), // Szerokości pól
                                new Vector(), // jako CheckBox
                                false,   // bez dodatkowej kolumny z CheckBox
                                true,    // włączyć sortowanie
                                new Vector(), // brak pól do edycji
                                null,     // brak nagłowków rekordów
                                true);
            } else if (mode.equals("env")) {
                if (selection.getLevel() < 2)
                    textField.setText("Wybierz odpowiednie zdarzenie z drzewa");
                else {
                    textField.setText(
                         GlobalData.oraSession.selectString(
                                  "Select description " +
                                  "from log_setup_app " +
                                  "where id_cust=? and " +
                                        "date_connect = TO_DATE(?, 'YYYY-MM-DD HH24:MI:SS')",
                                  new Vector(Arrays.asList(
                                               selection.getParent().toString(),
                                               text)),
                                  ""));
                    textField.setCaretPosition(0);
                }
            }
        }
    }


    private void jbShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbShowActionPerformed
        // Naciśnięty przycisk "Pokaż"
        prepareAndShowMainQuery();
}//GEN-LAST:event_jbShowActionPerformed

    private void treeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMouseReleased
            showDetailLog("");
    }//GEN-LAST:event_treeMouseReleased

    private void treeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_treeKeyReleased
            showDetailLog("");
    }//GEN-LAST:event_treeKeyReleased

    private void tableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseReleased
        if (mode.equals("comm")) {
            int row = table.getSelectedRow();
            int ndx = YPFunctions.getTableColumnIndex(table,"PROC_NAME");
            if (YPFunctions.strGet(table,row, ndx).startsWith("SAVE_SHIPMENT")) {
                ndx = YPFunctions.getTableColumnIndex(table,"PARAM1");
                String sShipmentId = YPFunctions.strGet(table,row, ndx);
                ndx = YPFunctions.getTableColumnIndex(table,"ID_CUST");
                String sIdCas = YPFunctions.strGet(table,row, ndx);

                YPFunctions.showPanelAsModalDialog(new ShipmentsPanel(
                                                        sIdCas,
                                                        sShipmentId),
                                                   "Przegląd danych o przesyłkach",
                                                   new Dimension(1017,700));
            } else if (YPFunctions.strGet(table,row, ndx).startsWith("SAVE_RETURN")) {
                ndx = YPFunctions.getTableColumnIndex(table,"PARAM1");
                String sShipmentId = YPFunctions.strGet(table,row, ndx);
                if (GlobalData.returnsStarted)
                   YPFunctions.showPanelAsModalDialog(new ReturnsPanel(sShipmentId),
                                                   "Przegląd danych o zwrotach",
                                                   new Dimension(1017,400));
            }
        }
    }//GEN-LAST:event_tableMouseReleased

    private void tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyReleased
        tableMouseReleased(null);
    }//GEN-LAST:event_tableKeyReleased

    private void tfIdCasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfIdCasKeyReleased
       if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
               jbShowActionPerformed(null);
    }//GEN-LAST:event_tfIdCasKeyReleased

    private void jbFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFilterActionPerformed
        showDetailLog(tfLpSeek.getText());
    }//GEN-LAST:event_jbFilterActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboOpiekun;
    private javax.swing.JPanel dataPanel;
    private com.toedter.calendar.JDateChooser dcData;
    private javax.swing.JScrollPane downPanel;
    private javax.swing.JComboBox hhDo;
    private javax.swing.JComboBox hhOd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton jbFilter;
    private javax.swing.JButton jbShow;
    private javax.swing.JButton jbShowCustomers;
    private javax.swing.JComboBox mmDo;
    private javax.swing.JComboBox mmOd;
    private javax.swing.JPanel panelQuery;
    private javax.swing.JPanel panelShowShipment;
    private javax.swing.JScrollPane scrollTablePanel;
    private javax.swing.JScrollPane scrollTextFieldPanel;
    private javax.swing.JSplitPane splitPanel;
    private javax.swing.JComboBox ssDo;
    private javax.swing.JComboBox ssOd;
    private javax.swing.JTable table;
    private javax.swing.JTextArea textField;
    private javax.swing.JTextField tfIdCas;
    private javax.swing.JTextField tfLpSeek;
    private javax.swing.JTree tree;
    private javax.swing.JScrollPane treePanel;
    private javax.swing.JPanel upPanel;
    // End of variables declaration//GEN-END:variables
    private String mode;
    private String fromDate;
    private String toDate;
    private String currentDate;
}
