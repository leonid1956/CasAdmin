package casadmin;

import java.util.*;

public class StandardPricesPanel extends javax.swing.JPanel {

    public StandardPricesPanel() {
        initComponents();
        // Wyznaczamy wygląd górnego panelu
        refreshUpPanel();
    }

    private void refreshUpPanel() {
        // Czy ma byc dostępny comboBox z datami aktywności
        Boolean dateActiveEnabled = false;
        // Czy udostępniać panel "Opcję"
        Boolean optionsEnabled = false;
        // Wypełniamy combobox z datami aktywności pustą wartością
        cbDateActive.removeAllItems();
        cbDateActive.addItem(" ");
        // odczytujemy wybrany tekst z comboBox "Słownik".
        // Pierwszym z elementów modelu tego combobox jest " " dla tego żeby
        // na początku pokazywac w tym ComboBox pustą wartośc
        String s = (String)cbDictionary.getSelectedItem();
        // Jeśli wybrany tekst zawiera nazwę słownika
        if (!s.trim().equals("")) {
            // Odczytujemy wszystkie możliwe daty aktywności słownika (jeśli
            // pole "DATE_ACTIVE" istnieje
            Vector<Vector<String> > v =
                    GlobalData.oraSession.selectAllRecordsToVector(
                    "select distinct date_active from "+s, null);
            if (!v.isEmpty()) {
                 // Tablica Oracle( Słownik) zawiera pole "DATE_ACTIVE"
                 // Wypełniamy comboBox "Data aktywacji" wartościami z wektora
                 Iterator it = v.iterator();
                 while (it.hasNext()) {
                     // Odczytujemy następny element wektora
                     Vector<String> vLine = (Vector<String>)it.next();
                     // z otrzymanego wektowa wybieramy pierwszy element
                     String item = vLine.elementAt(0);
                     // dodajemy element do comboBox "Data aktywacji"
                     cbDateActive.addItem(item);
                 }
                 // Udostępniamy comboBox "Data aktywacji"
                 dateActiveEnabled = true;
            }
            else {
                // Jeśli wektor v nie zawiera elementów - co oznacza że tablica nie
                // zawiera pola "DATE_ACTIVE" - udostepniamy pracę z opcjami
                optionsEnabled = true;
                // iStartRecord - numer rekordu, od którego zaczyna się przeglądanie
                // słownika. Jest dla tego, że istnieje możliwość przeglądania danych
                // częściami (po 500, 1000 czy inną ilość na stronie).
                iStartRecord = 0;
            }
        }
        // Robimy udostępnienie comboBox'a "Data aktywacji" w zależności od wartości
        // dateActiveEnabled
        cbDateActive.setEnabled(dateActiveEnabled);
        // Ustawiamy index na pierwszy element - on zawsze jest " "
        cbDateActive.setSelectedIndex(0);
        // panel "Opcję" udostępniamy w zależności od wartości zmiennej optionsEnabled
        YPFunctions.enableContainer(panelOptions, optionsEnabled);
        // usuwamy informację z dolnego panelu
        YPFunctions.clearContainer(downPanel);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        upPanel = new javax.swing.JPanel();
        panelOptions = new javax.swing.JPanel();
        jLabel71 = new javax.swing.JLabel();
        cbRecCount = new javax.swing.JComboBox();
        jbPrevRecords = new javax.swing.JButton();
        jbNextRecords = new javax.swing.JButton();
        jbShow = new javax.swing.JButton();
        panelDictionary = new javax.swing.JPanel();
        cbDictionary = new javax.swing.JComboBox();
        cbDateActive = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        downPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDictionary = new javax.swing.JTable();

        setName("Form"); // NOI18N
        setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane1.setDividerLocation(110);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(casadmin.CasAdminApp.class).getContext().getResourceMap(StandardPricesPanel.class);
        upPanel.setBackground(resourceMap.getColor("upPanel.background")); // NOI18N
        upPanel.setName("upPanel"); // NOI18N
        upPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelOptions.setBackground(resourceMap.getColor("panelOptions.background")); // NOI18N
        panelOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Opcję"));
        panelOptions.setEnabled(false);
        panelOptions.setName("panelOptions"); // NOI18N
        panelOptions.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel71.setText(resourceMap.getString("jLabel71.text")); // NOI18N
        jLabel71.setName("jLabel71"); // NOI18N
        panelOptions.add(jLabel71, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 80, 20));

        cbRecCount.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "500", "1000", "2000", "5000" }));
        cbRecCount.setName("cbRecCount"); // NOI18N
        panelOptions.add(cbRecCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 50, -1));

        jbPrevRecords.setText(resourceMap.getString("jbPrevRecords.text")); // NOI18N
        jbPrevRecords.setName("jbPrevRecords"); // NOI18N
        jbPrevRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPrevRecordsActionPerformed(evt);
            }
        });
        panelOptions.add(jbPrevRecords, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 50, -1));

        jbNextRecords.setText(resourceMap.getString("jbNextRecords.text")); // NOI18N
        jbNextRecords.setName("jbNextRecords"); // NOI18N
        jbNextRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNextRecordsActionPerformed(evt);
            }
        });
        panelOptions.add(jbNextRecords, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 50, -1));

        jbShow.setText(resourceMap.getString("jbShow.text")); // NOI18N
        jbShow.setName("jbShow"); // NOI18N
        jbShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbShowActionPerformed(evt);
            }
        });
        panelOptions.add(jbShow, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, 70, -1));

        upPanel.add(panelOptions, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, 260, 90));

        panelDictionary.setBackground(resourceMap.getColor("panelDictionary.background")); // NOI18N
        panelDictionary.setBorder(javax.swing.BorderFactory.createTitledBorder("Słowniki standardowe"));
        panelDictionary.setEnabled(false);
        panelDictionary.setName("panelDictionary"); // NOI18N
        panelDictionary.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbDictionary.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "DICT_APSHUBS", "DICT_APSHUBS_EXT", "DICT_DISTANCES", "DICT_DR_STD", "DICT_EX_STD", "DICT_PAL_STD", "DICT_PC", "DICT_PCS", "DICT_SERV_POINTS", " " }));
        cbDictionary.setName("cbDictionary"); // NOI18N
        cbDictionary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDictionaryActionPerformed(evt);
            }
        });
        panelDictionary.add(cbDictionary, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 180, -1));

        cbDateActive.setName("cbDateActive"); // NOI18N
        cbDateActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDateActiveActionPerformed(evt);
            }
        });
        panelDictionary.add(cbDateActive, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, 180, -1));

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        panelDictionary.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 90, 20));

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        panelDictionary.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 90, 20));

        upPanel.add(panelDictionary, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 320, 90));

        jSplitPane1.setTopComponent(upPanel);

        downPanel.setBackground(resourceMap.getColor("downPanel.background")); // NOI18N
        downPanel.setName("downPanel"); // NOI18N
        downPanel.setLayout(new java.awt.GridLayout(1, 0));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tableDictionary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableDictionary.setName("tableDictionary"); // NOI18N
        jScrollPane1.setViewportView(tableDictionary);

        downPanel.add(jScrollPane1);

        jSplitPane1.setRightComponent(downPanel);

        add(jSplitPane1);
    }// </editor-fold>//GEN-END:initComponents

    private void cbDictionaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDictionaryActionPerformed
        // Wybrany element z comboBox "Słownik"
        // Wyznaczamy wygląd górnego panelu
        refreshUpPanel();
    }//GEN-LAST:event_cbDictionaryActionPerformed

    private void jbNextRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNextRecordsActionPerformed
        // odczytujemy ilość rekordów do przegłądania na jednej stronie
        String s = (String) cbRecCount.getItemAt(cbRecCount.getSelectedIndex());
        // zwiększamy początkowy rekord do przegłądania o wybraną ilość
        iStartRecord += Integer.parseInt(s);
        // Pokazujemy rekordy tablicy słownika
        prepareAndShowMainQuery();
    }//GEN-LAST:event_jbNextRecordsActionPerformed

    private void jbPrevRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPrevRecordsActionPerformed
        // odczytujemy ilość rekordów do przegłądania na jednej stronie
        String s = (String) cbRecCount.getItemAt(cbRecCount.getSelectedIndex());
        // zmniejszamy początkowy rekord do przegłądania o wybraną ilość
        int defCount = Integer.parseInt(s);
        if (iStartRecord >= defCount) {
            iStartRecord -= defCount;
        } else {
            iStartRecord = 0;
        }
        // Pokazujemy rekordy tablicy słownika
        prepareAndShowMainQuery();
    }//GEN-LAST:event_jbPrevRecordsActionPerformed

    private void jbShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbShowActionPerformed
            // Naciśnięty przycisk "Pokaż"
            // Wyświetlamy zawartość tablicy zgodnie z wybranymi opcjami
            prepareAndShowMainQuery();
    }//GEN-LAST:event_jbShowActionPerformed

    private void cbDateActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDateActiveActionPerformed
        // Wybrana wartość z comboBox "Data aktywacji"
        // Odczytujemy wybraną wartość
        String s = (String)cbDateActive.getSelectedItem();
        // Jeśli wybrana wartość zawiera datę aktywacji, to udostępniamy
        // panel "Opcję", inaczej blokujemy go.
        Boolean optionsEnabled = ! YPFunctions.nvlStr(s).trim().equals("");
        YPFunctions.enableContainer(panelOptions, optionsEnabled);
        // Usuwamy informację z dolnego panelu
        YPFunctions.clearContainer(downPanel);
        // Ustawiamy początek pokazu rekordów słownika
        iStartRecord = 0;
    }//GEN-LAST:event_cbDateActiveActionPerformed

    private void prepareAndShowMainQuery() {
        // Przygotowujemy warunek dla zapytania SQL
        String subQuery = "";
        // Jeśli słownik nie zawiera pola "date_active", to comboBox cbDateActive
        // jest niedostępny i wybrana wartość jest pusta, inaczej
        String da = (String)cbDateActive.getSelectedItem();
        da = da.trim();
        if (!da.isEmpty())
            subQuery = subQuery + " where date_active=to_date('"+da+"','yyyy-mm-dd hh:mi:ss')";
        // Budujemy zapytanie SQL
        String mainQuery = "select * from " + (String)cbDictionary.getSelectedItem() + subQuery;
        // Odczytujemy ilość rekordów, które trzeba odczytać
        String s = (String) cbRecCount.getItemAt(cbRecCount.getSelectedIndex());
        // rekordy od iStartRecord do iStartRecord+n
        int iEndRecord = iStartRecord +
                    Integer.parseInt((String) cbRecCount.getItemAt(cbRecCount.getSelectedIndex()));
        // Wyświetlamy tablicę
        YPFunctions.FillTableFromOra(mainQuery,
                                     null,
                                     iStartRecord,
                                     iEndRecord,
                                     tableDictionary,
                                     new Vector(),
                                     new Vector(),
                                     false,
                                     true,
                                     new Vector(),
                                     null,
                                     true);
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbDateActive;
    private javax.swing.JComboBox cbDictionary;
    private javax.swing.JComboBox cbRecCount;
    private javax.swing.JPanel downPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton jbNextRecords;
    private javax.swing.JButton jbPrevRecords;
    private javax.swing.JButton jbShow;
    private javax.swing.JPanel panelDictionary;
    private javax.swing.JPanel panelOptions;
    private javax.swing.JTable tableDictionary;
    private javax.swing.JPanel upPanel;
    // End of variables declaration//GEN-END:variables
    private Integer iStartRecord;
}
