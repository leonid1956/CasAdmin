package casadmin;

import java.util.*;
import javax.swing.tree.*;

public class PropositionsPanel extends javax.swing.JPanel {

    public PropositionsPanel() {
        initComponents();
        fillTree("");
    }

    private void fillTree(String where) {
        // Mapa dla danych w relacji "Data" -> "Przesyłek/Paczek"
        // Tworzymy nowe drzewo
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Propozycje");
        DefaultMutableTreeNode year = null, month = null, day = null;
        // Odczytujemy ilość przesyłek i paczek za każdą datę i grupę dat
        Vector<Vector<String> > vAll = GlobalData.oraSession.selectAllRecordsToVector(
          "select * from ( " +
                  "select to_char(INSERTT,'YYYY/MM/DD') || '[' || TITLE_PROP || ']'  dd " +
                  "from CAS_PROPOSITIONS " +
                  where +
               "union " +
                  "select distinct to_char(INSERTT,'YYYY/MM') dd " +
                  "from CAS_PROPOSITIONS " +
                  where +
                  "group by to_char(INSERTT,'YYYY/MM') " +
               "union " +
                  "select distinct to_char(INSERTT,'YYYY') dd " +
                  "from CAS_PROPOSITIONS " +
                  where +
                  "group by to_char(INSERTT,'YYYY')" +
          ") order by dd",
          new Vector());

        Enumeration en = vAll.elements();

        // Wypełniamy drzewo
        while (en.hasMoreElements()) {
            Vector<String> v = (Vector<String>) en.nextElement();
            String node = v.elementAt(0);
            if (node.length() == 4) { // rok YYYY
                 year = new DefaultMutableTreeNode(node);
                 root.add(year);
            }
            else if (node.length() == 7) { // miesiąc YYYY/MM
                 month = new DefaultMutableTreeNode(node);
                 year.add(month);
            }
            else { // dzień
                 day = new DefaultMutableTreeNode(node);
                 month.add(day);
            }
        }
        tree.setModel(new DefaultTreeModel(root));

        // Przerysowujemy drzewo
        tree.repaint();

        repaintScreen();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        upPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        checkProposition = new javax.swing.JCheckBox();
        checkAnswer = new javax.swing.JCheckBox();
        tfQueryText = new javax.swing.JTextField();
        jbSeek = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        checkTitle = new javax.swing.JCheckBox();
        downPanel = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        panelAnswer = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        taAnswer = new javax.swing.JTextArea();
        tfAuthorAnswer = new javax.swing.JTextField();
        jbAddAnswer = new javax.swing.JButton();
        labelAnswer = new javax.swing.JLabel();
        panelProposition = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taProposition = new javax.swing.JTextArea();
        jbSaveProposition = new javax.swing.JButton();
        tfAuthorProposition = new javax.swing.JTextField();
        tfPropositionTitle = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        labelProposition = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();

        setName("Form"); // NOI18N
        setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane1.setDividerLocation(100);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(casadmin.CasAdminApp.class).getContext().getResourceMap(PropositionsPanel.class);
        upPanel.setBackground(resourceMap.getColor("upPanel.background")); // NOI18N
        upPanel.setName("upPanel"); // NOI18N
        upPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setAutoscrolls(true);
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        checkProposition.setBackground(resourceMap.getColor("checkProposition.background")); // NOI18N
        checkProposition.setSelected(true);
        checkProposition.setText(resourceMap.getString("checkProposition.text")); // NOI18N
        checkProposition.setName("checkProposition"); // NOI18N
        jPanel1.add(checkProposition, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 33, -1, 20));

        checkAnswer.setBackground(resourceMap.getColor("checkAnswer.background")); // NOI18N
        checkAnswer.setSelected(true);
        checkAnswer.setText(resourceMap.getString("checkAnswer.text")); // NOI18N
        checkAnswer.setName("checkAnswer"); // NOI18N
        jPanel1.add(checkAnswer, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 53, -1, 20));

        tfQueryText.setText(resourceMap.getString("tfQueryText.text")); // NOI18N
        tfQueryText.setName("tfQueryText"); // NOI18N
        jPanel1.add(tfQueryText, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 30, 360, -1));

        jbSeek.setText(resourceMap.getString("jbSeek.text")); // NOI18N
        jbSeek.setName("jbSeek"); // NOI18N
        jbSeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSeekActionPerformed(evt);
            }
        });
        jPanel1.add(jbSeek, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 30, 100, -1));

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, -1, 20));

        checkTitle.setBackground(resourceMap.getColor("checkTitle.background")); // NOI18N
        checkTitle.setSelected(true);
        checkTitle.setText(resourceMap.getString("checkTitle.text")); // NOI18N
        checkTitle.setName("checkTitle"); // NOI18N
        jPanel1.add(checkTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 13, -1, 20));

        upPanel.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 790, 80));

        jSplitPane1.setTopComponent(upPanel);

        downPanel.setBackground(resourceMap.getColor("downPanel.background")); // NOI18N
        downPanel.setName("downPanel"); // NOI18N
        downPanel.setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane2.setDividerLocation(185);
        jSplitPane2.setName("jSplitPane2"); // NOI18N

        jPanel3.setBackground(resourceMap.getColor("jPanel3.background")); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelAnswer.setBackground(resourceMap.getColor("panelAnswer.background")); // NOI18N
        panelAnswer.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelAnswer.border.title"))); // NOI18N
        panelAnswer.setName("panelAnswer"); // NOI18N
        panelAnswer.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        panelAnswer.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, 20));

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        taAnswer.setColumns(20);
        taAnswer.setEditable(false);
        taAnswer.setFont(resourceMap.getFont("taAnswer.font")); // NOI18N
        taAnswer.setLineWrap(true);
        taAnswer.setRows(5);
        taAnswer.setWrapStyleWord(true);
        taAnswer.setName("taAnswer"); // NOI18N
        jScrollPane3.setViewportView(taAnswer);

        panelAnswer.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 590, 190));

        tfAuthorAnswer.setText(resourceMap.getString("tfAuthorAnswer.text")); // NOI18N
        tfAuthorAnswer.setEnabled(false);
        tfAuthorAnswer.setName("tfAuthorAnswer"); // NOI18N
        panelAnswer.add(tfAuthorAnswer, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 130, 20));

        jbAddAnswer.setText(resourceMap.getString("jbAddAnswer.text")); // NOI18N
        jbAddAnswer.setName("jbAddAnswer"); // NOI18N
        jbAddAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddAnswerActionPerformed(evt);
            }
        });
        panelAnswer.add(jbAddAnswer, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 230, -1, -1));

        labelAnswer.setFont(resourceMap.getFont("labelAnswer.font")); // NOI18N
        labelAnswer.setForeground(resourceMap.getColor("labelAnswer.foreground")); // NOI18N
        labelAnswer.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelAnswer.setText(resourceMap.getString("labelAnswer.text")); // NOI18N
        labelAnswer.setName("labelAnswer"); // NOI18N
        panelAnswer.add(labelAnswer, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 340, -1));

        jPanel3.add(panelAnswer, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 210, 610, 260));

        panelProposition.setBackground(resourceMap.getColor("panelProposition.background")); // NOI18N
        panelProposition.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelProposition.border.title"))); // NOI18N
        panelProposition.setName("panelProposition"); // NOI18N
        panelProposition.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        panelProposition.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, 20));

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        taProposition.setColumns(20);
        taProposition.setFont(resourceMap.getFont("taProposition.font")); // NOI18N
        taProposition.setLineWrap(true);
        taProposition.setRows(5);
        taProposition.setWrapStyleWord(true);
        taProposition.setName("taProposition"); // NOI18N
        jScrollPane2.setViewportView(taProposition);

        panelProposition.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 590, 110));

        jbSaveProposition.setText(resourceMap.getString("jbSaveProposition.text")); // NOI18N
        jbSaveProposition.setName("jbSaveProposition"); // NOI18N
        jbSaveProposition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSavePropositionActionPerformed(evt);
            }
        });
        panelProposition.add(jbSaveProposition, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 170, -1, -1));

        tfAuthorProposition.setEditable(false);
        tfAuthorProposition.setText(resourceMap.getString("tfAuthorProposition.text")); // NOI18N
        tfAuthorProposition.setName("tfAuthorProposition"); // NOI18N
        panelProposition.add(tfAuthorProposition, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 130, -1));

        tfPropositionTitle.setText(resourceMap.getString("tfPropositionTitle.text")); // NOI18N
        tfPropositionTitle.setName("tfPropositionTitle"); // NOI18N
        panelProposition.add(tfPropositionTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 500, -1));

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        panelProposition.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        labelProposition.setFont(resourceMap.getFont("labelProposition.font")); // NOI18N
        labelProposition.setForeground(resourceMap.getColor("labelProposition.foreground")); // NOI18N
        labelProposition.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelProposition.setText(resourceMap.getString("labelProposition.text")); // NOI18N
        labelProposition.setName("labelProposition"); // NOI18N
        panelProposition.add(labelProposition, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 340, -1));

        jPanel3.add(panelProposition, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 5, 610, 200));

        jSplitPane2.setRightComponent(jPanel3);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tree.setName("tree"); // NOI18N
        tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                treeMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tree);

        jSplitPane2.setLeftComponent(jScrollPane1);

        downPanel.add(jSplitPane2);

        jSplitPane1.setRightComponent(downPanel);

        add(jSplitPane1);
    }// </editor-fold>//GEN-END:initComponents

    private void treeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMouseReleased
        repaintScreen();
    }//GEN-LAST:event_treeMouseReleased

    private void jbSeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSeekActionPerformed
          String seek = tfQueryText.getText().trim().toUpperCase(Locale.getDefault());
          if (seek.length()<3) {
            YPFunctions.showErrorMessage("Nie wprowadzony filter");
//            JOptionPane.showMessageDialog(null, "Nie wprowadzony filter", "Błąd", JOptionPane.ERROR_MESSAGE);
            return;
          }
          if ((checkTitle.isSelected()) || (checkProposition.isSelected()) || (checkAnswer.isSelected()))
          {
              String where = "";
              if (checkTitle.isSelected())
                  where += " upper(title_Prop) like '%" + seek + "%' ";
              if (checkProposition.isSelected())
                  where += (where.isEmpty() ? "" : " or ") + " upper(text_Prop) like '%" + seek + "%' ";
              if (checkAnswer.isSelected())
                  where += (where.isEmpty() ? "" : " or ") + "upper(text_Answer) like '%" + seek + "%' ";
              fillTree(" where " + where);


          } else {
            YPFunctions.showErrorMessage("Nie zaznaczone żadne pole wyszukiwania");
//            JOptionPane.showMessageDialog(null, "Nie zaznaczone żadne pole wyszukiwania", "Błąd", JOptionPane.ERROR_MESSAGE);
            return;
          }

    }//GEN-LAST:event_jbSeekActionPerformed

    private void jbSavePropositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSavePropositionActionPerformed
        if (tfPropositionTitle.getText().trim().isEmpty() || taProposition.getText().trim().isEmpty()) {
            YPFunctions.showErrorMessage("Nie wypełnione pola propozycji");
//             JOptionPane.showMessageDialog(null, "Nie wypełnione pola propozycji", "Błąd", JOptionPane.ERROR_MESSAGE);
            return;
        }
        tfPropositionTitle.setEnabled(false);
        taProposition.setEnabled(false);
        jbSaveProposition.setEnabled(false);
        GlobalData.oraSession.executeQuery(
                "Insert into cas_propositions(title_prop, text_prop, author_prop, text_answer) values(?,?,?,?)",
                new Vector(Arrays.asList(tfPropositionTitle.getText(),taProposition.getText(),tfAuthorProposition.getText(),"")));
        tfQueryText.setText("");
        fillTree("");
    }//GEN-LAST:event_jbSavePropositionActionPerformed

    private void jbAddAnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddAnswerActionPerformed
            CommentDialog frame = new CommentDialog(CasAdminApp.getApplication().getMainFrame(), true);
            frame.setTitle("Dodaj komentarz");
            frame.setVisible(true);
            String comment = ((CommentDialog) frame).retStr;
            if (! comment.equals(""))
            {
                    String allComments = taAnswer.getText();
                    Date d = new Date();


                    allComments += (allComments.isEmpty() ? "" : "\n") +
                                   "[" + d.toGMTString() + "][" +
                                   tfAuthorAnswer.getText() + "]\n" + comment;
                    if (allComments.length() > 4000)
                        allComments = allComments.substring(0, 3999);

                    GlobalData.oraSession.executeQuery(
                        "Update cas_propositions set text_answer=? where title_prop = ?",
                        new Vector(Arrays.asList(allComments,tfPropositionTitle.getText())));
                    taAnswer.setText(allComments);
            }
    }//GEN-LAST:event_jbAddAnswerActionPerformed

    private void repaintScreen() {
        // Zapamiętujemy, jaka data jest wybrana w drzewie
        TreePath path = tree.getSelectionPath();
        if (path != null) {
            DefaultMutableTreeNode selection = (DefaultMutableTreeNode) path.getLastPathComponent();
            String text = selection.toString();
            int p = text.indexOf("[");
            if (p >= 0) {
                   YPFunctions.enableContainer(panelProposition,true);
                   YPFunctions.enableContainer(panelAnswer,true);
                   text = text.substring(p+1);
                   text = text.substring(0, text.length()-1);
                   tfPropositionTitle.setText(text);
                   Vector<String> v_line = GlobalData.oraSession.selectFirstRecordToVector(
                           "select text_prop,author_prop,text_answer from cas_propositions where title_prop=?",
                           new Vector(Arrays.asList(text)));
                   tfAuthorProposition.setText((String)v_line.elementAt(1));
                   taProposition.setText((String)v_line.elementAt(0));
                   tfAuthorAnswer.setText(GlobalData.m_sUserLogin);
                   taAnswer.setText((String)v_line.elementAt(2));
                   labelProposition.setVisible(false);
                   labelAnswer.setVisible(true);
            } else if (text.equals("Propozycje")) {
                   YPFunctions.enableContainer(panelProposition,true);
                   YPFunctions.enableContainer(panelAnswer,false);
                   tfAuthorProposition.setText(GlobalData.m_sUserLogin);
                   taProposition.setText("");
                   tfAuthorAnswer.setText("");
                   taAnswer.setText("");
                   labelProposition.setVisible(true);
                   labelAnswer.setVisible(false);
                   tfPropositionTitle.setText("");
            } else {
                   YPFunctions.clearContainer(panelProposition);
                   YPFunctions.clearContainer(panelAnswer);
                   YPFunctions.enableContainer(panelProposition,false);
                   YPFunctions.enableContainer(panelAnswer,false);
                   labelProposition.setVisible(false);
                   labelAnswer.setVisible(false);
                   tfPropositionTitle.setText("");
            }
        } else {
                   YPFunctions.enableContainer(panelProposition,true);
                   YPFunctions.enableContainer(panelAnswer,false);
                   tfAuthorProposition.setText(GlobalData.m_sUserLogin);
                   taProposition.setText("");
                   tfAuthorAnswer.setText("");
                   taAnswer.setText("");
                   labelProposition.setVisible(true);
                   labelAnswer.setVisible(false);
                   tfPropositionTitle.setText("");
        }
        tfAuthorProposition.setEnabled(false);
        tfAuthorAnswer.setEnabled(false);
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkAnswer;
    private javax.swing.JCheckBox checkProposition;
    private javax.swing.JCheckBox checkTitle;
    private javax.swing.JPanel downPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JButton jbAddAnswer;
    private javax.swing.JButton jbSaveProposition;
    private javax.swing.JButton jbSeek;
    private javax.swing.JLabel labelAnswer;
    private javax.swing.JLabel labelProposition;
    private javax.swing.JPanel panelAnswer;
    private javax.swing.JPanel panelProposition;
    private javax.swing.JTextArea taAnswer;
    private javax.swing.JTextArea taProposition;
    private javax.swing.JTextField tfAuthorAnswer;
    private javax.swing.JTextField tfAuthorProposition;
    private javax.swing.JTextField tfPropositionTitle;
    private javax.swing.JTextField tfQueryText;
    private javax.swing.JTree tree;
    private javax.swing.JPanel upPanel;
    // End of variables declaration//GEN-END:variables

}
