package casadmin;

import java.awt.Point;
import java.util.*;

public class SetSynchroPanel extends javax.swing.JPanel {

    public SetSynchroPanel() {
        initComponents();
        fillEmptyTable();
        tfTerminal.setText("");
        tfIdCas.setText("");
//        bTermChecked = false;
//        bIdCasChecked = false;
        fillComboOpiekun();
    }

    private void fillComboOpiekun() {
        if (GlobalData.v_allUsers.isEmpty())
                 GlobalData.v_allUsers =
                        GlobalData.oraSession.selectOneColumnToVector(
                        "Select user_name from cas_users where active='T' order by user_name",
                        null);

        comboOpiekun.removeAllItems();
        comboOpiekun.addItem("*.*");
        Iterator it = GlobalData.v_allUsers.iterator();
        while (it.hasNext())
               comboOpiekun.addItem((String) it.next());
        comboOpiekun.setSelectedItem(GlobalData.m_sUserLogin);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        upPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        tfIdCas = new javax.swing.JTextField();
        jbShowCustomers = new javax.swing.JButton();
        tfTerminal = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboOpiekun = new javax.swing.JComboBox();
        downPanel = new javax.swing.JPanel();
        butApp = new javax.swing.JButton();
        butApsHubs = new javax.swing.JButton();
        butConf = new javax.swing.JButton();
        butDist = new javax.swing.JButton();
        butNumbers = new javax.swing.JButton();
        butServices = new javax.swing.JButton();
        butPC = new javax.swing.JButton();
        butCenPal = new javax.swing.JButton();
        butCenDR = new javax.swing.JButton();
        butCenEX = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        synchronizationTable = new javax.swing.JTable();
        jbSaveSynchronization = new javax.swing.JButton();

        setName("Form"); // NOI18N
        setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane1.setDividerLocation(100);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(casadmin.CasAdminApp.class).getContext().getResourceMap(SetSynchroPanel.class);
        upPanel.setBackground(resourceMap.getColor("upPanel.background")); // NOI18N
        upPanel.setName("upPanel"); // NOI18N
        upPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(resourceMap.getColor("jPanel2.background")); // NOI18N
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tfIdCas.setName("tfIdCas"); // NOI18N
        jPanel2.add(tfIdCas, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 110, 20));

        jbShowCustomers.setText(resourceMap.getString("jbShowCustomers.text")); // NOI18N
        jbShowCustomers.setName("jbShowCustomers"); // NOI18N
        jbShowCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbShowCustomersActionPerformed(evt);
            }
        });
        jPanel2.add(jbShowCustomers, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 50, 40, -1));

        tfTerminal.setName("tfTerminal"); // NOI18N
        tfTerminal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfTerminalMouseClicked(evt);
            }
        });
        jPanel2.add(tfTerminal, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 130, -1));

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, -1, -1));

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        comboOpiekun.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboOpiekun.setName("comboOpiekun"); // NOI18N
        jPanel2.add(comboOpiekun, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 130, -1));

        upPanel.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 750, 80));

        jSplitPane1.setTopComponent(upPanel);

        downPanel.setBackground(resourceMap.getColor("downPanel.background")); // NOI18N
        downPanel.setName("downPanel"); // NOI18N
        downPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        butApp.setText(resourceMap.getString("butApp.text")); // NOI18N
        butApp.setName("butApp"); // NOI18N
        butApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAppActionPerformed(evt);
            }
        });
        downPanel.add(butApp, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 150, -1));

        butApsHubs.setText(resourceMap.getString("butApsHubs.text")); // NOI18N
        butApsHubs.setName("butApsHubs"); // NOI18N
        butApsHubs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butApsHubsActionPerformed(evt);
            }
        });
        downPanel.add(butApsHubs, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 160, -1));

        butConf.setText(resourceMap.getString("butConf.text")); // NOI18N
        butConf.setName("butConf"); // NOI18N
        butConf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConfActionPerformed(evt);
            }
        });
        downPanel.add(butConf, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 150, -1));

        butDist.setText(resourceMap.getString("butDist.text")); // NOI18N
        butDist.setName("butDist"); // NOI18N
        butDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDistActionPerformed(evt);
            }
        });
        downPanel.add(butDist, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 10, 150, -1));

        butNumbers.setText(resourceMap.getString("butNumbers.text")); // NOI18N
        butNumbers.setName("butNumbers"); // NOI18N
        butNumbers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNumbersActionPerformed(evt);
            }
        });
        downPanel.add(butNumbers, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 10, 140, -1));

        butServices.setText(resourceMap.getString("butServices.text")); // NOI18N
        butServices.setName("butServices"); // NOI18N
        butServices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butServicesActionPerformed(evt);
            }
        });
        downPanel.add(butServices, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 30, 140, -1));

        butPC.setText(resourceMap.getString("butPC.text")); // NOI18N
        butPC.setName("butPC"); // NOI18N
        butPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPCActionPerformed(evt);
            }
        });
        downPanel.add(butPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 150, -1));

        butCenPal.setText(resourceMap.getString("butCenPal.text")); // NOI18N
        butCenPal.setName("butCenPal"); // NOI18N
        butCenPal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCenPalActionPerformed(evt);
            }
        });
        downPanel.add(butCenPal, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, 150, -1));

        butCenDR.setText(resourceMap.getString("butCenDR.text")); // NOI18N
        butCenDR.setName("butCenDR"); // NOI18N
        butCenDR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCenDRActionPerformed(evt);
            }
        });
        downPanel.add(butCenDR, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, 160, -1));

        butCenEX.setText(resourceMap.getString("butCenEX.text")); // NOI18N
        butCenEX.setName("butCenEX"); // NOI18N
        butCenEX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCenEXActionPerformed(evt);
            }
        });
        downPanel.add(butCenEX, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 150, -1));

        jScrollPane11.setName("jScrollPane11"); // NOI18N

        synchronizationTable.setBackground(resourceMap.getColor("synchronizationTable.background")); // NOI18N
        synchronizationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        synchronizationTable.setName("synchronizationTable"); // NOI18N
        jScrollPane11.setViewportView(synchronizationTable);

        downPanel.add(jScrollPane11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 750, 390));

        jbSaveSynchronization.setText(resourceMap.getString("jbSaveSynchronization.text")); // NOI18N
        jbSaveSynchronization.setName("jbSaveSynchronization"); // NOI18N
        jbSaveSynchronization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveSynchronizationActionPerformed(evt);
            }
        });
        downPanel.add(jbSaveSynchronization, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 440, 190, 30));

        jSplitPane1.setRightComponent(downPanel);

        add(jSplitPane1);
    }// </editor-fold>//GEN-END:initComponents



    private void fillEmptyTable()
    {
            YPFunctions.FillTableFromOra(
                    "select s.id_dict as \"Slownik\"," +
                    "d.description as \"Opis\"," +
                    "s.date_synchro as \"Synchronizacja\"," +
                    "s.date_active as \"Data aktywacji\"," +
                    "'N' as \"Ustaw\" " +
                    "from cas_synchro s, cas_dict d " +
                    "where s.id_cust=? and " +
                    "s.id_dict=d.id_dict " +
                    "order by s.id_dict",
                    new Vector(Arrays.asList(1001)),
                    0,
                    99999,
                    synchronizationTable,
                    new Vector(Arrays.asList(80, 100, 90, 50, 20)),
                    new Vector(Arrays.asList(5)),
                    false,
                    false,
                    new Vector(Arrays.asList(3, 4)),
                    new Vector(Arrays.asList(0, 1, 2)),
                    false);
    }

    private void toogleValueInSynchro(Vector<String> v_lines)
    {
        YPTableModel tm = (YPTableModel)synchronizationTable.getModel();
        for (int i = 0; i < tm.getRowCount(); i++)
        {
            if (v_lines.contains((String)(tm.getValueAt(i, 0))))
            {
                    Boolean b = (Boolean)(tm.getValueAt(i, 4)) ;
                    tm.setValueAt(!b, i, 4);
            }
        }
        synchronizationTable.repaint();
    }




    private void butAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAppActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("APPLICATION")));
}//GEN-LAST:event_butAppActionPerformed

    private void butApsHubsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butApsHubsActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_APSHUBS", "DICT_APSHUBS_EXT")));
}//GEN-LAST:event_butApsHubsActionPerformed

    private void butConfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConfActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_CONFIG")));
}//GEN-LAST:event_butConfActionPerformed

    private void butDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDistActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_DISTANCES")));
}//GEN-LAST:event_butDistActionPerformed

    private void butNumbersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNumbersActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_NUMBERS")));
}//GEN-LAST:event_butNumbersActionPerformed

    private void butServicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butServicesActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_SERVICES")));
}//GEN-LAST:event_butServicesActionPerformed

    private void butPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPCActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_PC","DICT_PCS")));
}//GEN-LAST:event_butPCActionPerformed

    private void butCenPalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCenPalActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_PAL","DICT_PAL_RAB","DICT_PAL_RAB_DISTANCE","DICT_PAL_RAB_LINE")));
}//GEN-LAST:event_butCenPalActionPerformed

    private void butCenDRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCenDRActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_DR","DICT_DR_RAB_LINE","DICT_DR_STD")));
}//GEN-LAST:event_butCenDRActionPerformed

    private void butCenEXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCenEXActionPerformed
        toogleValueInSynchro(new Vector(Arrays.asList("DICT_EX","DICT_EX_RAB","DICT_EX_STD","DICT_EX_RAB_STD")));
}//GEN-LAST:event_butCenEXActionPerformed

    private void jbSaveSynchronizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveSynchronizationActionPerformed
        boolean bResult = true;
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        // Nacisnięty przycisk "Zapisz synchronizację™"
        if ((vectorSelectedIdCas != null) && (vectorSelectedIdCas.size() > 0))
        {
            for (int i = 0; i < synchronizationTable.getRowCount(); i++)
            {
                if ((Boolean)synchronizationTable.getValueAt(i, 4))
                {
                    for (int iVector = 0; iVector < vectorSelectedIdCas.size(); iVector++)
                    {
                        String querySynchronization =
                                "update cas_synchro set ";
                        String synchroDate = YPFunctions.strGet(synchronizationTable,i, 3);
                        if (synchroDate.length() >= 10)
                            synchroDate = synchroDate.substring(0, 10);
                        // Jeśli data synchronizacji jest "pusta"
                        if (synchroDate.isEmpty()) {
                            querySynchronization += "date_active=null,";
                        }
                        // inaczej
                        else
                            querySynchronization += "date_active=to_date('" + synchroDate + "','yyyy-mm-dd'),";

                        // dopisujemy zapytanie SQL
                        querySynchronization = querySynchronization + 
                                "check_synchro='T' where id_cust in (" + 
                                vectorSelectedIdCas.elementAt(iVector) + 
                                ") and id_dict=?";

                        // Parametry
                        Vector pars = new Vector(Arrays.asList(
                                YPFunctions.strGet(synchronizationTable,i, 0)));
                        // Wykonujemy zapytanie SQL
                        bResult = bResult && GlobalData.oraSession.executeQuery(querySynchronization,pars);
                        GlobalData.oraSession.SaveLog("Synchronizacja dla id_cust=" + YPFunctions.strGet(synchronizationTable,i, 0),"");
                        
                    }
                }
            }
        } else
        {
            String where = "";
            String terminals = tfTerminal.getText().toUpperCase();
            String idCass = tfIdCas.getText().toUpperCase();
            String opiekun = (String)comboOpiekun.getSelectedItem();

            if (idCass.equals("") && terminals.equals("") && opiekun.equals("*.*"))
            {
                      if (javax.swing.JOptionPane.YES_OPTION != YPFunctions.showQuestionMessage(
                          "<html>Czy naprawdę chcesz ustawić synchronizację dla <b>WSZYSTKICH</b> klientów ?",
                          "Ustawienie synchronizacji"))
                                 return;
            }

            if (!idCass.equals(""))
                where = "id_cust in (" + idCass + ")";
            else if ((!opiekun.equals("*.*")) && (!terminals.equals("")))
                where = "id_cust in (select id_cust from customers where id_user = (select id_user from cas_users where user_name='"+
                        opiekun + "')) and id_cust in (select id_cust from customers where depot in (" +
                        YPFunctions.getCommaTextWithApostrof(terminals) + ")) ";
            else if (!terminals.equals(""))
                where = "id_cust in (select id_cust from customers where depot in (" +
                        YPFunctions.getCommaTextWithApostrof(terminals) + "))";
            else if (!opiekun.equals("*.*"))
                where = "id_cust in (select id_cust from customers where id_user = (select id_user from cas_users where user_name='"+
                        opiekun + "')) ";
            else
                where = "1=1";


            // Dla każdego słownika
            for (int i = 0; i < synchronizationTable.getRowCount(); i++) {
                if ((Boolean)synchronizationTable.getValueAt(i, 4))
                {
                    // Tworzymy zapytanie SQL
                    String querySynchronization =
                            "update cas_synchro set ";
                    String synchroDate = YPFunctions.strGet(synchronizationTable,i, 3);
                    if (synchroDate.length() >= 10)
                        synchroDate = synchroDate.substring(0, 10);
                    // Jeśli data synchronizacji jest "pusta"
                    if (synchroDate.isEmpty()) {
                        querySynchronization += "date_active=null,";
                    }
                    // inaczej
                    else
                        querySynchronization += "date_active=to_date('" + synchroDate + "','yyyy-mm-dd'),";

                    // dopisujemy zapytanie SQL
                    querySynchronization = querySynchronization + "check_synchro='T' where " + where + " and id_dict=?";

                    // Parametry
                    Vector pars = new Vector(Arrays.asList(
                            YPFunctions.strGet(synchronizationTable,i, 0)));
                    // Wykonujemy zapytanie SQL
                    bResult = bResult && GlobalData.oraSession.executeQuery(querySynchronization,pars);
                    GlobalData.oraSession.SaveLog("Synchronizacja dla", where);
                    
                }
            }
        }
        this.setCursor(java.awt.Cursor.getDefaultCursor());
        YPFunctions.showMessage("Dane synchronizacji zostały zapisane","");
        // commit, rollback ?
}//GEN-LAST:event_jbSaveSynchronizationActionPerformed

    private void jbShowCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbShowCustomersActionPerformed
        // Naciśnięty przycisk "?" w polu "ID CAS"
        // Proponujemy zaznaczyć klientów do przegłądania
        String forTerminal = tfTerminal.getText().toUpperCase();
        String forOpiekun = (String)comboOpiekun.getSelectedItem();
        if (forOpiekun.equals("*.*"))
            forOpiekun = "";
        if (!(forTerminal+forOpiekun).equals(""))
        {
            SelectCustomerDialog frame = new SelectCustomerDialog(
                      null,
                      true,
                      false,
                      forTerminal,
                      forOpiekun);
            frame.setTitle("Zaznacz ID_CUST klientów, którzycz chcesz zaznaczyć do synchronizacji");
            frame.setVisible(true);
           // Wyświetlamy Id Cust, które chcemy przeglądać
           tfIdCas.setText(((SelectCustomerDialog)frame).selectedID_CUST);
           tfIdCas.repaint();
           vectorSelectedIdCas = ((SelectCustomerDialog)frame).vectorSelectedIdCas;
        }
    }//GEN-LAST:event_jbShowCustomersActionPerformed

    private void tfTerminalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfTerminalMouseClicked
        if (tfTerminal.isEnabled())
        {
           SelectDepotDialog frame = new SelectDepotDialog(CasAdminApp.getApplication().getMainFrame(), true);
           Point p = tfTerminal.getLocationOnScreen();
           p.x += tfTerminal.getWidth();
           frame.setLocation(p);
           frame.setVisible(true);
           // Wyświetlamy listę depotów, które chcemy przeglądać
           if (((SelectDepotDialog) frame).getReturnStatus() != ((SelectDepotDialog) frame).RET_CANCEL)
           {
              tfTerminal.setText(((SelectDepotDialog) frame).retDepot);
              tfTerminal.repaint();
           }
        }
    }//GEN-LAST:event_tfTerminalMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butApp;
    private javax.swing.JButton butApsHubs;
    private javax.swing.JButton butCenDR;
    private javax.swing.JButton butCenEX;
    private javax.swing.JButton butCenPal;
    private javax.swing.JButton butConf;
    private javax.swing.JButton butDist;
    private javax.swing.JButton butNumbers;
    private javax.swing.JButton butPC;
    private javax.swing.JButton butServices;
    private javax.swing.JComboBox comboOpiekun;
    private javax.swing.JPanel downPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton jbSaveSynchronization;
    private javax.swing.JButton jbShowCustomers;
    private javax.swing.JTable synchronizationTable;
    private javax.swing.JTextField tfIdCas;
    private javax.swing.JTextField tfTerminal;
    private javax.swing.JPanel upPanel;
    // End of variables declaration//GEN-END:variables
    private Vector<String> vectorSelectedIdCas;
}
