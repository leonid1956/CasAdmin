unit AppParams;

interface
uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ScHttp, ScSSLTypes, StdCtrls, IniFiles, System.IOUtils;

  type
  TAppParams = record
    public
      ConnStrAppLogowanieSDS,
      ConnStrAppLogowanieSPS,
      ConnStrCasDpM1,
      ConnStrCasDpM1TST         : string;
      IsTestVersion             : boolean;
      Code                      : Integer;
      class function getParams  : TAppParams; static;
  end;


implementation

uses uLkJSON;

//------------------------------------------------------------------------------
// APPL_SB/ADMIN@SDS - lista aplikacji pobrac ID     CASDP  619
// generator https://www.guidgenerator.com/online-guid-generator.aspx
// Wygenerowac id_APP d2ef24bd-46f9-44ab-aeaa-a9c18c719a1e
// APP_TO_APPL_MAP/LOGIN_API@SDS - wpisac APPL_ID i Wygenerowane id_APP



class function TAppParams.getParams : TAppParams;
var ini: TIniFile;
    iniName : string;
    tmp : string;
    appId : string;
    urlString : string;

    Request : TScHttpWebRequest;
    Response : TScHttpWebResponse;
    Buf : TBytes;
    l_js : TlkJSONbase;
    i : Integer;
    function normalize(pConnStr : string; pDb : string) : string;
    begin
       if not pConnStr.Contains('@') then
           result := pConnStr.Trim() + '@' + pDb
       else
           result := pConnStr.Trim();
    end;

begin
      result.ConnStrAppLogowanieSDS := '';
      result.ConnStrAppLogowanieSPS := '';
      result.ConnStrCasDpM1 := '';
      result.ConnStrCasDpM1TST := '';
      result.isTestVersion := true;
      result.Code  := -1;
      iniName := ChangeFileExt(Application.ExeName,'.ini');
      if TFile.Exists(iniName) then begin
         result.code := 0;
         ini := TIniFile.Create(iniName);
        tmp := Trim(ini.ReadString('MAIN', 'TEST_VERSION', 'TRUE')).ToUpper();
        result.isTestVersion := (tmp = 'TRUE') or (tmp = 'T') or (tmp = 'Y') or (tmp = '1');
        appId := Trim(ini.ReadString('MAIN', 'APPLICATION_ID', ''));
        if appId = '' then begin
           result.code := 1;
        end else begin
           urlString := Trim(ini.ReadString('MAIN', 'CONNECT_STRING_URL', ''));
           if urlString = '' then
              result.code := 2
           else begin
                buf := TEncoding.UTF8.GetBytes('{ "app_id": "' + appId + '" }');
                Request := TScHttpWebRequest.Create(nil);
                try
                  Request.Method := rmPOST;
                  Request.SSLOptions.Protocols := [spTls12];
                  Request.ReadWriteTimeout := 5;
                  Request.RequestUri := urlString;
                  Request.ContentType  := 'application/json;charset=UTF-8';
                  Request.Accept := 'application/json';
                  Request.ContentLength := Length(Buf);
                  Request.WriteBuffer(Buf);

                  try
                    response := Request.GetResponse;
                    tmp := response.ReadAsString;

                    l_js := TlkJSON.ParseText(tmp);
                    for i := 0 to Pred(l_js.Count) do
                      try
                        if (VarToStr(l_js.Child[I].Field['db_name'].Value).ToUpper()= 'SPS')
                           and
                           (VarToStr(l_js.Child[I].Field['db_user'].Value).ToUpper() = 'APP_LOGOWANIE')
                         then
                            Result.ConnStrAppLogowanieSPS :=
                               normalize(VarToStr(l_js.Child[I].Field['connection_string'].Value), 'SPS')
                        else
                        if (VarToStr(l_js.Child[I].Field['db_name'].Value).ToUpper()= 'SDS')
                           and
                           (VarToStr(l_js.Child[I].Field['db_user'].Value).ToUpper() = 'APP_LOGOWANIE')
                         then
                            Result.ConnStrAppLogowanieSDS :=
                               normalize(VarToStr(l_js.Child[I].Field['connection_string'].Value), 'SDS')
                        else
                        if (VarToStr(l_js.Child[I].Field['db_name'].Value).ToUpper()= 'M1')
                           and
                           (VarToStr(l_js.Child[I].Field['db_user'].Value).ToUpper() = 'CAS_DP')
                         then
                            Result.ConnStrCasDpM1 :=
                               normalize(VarToStr(l_js.Child[I].Field['connection_string'].Value), 'M1')
                        else
                        if (VarToStr(l_js.Child[I].Field['db_name'].Value).ToUpper()= 'M1TST')
                           and
                           (VarToStr(l_js.Child[I].Field['db_user'].Value).ToUpper() = 'CAS_DP')
                         then
                            Result.ConnStrCasDpM1Tst :=
                               normalize(VarToStr(l_js.Child[I].Field['connection_string'].Value), 'M1TST');

                        result.Code := 0;
                      except end;
                  except
                    on E: HttpException do
                    begin Result.Code := 100 + Integer(HttpException(E).StatusCode);
                    end;
                    on e:exception do
                    begin Result.Code := 1000;
                    end;
                  end;

                finally
                  Request.Free;
                  if Assigned(Response) then
                    Response.Free;
                end;
           end;
        end;
      end;

      if Assigned(ini) then
      ini.Free;

      if result.Code = 0  then begin
         if result.IsTestVersion then begin
            if (result.ConnStrAppLogowanieSDS = '') or (result.ConnStrCasDpM1TST = '') then
               result.Code := 10;
         end else begin
            if (result.ConnStrAppLogowanieSPS = '') or (result.ConnStrCasDpM1 = '') then
               result.Code := 20;
         end;
      end;
end;


end.
