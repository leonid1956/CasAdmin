unit ADSHLP;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date: 2006-10-18                                            }
{    Generated Time: 11:04:38                                              }
{                                                                          }
{**************************************************************************}

interface
uses
  Windows, ActiveDs_TLB, ActiveX;


type
  PIEnumVARIANT = ^IEnumVARIANT;


function ADsGetObject(lpszPathName: WideString;
                      const riid: TGUID;
                      out ppObject): HRESULT {$IFDEF WIN32} safecall {$ENDIF};



function ADsBuildEnumerator(const pADsContainer: IADsContainer;
                            out ppEnumVariant: IEnumVARIANT): HRESULT {$IFDEF WIN32} safecall {$ENDIF};


function ADsFreeEnumerator(var pEnumVariant: IEnumVARIANT): HRESULT {$IFDEF WIN32} safecall {$ENDIF};


function ADsEnumerateNext(var pEnumVariant: IEnumVARIANT;
                          cElements: ULONG; 
                          var pvar: Variant;
                          var pcElementsFetched: ULONG): HRESULT {$IFDEF WIN32} safecall {$ENDIF}; 


function ADsBuildVarArrayStr(var lppPathNames: PWideChar; 
                             dwPathNames: LongInt; 
                             var pVar: Variant): HRESULT {$IFDEF WIN32} safecall {$ENDIF};


function ADsBuildVarArrayInt(var lpdwObjectTypes: LongInt; 
                             dwObjectTypes: LongInt; 
                             var pVar: Variant): HRESULT {$IFDEF WIN32} safecall {$ENDIF}; 



function ADsOpenObject(lpszPathName: LPCWSTR;
                       lpszUserName: LPCWSTR;
                       lpszPassword: LPCWSTR;
                       dwReserved: LongInt; 
                       const riid: TGUID; 
                       var ppObject: Pointer): HRESULT {$IFDEF WIN32} safecall {$ENDIF}; 

{/// }
{/// Helper functions for extended error support }
{/// }


function ADsGetLastError(var lpError: DWORD;
                         lpErrorBuf: LPWSTR;
                         dwErrorBufLen: DWORD;
                         lpNameBuf: LPWSTR;
                         dwNameBufLen: DWORD): HRESULT {$IFDEF WIN32} safecall {$ENDIF};


//procedure ADsSetLastError(dwErr: DWORD;
//                         pszError: LPCWSTR;
//                         pszProvider: LPCWSTR) {$IFDEF WIN32} safecall {$ENDIF};



//procedure ADsFreeAllErrorRecords() {$IFDEF WIN32} safecall {$ENDIF};


//procedure AllocADsMem(cb: LongInt) {$IFDEF WIN32} safecall {$ENDIF};


//function FreeADsMem(var pMem): Bool {$IFDEF WIN32} safecall {$ENDIF};


//procedure ReallocADsMem(var pOldMem;
//                       cbOld: LongInt;
//                       cbNew: LongInt) {$IFDEF WIN32} safecall {$ENDIF};


//function AllocADsStr(pStr: LPCWSTR): PWideChar {$IFDEF WIN32} safecall {$ENDIF};


//function FreeADsStr(var pStr: WideChar): Bool {$IFDEF WIN32} safecall {$ENDIF};



//function ReallocADsStr(var ppStr: PWideChar;
//                       var pStr: WideChar): Bool {$IFDEF WIN32} safecall {$ENDIF};



//function ADsEncodeBinaryData(var pbSrcData: BYTE;
//                             dwSrcLen: LongInt;
//                             var ppszDestData: PWideChar): HRESULT {$IFDEF WIN32} safecall {$ENDIF};


//function ADsDecodeBinaryData(szSrcData: LPCWSTR;
//                             var ppbDestData: PBYTE;
//                             var pdwDestLen: ULONG): HRESULT {$IFDEF WIN32} safecall {$ENDIF};


function PropVariantToAdsType(var pVariant: VARIANT;
                              dwNumVariant: LongInt; 
                              var ppAdsValues{: PADSVALUE};
                              var pdwNumValues: LongInt): HRESULT {$IFDEF WIN32} safecall {$ENDIF}; 


//function AdsTypeToPropVariant(var pAdsValues{: ADSVALUE};
//                              dwNumValues: LongInt;
//                              var pVariant: VARIANT): HRESULT {$IFDEF WIN32} safecall {$ENDIF};


//procedure AdsFreeAdsValues(var pAdsValues{: ADSVALUE};
//                           dwNumValues: LongInt) {$IFDEF WIN32} safecall {$ENDIF};

{/// }
{/// Helper routines to convert IADsSecurityDescriptor to a binary }
{/// security descriptor and also to convert a binary SD to }
{/// IADsSecurityDescriptor. }
{/// }

//function BinarySDToSecurityDescriptor(var pSecurityDescriptor: SECURITY_DESCRIPTOR;
//                                      var pVarsec: VARIANT;
//                                      pszServerName: LPCWSTR;
//                                      userName: LPCWSTR;
//                                      passWord: LPCWSTR;
//                                      dwFlags: LongInt): HRESULT {$IFDEF WIN32} safecall {$ENDIF};


//function SecurityDescriptorToBinarySD(vVarSecDes: VARIANT;
//                                      var ppSecurityDescriptor: PSECURITY_DESCRIPTOR;
//                                      var pdwSDLength: LongInt;
//                                      pszServerName: LPCWSTR;
//                                      userName: LPCWSTR;
//                                      passWord: LPCWSTR;
//                                      dwFlags: LongInt): HRESULT {$IFDEF WIN32} safecall {$ENDIF};


//function InitADsMem cdecl  {$IFDEF WIN32} safecall {$ENDIF};


//function AssertADsMemLeaks cdecl  {$IFDEF WIN32} safecall {$ENDIF};



//function DumpMemoryTracker cdecl  {$IFDEF WIN32} safecall {$ENDIF};


implementation

const ACTIVEDS = 'ActiveDS.dll';
const ADSLDPC = 'adsldpc.dll';

function ADsGetObject; external ACTIVEDS;
function ADsBuildEnumerator; external ACTIVEDS;
function ADsFreeEnumerator; external ACTIVEDS;
function ADsEnumerateNext; external ACTIVEDS;
function ADsBuildVarArrayStr; external ACTIVEDS;
function ADsBuildVarArrayInt; external ACTIVEDS;
function ADsOpenObject; external ACTIVEDS;
function PropVariantToAdsType; external ADSLDPC;


function ADsGetLastError; external ADSLDPC;
{procedure ADsSetLastError; external ADSLDPC;
procedure AllocADsMem; external ADSLDPC;
function FreeADsMem; external ADSLDPC;
procedure ReallocADsMem; external ADSLDPC;
function AllocADsStr; external ADSLDPC;
function FreeADsStr; external ADSLDPC;
function ReallocADsStr; external ADSLDPC;
function ADsEncodeBinaryData; external ADSLDPC;
function ADsDecodeBinaryData; external ADSLDPC;
function AdsTypeToPropVariant; external ADSLDPC;
procedure AdsFreeAdsValues; external ADSLDPC;
function BinarySDToSecurityDescriptor; external ADSLDPC;
function SecurityDescriptorToBinarySD; external ADSLDPC;
procedure InitADsMem; external ADSLDPC;
procedure AssertADsMemLeaks; external ADSLDPC;
procedure DumpMemoryTracker; external ADSLDPC;

procedure ADsFreeAllErrorRecords; external ACTIVEDS;}

end.
